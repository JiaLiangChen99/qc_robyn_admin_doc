{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"en/","title":"QC Robyn Admin","text":"<p>QC Robyn Admin is a powerful admin interface built on top of the Robyn framework and bootstrap, providing rich components and features to help quickly build admin backends.</p>"},{"location":"en/#key-features","title":"Key Features","text":"<ul> <li>\ud83d\ude80 Quick Setup: Generate complete admin interface with simple configurations</li> <li>\ud83d\udcca Table Component: Support sorting, filtering, searching, and custom formatting</li> <li>\ud83d\udcdd Form Component: Support various field types including text, date, select, etc.</li> <li>\ud83d\udd0d Search &amp; Filter: Support complex search and filter conditions</li> <li>\ud83d\udd17 Related Fields: Handle relationships between models</li> <li>\ud83d\udd12 Permissions: Fine-grained permission management system</li> <li>\ud83d\udcdd Hooks: Support custom hooks for admin operations</li> </ul>"},{"location":"en/#installation","title":"Installation","text":""},{"location":"en/api/model_admin_manager/","title":"Authorization Management","text":"<p>Robyn Admin provides a complete RBAC authorization management system, including user management, role management, and permission control.</p>"},{"location":"en/api/model_admin_manager/#initial-account","title":"Initial Account","text":"<p>The system automatically creates a super admin account during initialization: - Username: admin - Password: admin</p> <p>It is recommended to change the password immediately after first login.</p>"},{"location":"en/api/model_admin_manager/#user-management","title":"User Management","text":"<p>In the user management interface, you can: - Create new users - Edit user information (username, password, email, etc.) - Set user status (enable/disable) - Assign user roles</p> <p></p>"},{"location":"en/api/model_admin_manager/#role-management","title":"Role Management","text":"<p>Roles are collections of permissions. In the role management interface, you can: - Create new roles - Edit role information - Configure role can access routes</p> <p></p>"},{"location":"en/api/model_admin_manager/#user-for-role","title":"User For Role","text":"<p>edit user for role</p> <p></p>"},{"location":"en/components/filter_field/","title":"FilterField Component","text":"<p>FilterField is a component for configuring data list filtering conditions, supporting various filter types and data processing capabilities.</p> <p>Configuration is done in the filter_fields of AdminModel.</p>"},{"location":"en/components/filter_field/#basic-filter-types","title":"Basic Filter Types","text":""},{"location":"en/components/filter_field/#inputfilter","title":"InputFilter","text":"<p>Used for text search filtering:</p> <pre><code>InputFilter(\n    name=\"username\",           # Field name\n    label=\"Username\",          # Display label\n    placeholder=\"Enter username\", # Placeholder text\n    operator=\"icontains\"       # Filter operator\n)\n</code></pre>"},{"location":"en/components/filter_field/#selectfilter","title":"SelectFilter","text":"<p>Used for option filtering:</p> <pre><code>SelectFilter(\n    name=\"status\",\n    label=\"Status\",\n    choices={                  # Options configuration\n        True: \"Enabled\",\n        False: \"Disabled\"\n    },\n    multiple=False            # Whether to support multiple selection\n)\n</code></pre>"},{"location":"en/components/filter_field/#daterangefilter","title":"DateRangeFilter","text":"<p>Used for date range filtering:</p> <pre><code>DateRangeFilter(\n    name=\"create_time\",\n    label=\"Create Time\"\n)\n</code></pre>"},{"location":"en/components/filter_field/#numberrangefilter","title":"NumberRangeFilter","text":"<p>Used for numeric range filtering:</p> <pre><code>NumberRangeFilter(\n    name=\"price\",\n    label=\"Price\"\n)\n</code></pre>"},{"location":"en/components/filter_field/#booleanfilter","title":"BooleanFilter","text":"<p>Used for boolean value filtering:</p> <pre><code>BooleanFilter(\n    name=\"is_active\",\n    label=\"Active Status\"\n)\n</code></pre>"},{"location":"en/components/filter_field/#related-model-filtering","title":"Related Model Filtering","text":"<p>Supports filtering on related model fields:</p> <pre><code>InputFilter(\n    name=\"Category_name\",      # Format: RelatedModelName_fieldname\n    label=\"Category Name\",\n    related_model=Category,    # Related model class\n    related_key=\"category_id\"  # Foreign key field name\n)\n</code></pre>"},{"location":"en/components/filter_field/#complete-example","title":"Complete Example","text":"<pre><code>filter_fields = [\n    # Text input filter\n    InputFilter(\n        name=\"username\",\n        label=\"Username\",\n        placeholder=\"Search by username\"\n    ),\n\n    # Select filter\n    SelectFilter(\n        name=\"status\",\n        label=\"Status\",\n        choices={\n            1: \"Normal\",\n            0: \"Disabled\",\n            -1: \"Deleted\"\n        }\n    ),\n\n    # Date range filter\n    DateRangeFilter(\n        name=\"create_time\",\n        label=\"Create Time\"\n    ),\n\n    # Number range filter\n    NumberRangeFilter(\n        name=\"price\",\n        label=\"Price Range\"\n    ),\n\n    # Boolean filter\n    BooleanFilter(\n        name=\"is_active\",\n        label=\"Active Status\"\n    ),\n\n    # Related model filter\n    InputFilter(\n        name=\"Category_name\",\n        label=\"Category Name\",\n        related_model=Category,\n        related_key=\"category_id\"\n    )\n]\n</code></pre>"},{"location":"en/components/filter_field/#important-parameters","title":"Important Parameters","text":""},{"location":"en/components/filter_field/#basic-parameters","title":"Basic Parameters","text":"<ul> <li> <p><code>name</code>: Filter field name</p> <ul> <li>Type: <code>str</code></li> <li>Description: Corresponds to model field name, format for related models is \"ModelName_fieldname\"</li> </ul> </li> <li> <p><code>label</code>: Display label</p> <ul> <li>Type: <code>str</code></li> <li>Description: Display name for the filter</li> </ul> </li> <li> <p><code>filter_type</code>: Filter type</p> <ul> <li>Type: <code>FilterType</code></li> <li>Available values:<ul> <li><code>INPUT</code>: Input box</li> <li><code>SELECT</code>: Dropdown select</li> <li><code>DATE_RANGE</code>: Date range</li> <li><code>NUMBER_RANGE</code>: Number range</li> <li><code>BOOLEAN</code>: Boolean select</li> </ul> </li> </ul> </li> </ul>"},{"location":"en/components/filter_field/#advanced-parameters","title":"Advanced Parameters","text":"<ul> <li> <p><code>choices</code>: Options configuration (for SelectFilter)</p> <ul> <li>Type: <code>Dict[Any, str]</code></li> <li>Description: Defines the options and corresponding values for the select box</li> </ul> </li> <li> <p><code>multiple</code>: Multiple selection support (for SelectFilter)</p> <ul> <li>Type: <code>bool</code></li> <li>Default value: <code>False</code></li> </ul> </li> <li> <p><code>placeholder</code>: Placeholder text</p> <ul> <li>Type: <code>str</code></li> <li>Description: Hint text for input box</li> </ul> </li> <li> <p><code>operator</code>: Filter operator</p> <ul> <li>Type: <code>str</code></li> <li>Default value: <code>icontains</code></li> <li>Description: Defines how the filter condition compares values</li> </ul> </li> </ul>"},{"location":"en/components/filter_field/#important-notes","title":"Important Notes","text":"<ol> <li> <p>Related Model Filtering</p> <ul> <li>Field name must follow the \"ModelName_fieldname\" format</li> <li>Correct configuration of related_model and related_key is required</li> </ul> </li> <li> <p>Select Filter</p> <ul> <li>In choices dictionary, key is the actual value, value is the display text</li> <li>multiple=True enables multiple selection(to do)</li> </ul> </li> <li> <p>Range Filters</p> <ul> <li>DateRangeFilter provides date picker</li> <li>NumberRangeFilter provides numeric input boxes </li> </ul> </li> </ol>"},{"location":"en/components/filter_field/#advanced-usage","title":"Advanced Usage","text":""},{"location":"en/components/filter_field/#dynamic-filter-options","title":"Dynamic Filter Options","text":"<p>In some scenarios, we need to dynamically fetch filter options from the database, such as status lists. This can be achieved by overriding the <code>get_filter_fields</code> method:</p> <pre><code>class TrademarkAdmin(AdminModel):\n    async def get_status_choices(self) -&gt; Dict[str, str]:\n        \"\"\"Get status options\"\"\"\n        # Fetch all unique status values from database\n        status_choices = await US_Trademark.all().values_list('status', flat=True)\n        # Convert to options dictionary\n        return {status: status for status in status_choices if status}\n\n    async def get_filter_fields(self) -&gt; List[FilterField]:\n        \"\"\"Get filter field configurations\"\"\"\n        # Dynamically get status options\n        status_choices = await self.get_status_choices()        \n\n        filters = [\n            # Regular text search filter\n            InputFilter(\n                \"mark_name\", \n                label=\"Trademark Name\", \n                placeholder=\"Enter trademark name\",\n                operator=\"icontains\"\n            ),\n            # Dropdown filter with dynamic options\n            SelectFilter(\n                \"status\", \n                label=\"Status\",  \n                choices=status_choices,\n            )\n        ]\n        return filters\n</code></pre> <p>This approach is particularly useful in scenarios where: - Filter options need to be dynamically fetched from database - Filter options need to be generated based on user permissions - Filter configurations depend on other data</p> <p>By overriding the <code>get_filter_fields</code> method, we can: 1. Implement dynamic filter options 2. Return different filter configurations based on conditions 3. Use async operations in filter configurations</p>"},{"location":"en/components/form_field/","title":"FormField Component","text":"<p>FormField is a core component for configuring form fields, supporting various input types, data processing, and validation functionalities.</p> <p>Configuration is done in the form_fields and add_form_fields of AdminModel</p>"},{"location":"en/components/form_field/#basic-parameters","title":"Basic Parameters","text":"<ul> <li> <p><code>name</code>: Field name</p> <ul> <li>Type: <code>str</code></li> <li>Description: Corresponds to the model field name, used for form submission</li> </ul> </li> <li> <p><code>label</code>: Display label</p> <ul> <li>Type: <code>str</code></li> <li>Description: Display name for the form field</li> </ul> </li> <li> <p><code>field_type</code>: Field type</p> <ul> <li>Type: <code>DisplayType</code></li> <li>Available values:<ul> <li><code>TEXT</code>: Text input box</li> <li><code>EMAIL</code>: Email input box</li> <li><code>PASSWORD</code>: Password input box</li> <li><code>DATE</code>: Date picker</li> <li><code>DATETIME</code>: Date time picker</li> <li><code>SELECT</code>: Dropdown select box</li> <li><code>SWITCH</code>: Switch component</li> <li><code>FILE_UPLOAD</code>: File upload</li> </ul> </li> <li>Description: Determines the input type of the form field</li> </ul> </li> <li> <p><code>required</code>: Required field</p> <ul> <li>Type: <code>bool</code></li> <li>Default value: <code>False</code></li> <li>Description: Whether the field is required</li> </ul> </li> <li> <p><code>upload_path</code>: File upload path</p> <ul> <li>Type: <code>str</code></li> <li>Default value: <code>None</code></li> <li>Description: The path for file upload</li> </ul> </li> <li> <p><code>max_size</code>: File upload max size</p> <ul> <li>Type: <code>int</code></li> <li>Default value: <code>None</code></li> <li>Description: The max size for file upload (unit: bytes)</li> </ul> </li> </ul>"},{"location":"en/components/form_field/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"en/components/form_field/#select-configuration","title":"Select Configuration","text":"<p>For configuring dropdown select options:</p> <ul> <li><code>choices</code>: Options configuration<ul> <li>Type: <code>Dict[str, Any]</code></li> <li>Description: Defines the options and corresponding values for the select box</li> </ul> </li> </ul> <p>Example:</p> <pre><code>FormField(\n    \"is_active\",\n    label=\"Status\",\n    field_type=DisplayType.SELECT,\n    choices={\"Active\": True, \"Disabled\": False}\n)\n</code></pre>"},{"location":"en/components/form_field/#data-processor","title":"Data Processor","text":"<p>For processing field values during form submission:</p> <ul> <li><code>processor</code>: Processing function<ul> <li>Type: <code>Callable[[Any], Any]</code></li> <li>Description: Processes field value before saving</li> </ul> </li> </ul> <p>Example:</p> <pre><code>FormField(\n    \"password\", \n    label=\"Password\", \n    field_type=DisplayType.PASSWORD,\n    required=True,\n    processor=lambda x: AdminUser.hash_password(x)  # Password encryption\n)\n</code></pre>"},{"location":"en/components/form_field/#field-type-examples","title":"Field Type Examples","text":""},{"location":"en/components/form_field/#text-input","title":"Text Input","text":"<pre><code>FormField(\n    \"username\",\n    label=\"Username\",\n    required=True\n)\n</code></pre>"},{"location":"en/components/form_field/#email-input","title":"Email Input","text":"<pre><code>FormField(\n    \"email\",\n    label=\"Email\",\n    field_type=DisplayType.EMAIL,\n    required=True\n)\n</code></pre>"},{"location":"en/components/form_field/#password-input","title":"Password Input","text":"<pre><code>FormField(\n    \"password\",\n    label=\"Password\",\n    field_type=DisplayType.PASSWORD,\n    required=True\n)\n</code></pre>"},{"location":"en/components/form_field/#date-picker","title":"Date Picker","text":"<pre><code>FormField(\n    'create_at',\n    label=\"Birth Date\",\n    field_type=DisplayType.DATE\n)\n</code></pre>"},{"location":"en/components/form_field/#dropdown-select","title":"Dropdown Select","text":"<pre><code>FormField(\n    \"status\",\n    label=\"Status\",\n    field_type=DisplayType.SELECT,\n    choices={\n        \"Enabled\": True,\n        \"Disabled\": False\n    }\n)\n</code></pre>"},{"location":"en/components/form_field/#complete-example","title":"Complete Example","text":"<pre><code>form_fields = [\n    # Basic text field\n    FormField(\n        \"username\",\n        label=\"Username\",\n        required=True\n    ),\n\n    # Email field\n    FormField(\n        \"email\",\n        label=\"Email\",\n        field_type=DisplayType.EMAIL,\n        required=True\n    ),\n\n    # Password field (with processor)\n    FormField(\n        \"password\", \n        label=\"Password\", \n        field_type=DisplayType.PASSWORD,\n        required=True,\n        processor=lambda x: AdminUser.hash_password(x)\n    ),\n\n    # Phone field\n    FormField(\n        \"phone\",\n        label=\"Phone\",\n        field_type=DisplayType.TEXT,\n        required=True\n    ),\n\n    # Status select field\n    FormField(\n        \"is_active\",\n        label=\"Status\",\n        field_type=DisplayType.SELECT,\n        choices={\"Active\": True, \"Disabled\": False}\n    ),\n\n    # Date field\n    FormField(\n        'create_at',\n        label=\"Birth Date\",\n        field_type=DisplayType.DATE\n    )\n]\n</code></pre>"},{"location":"en/components/form_field/#important-notes","title":"Important Notes","text":"<ol> <li> <p>Field Types</p> <ul> <li>Choosing the appropriate <code>field_type</code> provides corresponding input validation</li> <li><code>EMAIL</code> type automatically validates email format</li> <li><code>DATE</code> and <code>DATETIME</code> provide date pickers</li> </ul> </li> <li> <p>Data Processing</p> <ul> <li><code>processor</code> functions execute before data saving</li> <li>Ensure processing functions return the correct data type</li> </ul> </li> <li> <p>Required Fields</p> <ul> <li>Fields with <code>required=True</code> are validated on the frontend</li> <li>Required fields are checked during form submission </li> </ul> </li> </ol>"},{"location":"en/components/model/","title":"ModelAdmin Class","text":"<p>ModelAdmin is the core class for configuring how models are displayed and managed in the admin interface. By inheriting and configuring ModelAdmin, you can customize display fields, filters, search options, and other features.</p>"},{"location":"en/components/model/#basic-usage","title":"Basic Usage","text":"<pre><code>from qc_robyn_admin.core import ModelAdmin, TableField, DisplayType\n\nclass MarkAdmin(ModelAdmin):\n    # \u663e\u793a\u540d\u79f0\n    verbose_name = \"\u5546\u6807\u67e5\u8be2\"\n\n    # \u83dc\u5355\u914d\u7f6e\n    menu_group = \"\u5546\u6807\u67e5\u8be2\"    # \u6240\u5c5e\u83dc\u5355\u7ec4\n    menu_icon = \"bi bi-people\" # Bootstrap \u56fe\u6807\n    menu_order = 1            # \u83dc\u5355\u6392\u5e8f\n\n    # \u529f\u80fd\u5f00\u5173\n    enable_edit = True       # \u5141\u8bb8\u7f16\u8f91\n    allow_add = True        # \u5141\u8bb8\u6dfb\u52a0\n    allow_delete = True     # \u5141\u8bb8\u5220\u9664\n    allow_export = True     # \u5141\u8bb8\u5bfc\u51fa\n    allow_import = True    # \u5141\u8bb8\u5bfc\u5165\n\n    # \u8868\u683c\u5b57\u6bb5\u914d\u7f6e\n    table_fields = [\n        TableField(\n            name=\"id\", label=\"ID\", display_type=DisplayType.TEXT, editable=False, hidden=True\n        ),\n        TableField(\n            \"xxx\", label=\"xxx\", display_type=DisplayType.TEXT, sortable=True, formatter=lambda x: str(x)\n        ),\n    ]\n    # \u9ed8\u8ba4\u6392\u5e8f\n    default_ordering = [\"-created_at\"]\n\n    import_fields = [\n        \"name\",\n        \"email\",\n        \"biography\"\n    ]\n...\n# Mark is tortoise-orm model\nadmin_site.register_model(Mark, MarkAdmin)\n</code></pre>"},{"location":"en/components/model/#properties","title":"Properties","text":""},{"location":"en/components/model/#basic-properties","title":"Basic Properties","text":"<ul> <li> <p><code>verbose_name</code>: Display name</p> <ul> <li>Type: <code>str</code></li> <li>Description: Model name displayed in the admin interface</li> </ul> </li> <li> <p><code>menu_group</code>: Menu group</p> <ul> <li>Type: <code>str</code></li> <li>Description: Group name where the model appears in the admin menu</li> </ul> </li> <li> <p><code>menu_icon</code>: Menu icon</p> <ul> <li>Type: <code>str</code></li> <li>Description: Bootstrap Icons class name</li> </ul> </li> <li> <p><code>menu_order</code>: Menu order</p> <ul> <li>Type: <code>int</code></li> <li>Description: Position in the menu group, smaller numbers appear first</li> </ul> </li> </ul>"},{"location":"en/components/model/#feature-controls","title":"Feature Controls","text":"<ul> <li> <p><code>enable_edit</code>: Enable editing</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>True</code></li> <li>Description: Whether to allow record editing</li> </ul> </li> <li> <p><code>allow_add</code>: Allow adding</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>True</code></li> <li>Description: Whether to show the add button</li> </ul> </li> <li> <p><code>allow_delete</code>: Allow deletion</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>True</code></li> <li>Description: Whether to allow record deletion</li> </ul> </li> <li> <p><code>allow_export</code>: Allow export</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>True</code></li> <li>Description: Whether to show the export button</li> </ul> </li> <li> <p><code>allow_import</code>: Allow import</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>True</code></li> <li>Description: Whether to show the import button</li> </ul> </li> </ul>"},{"location":"en/components/model/#field-configuration","title":"Field Configuration","text":"<ul> <li> <p><code>table_fields</code>: Table fields</p> <ul> <li>Type: <code>List[TableField]</code></li> <li>Description: Define fields and their configuration in the table, more details reading: TableField</li> </ul> </li> <li> <p><code>form_fields</code>: Form fields</p> <ul> <li>Type: <code>List[FormField]</code></li> <li>Description: Define fields and their configuration in the edit form, more details reading: FormField</li> </ul> </li> <li> <p><code>search_fields</code>: Search fields</p> <ul> <li>Type: <code>List[SearchField]</code></li> <li>Description: Define searchable fields, more details reading: SearchField</li> </ul> </li> <li> <p><code>filter_fields</code>: Filter fields</p> <ul> <li>Type: <code>List[FilterField]</code></li> <li>Description: Define filter fields, more details reading: FilterField</li> </ul> </li> <li> <p><code>import_fields</code>: Import fields</p> <ul> <li>Type: <code>List[str]</code></li> <li>Description: Define fields that can be imported</li> </ul> </li> </ul>"},{"location":"en/components/model/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"en/components/model/#custom-queryset","title":"Custom Queryset","text":"<pre><code>async def get_queryset(self, request: Request, params: dict) -&gt; QuerySet:\n    \"\"\"Custom queryset method\"\"\"\n    queryset = self.model.all()\n\n    # Add custom filters\n    queryset = queryset.filter(is_active=True)\n\n    # Handle related queries\n    queryset = queryset.select_related(\"department\")\n\n    return queryset\n</code></pre>"},{"location":"en/components/model/#custom-serialization","title":"Custom Serialization","text":"<pre><code>async def serialize_object(self, obj: Model, for_display: bool = True) -&gt; dict:\n    \"\"\"Custom serialization method\"\"\"\n    result = await super().serialize_object(obj, for_display)\n\n    # Add custom field\n    result['custom_field'] = await self.get_custom_value(obj)\n\n    return result\n</code></pre>"},{"location":"en/components/model/#usage-example","title":"Usage Example","text":"<pre><code>from robyn_admin.core import ModelAdmin, TableField, SearchField, SelectFilter\nfrom your_models import User\n\nclass UserAdmin(ModelAdmin):\n    verbose_name = \"User Management\"\n    menu_group = \"System\"\n    menu_icon = \"bi bi-people\"\n\n    table_fields = [\n        TableField(\"username\", label=\"Username\", sortable=True),\n        TableField(\"email\", label=\"Email\", sortable=True),\n        TableField(\n            \"is_active\", \n            label=\"Status\",\n            display_type=DisplayType.SWITCH,\n            editable=True,\n            labels={True: \"Active\", False: \"Inactive\"}\n        )\n    ]\n\n    search_fields = [\n        SearchField(\"username\", label=\"Username\"),\n        SearchField(\"email\", label=\"Email\")\n    ]\n\n    filter_fields = [\n        SelectFilter(\n            \"is_active\",\n            label=\"Status\",\n            choices={True: \"Active\", False: \"Inactive\"}\n        )\n    ]\n\n    default_ordering = [\"-created_at\"]\n</code></pre>"},{"location":"en/components/register/","title":"AdminSite Registration","text":"<p>AdminSite is the core class of QC Robyn Admin, used to initialize and configure the entire admin system.</p>"},{"location":"en/components/register/#basic-usage","title":"Basic Usage","text":"<pre><code>from robyn import Robyn\nfrom robyn_admin.core import AdminSite\n\napp = Robyn()\nadmin_site = AdminSite(\n    app,\n    title=\"QC Robyn Admin\",\n    prefix=\"admin\",\n    copyright=\"\u00a9 2024 Company Name. All rights reserved\",\n    db_url=\"postgresql://user:password@localhost:5432/dbname\",\n    modules={\n        \"models\": [\"model.table\", \"robyn_admin.models\"]\n    },\n    default_language=\"en_US\",\n    generate_schemas=True\n)\n</code></pre>"},{"location":"en/components/register/#parameters","title":"Parameters","text":""},{"location":"en/components/register/#required-parameters","title":"Required Parameters","text":"<ul> <li><code>app</code>: Robyn application instance<ul> <li>Type: <code>Robyn</code></li> <li>Description: The Robyn application instance used for registering routes and handlers</li> </ul> </li> </ul>"},{"location":"en/components/register/#optional-parameters","title":"Optional Parameters","text":"<ul> <li> <p><code>title</code>: Admin system title</p> <ul> <li>Type: <code>str</code></li> <li>Default: 'QC Robyn Admin'</li> <li>Description: System name displayed at the top of the admin interface</li> </ul> </li> <li> <p><code>prefix</code>: Route prefix</p> <ul> <li>Type: <code>str</code></li> <li>Default: 'admin'</li> <li>Description: URL prefix for the admin system, e.g., '/admin'</li> </ul> </li> <li> <p><code>copyright</code>: Copyright information</p> <ul> <li>Type: <code>str</code></li> <li>Default: 'QC Robyn Admin'</li> <li>Description: Copyright text displayed at the bottom of the page</li> </ul> </li> <li> <p><code>db_url</code>: Database connection URL</p> <ul> <li>Type: <code>str</code></li> <li>Default: None</li> <li>Description: Database connection string, uses existing configuration if None</li> </ul> </li> <li> <p><code>modules</code>: Model module configuration</p> <ul> <li>Type: <code>Dict[str, List[Union[str, ModuleType]]]</code></li> <li>Default: None</li> <li>Description: Configuration for model modules to be loaded</li> </ul> </li> <li> <p><code>default_language</code>: Default language</p> <ul> <li>Type: <code>str</code></li> <li>Default: 'en_US'</li> <li>Description: System default language, supports 'zh_CN' and 'en_US'</li> </ul> </li> <li> <p><code>generate_schemas</code>: Auto-generate database tables</p> <ul> <li>Type: <code>bool</code></li> <li>Default: False</li> <li>Description: Whether to automatically create database tables on startup</li> </ul> </li> </ul>"},{"location":"en/components/register/#main-methods","title":"Main Methods","text":""},{"location":"en/components/register/#register_model","title":"register_model","text":"<p>Register a model to the admin system.</p> <pre><code>admin_site.register_model(YourModel, YourModelAdmin)\n</code></pre> <p>Parameters: - <code>YourModel</code>: Tortoise ORM model class - <code>YourModelAdmin</code>: Corresponding admin class</p>"},{"location":"en/components/register/#register_menu","title":"register_menu","text":"<p>Register a custom menu item.</p> <pre><code>from robyn_admin.core import MenuItem\n\nadmin_site.register_menu(MenuItem(\n    name=\"System Management\",\n    icon=\"bi bi-gear\",\n    order=1\n))\n</code></pre> <p>Parameters: - <code>menu_item</code>: MenuItem instance containing menu name, icon, and other information</p>"},{"location":"en/components/register/#usage-example","title":"Usage Example","text":"<pre><code>from robyn import Robyn\nfrom robyn_admin.core import AdminSite, ModelAdmin, MenuItem\nfrom your_models import YourModel\n\napp = Robyn()\n\nadmin_site = AdminSite(\n    app,\n    title=\"Admin System\",\n    prefix=\"admin\",\n    copyright=\"\u00a9 2024 qc_robyn_admin\",\n    default_language=\"en_US\"\n)\n\nadmin_site.register_menu(MenuItem(\n    name=\"Business Management\",\n    icon=\"bi bi-briefcase\",\n    order=1\n))\n\nadmin_site.register_model(YourModel, YourModelAdmin)\n</code></pre>"},{"location":"en/components/register/#important-notes","title":"Important Notes","text":"<ol> <li> <p>Database Configuration</p> <ul> <li>If <code>db_url</code> is not provided, the system will try to use existing database configuration</li> <li>It's recommended to explicitly provide database configuration in production</li> </ul> </li> <li> <p>Permission Control</p> <ul> <li>The system automatically creates a default superuser account (username: admin, password: admin)</li> <li>It's recommended to change the superuser password immediately after deployment</li> </ul> </li> <li> <p>Route Prefix</p> <ul> <li>Ensure the <code>prefix</code> doesn't conflict with other routes</li> <li>Use meaningful prefixes like 'admin', 'manage', etc. </li> </ul> </li> </ol>"},{"location":"en/components/search_field/","title":"SearchField Component","text":"<p>SearchField is a component for configuring data list search conditions, supporting both regular fields and related model fields search.</p> <p>Configuration is done in the search_fields of AdminModel.</p>"},{"location":"en/components/search_field/#basic-usage","title":"Basic Usage","text":""},{"location":"en/components/search_field/#regular-field-search","title":"Regular Field Search","text":"<p>Used for searching fields in the current model:</p> <pre><code>search_fields = [\n    SearchField(\n        name=\"username\",           # Field name\n    )\n]\n</code></pre>"},{"location":"en/components/search_field/#related-model-field-search","title":"Related Model Field Search","text":"<p>Used for searching fields in related models:</p> <pre><code>search_fields = [\n    SearchField(\n        name=\"Category_name\",      # Format: RelatedModelName_fieldname\n        related_model=Category,    # Related model class\n        related_key=\"category_id\"  # Foreign key field name\n    )\n]\n</code></pre>"},{"location":"en/components/search_field/#complete-example","title":"Complete Example","text":"<pre><code>class TrademarkRecordAdmin(AdminModel):\n    search_fields = [\n        # Related model field search\n        SearchField(\n            name=\"US_Trademark_mark_name\",     # Search trademark name\n            related_model=US_Trademark,\n            related_key=\"trademark_id\",\n        ),\n        SearchField(\n            name=\"US_Trademark_serial_number\", # Search trademark number\n            related_model=US_Trademark,\n            related_key=\"trademark_id\",\n        )\n    ]\n</code></pre>"},{"location":"en/components/search_field/#important-parameters","title":"Important Parameters","text":""},{"location":"en/components/search_field/#basic-parameters","title":"Basic Parameters","text":"<ul> <li><code>name</code>: Search field name<ul> <li>Type: <code>str</code></li> <li>Description: Corresponds to model field name, format for related models is \"ModelName_fieldname\"</li> </ul> </li> </ul>"},{"location":"en/components/search_field/#related-model-parameters","title":"Related Model Parameters","text":"<ul> <li> <p><code>related_model</code>: Related model class</p> <ul> <li>Type: <code>Type[Model]</code></li> <li>Description: Specifies the related model class</li> </ul> </li> <li> <p><code>related_key</code>: Related foreign key field</p> <ul> <li>Type: <code>str</code></li> <li>Description: Specifies the foreign key field name of the related model</li> </ul> </li> </ul>"},{"location":"en/components/search_field/#important-notes","title":"Important Notes","text":"<ol> <li> <p>Related Model Search</p> <ul> <li>Field name must follow the \"ModelName_fieldname\" format</li> <li>Both related_model and related_key parameters must be configured</li> </ul> </li> <li> <p>Search Behavior</p> <ul> <li>Uses fuzzy matching (icontains) by default</li> <li>Multiple search fields have OR relationship </li> </ul> </li> </ol>"},{"location":"en/components/table_field/","title":"TableField Component","text":"<p>TableField is the core component for configuring table columns, supporting various display types, related queries, and formatting features.</p> <p>Example:</p> <pre><code>TableField(\n    \"Trademark_mark_name\",  # Use ModelName_fieldName format\n    label=\"Trademark\",\n    display_type=DisplayType.TEXT,\n    related_model=Trademark,  # Related Tortoise-ORM model class\n    related_key=\"trademark_id\",  # Foreign key field name\n    sortable=True\n)\n</code></pre>"},{"location":"en/components/table_field/#basic-parameters","title":"Basic Parameters","text":"<ul> <li> <p><code>name</code>: Field name</p> <ul> <li>Type: <code>str</code></li> <li>Description: Corresponds to model field name, use double underscore syntax for related fields</li> </ul> </li> <li> <p><code>label</code>: Display label</p> <ul> <li>Type: <code>str</code></li> <li>Description: Column header text shown in the table</li> </ul> </li> <li> <p><code>display_type</code>: Display type</p> <ul> <li>Type: <code>DisplayType</code></li> <li>Available values:<ul> <li><code>TEXT</code>: Text type</li> <li><code>DATETIME</code>: Date and time type</li> <li><code>LINK</code>: Link type</li> <li><code>SWITCH</code>: Switch type</li> <li><code>IMAGE</code>: Image type</li> <li><code>SELECT</code>: Select type</li> </ul> </li> <li>Description: Determines how the field is displayed in the table</li> </ul> </li> <li> <p><code>sortable</code>: Sortable</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>False</code></li> <li>Description: Whether to allow sorting by clicking the column header</li> </ul> </li> <li> <p><code>editable</code>: Editable</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>False</code></li> <li>Description: Whether to allow direct editing in the table</li> </ul> </li> <li> <p><code>hidden</code>: Hidden</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>False</code></li> <li>Description: Whether to hide this column in the table</li> </ul> </li> </ul>"},{"location":"en/components/table_field/#related-field-configuration","title":"Related Field Configuration","text":"<p>For configuring the display of related model fields:</p> <ul> <li> <p><code>related_model</code>: Related model</p> <ul> <li>Type: <code>Type[Model]</code></li> <li>Description: The related Tortoise ORM model class</li> </ul> </li> <li> <p><code>related_key</code>: Related key</p> <ul> <li>Type: <code>str</code></li> <li>Description: Foreign key field name in the current model</li> </ul> </li> </ul>"},{"location":"en/components/table_field/#formatting-configuration","title":"Formatting Configuration","text":""},{"location":"en/components/table_field/#formatter-function","title":"formatter Function","text":"<p>For customizing field display format: can pass HTML or format database return values</p> <pre><code>TableField(\n    \"create_mail_date\",\n    label=\"Created At\",\n    display_type=DisplayType.DATETIME,\n    formatter=lambda x: x.strftime('%Y-%m-%d') if x else ''\n)\nTableField(\n    \"document_link\", \n    label=\"Document Link\", \n    display_type=DisplayType.LINK,\n    sortable=True,\n    formatter=lambda x: f'&lt;a href=\"{x}\" target=\"_blank\"&gt;View File&lt;/a&gt;' if x else ''\n)\n</code></pre>"},{"location":"en/components/table_field/#switch-component-configuration","title":"Switch Component Configuration","text":"<p>For displaying boolean fields as switches:</p> <ul> <li> <p><code>labels</code>: Display text configuration</p> <ul> <li>Type: <code>Dict[bool, str]</code></li> <li>Description: Define text display for different switch states</li> </ul> </li> <li> <p><code>choices</code>: Value mapping configuration</p> <ul> <li>Type: <code>Dict[bool, Any]</code></li> <li>Description: Define actual values corresponding to switch states</li> </ul> </li> </ul> <p>Example:</p> <pre><code>TableField(\n    \"is_active\",\n    label=\"Status\",\n    display_type=DisplayType.SWITCH,\n    editable=True,\n    labels={True: \"Active\", False: \"Inactive\"},\n    choices={True: True, False: False}\n)\n</code></pre>"},{"location":"en/components/table_field/#complete-example","title":"Complete Example","text":"<pre><code>table_fields = [\n    # Primary key field (usually hidden)\n    TableField(\n        \"id\", \n        label=\"ID\", \n        display_type=DisplayType.TEXT, \n        editable=True, \n        hidden=True\n    ),\n\n    # Related field\n    TableField(\n        \"Trademark_mark_name\",\n        label=\"Trademark\",\n        related_model=Trademark,\n        related_key=\"trademark_id\",\n        sortable=True\n    ),\n\n    # Regular text field\n    TableField(\n        \"description\", \n        label=\"Description\", \n        display_type=DisplayType.TEXT, \n        sortable=True, \n        formatter=lambda x: x\n    ),\n\n    # DateTime field\n    TableField(\n        \"created_at\", \n        label=\"Created At\", \n        display_type=DisplayType.DATETIME, \n        sortable=True, \n        formatter=lambda x: x.strftime('%Y-%m-%d') if x else ''\n    ),\n\n    # Link field\n    TableField(\n        \"document_link\", \n        label=\"Document Link\", \n        display_type=DisplayType.LINK,\n        sortable=True,\n        formatter=lambda x: f'&lt;a href=\"{x}\" target=\"_blank\"&gt;View File&lt;/a&gt;' if x else ''\n    ),\n\n    # Switch field\n    TableField(\n        \"is_active\", \n        label=\"Status\",\n        display_type=DisplayType.SWITCH,\n        editable=True,\n        labels={True: \"Active\", False: \"Inactive\"},\n        choices={True: True, False: False}\n    )\n]\n</code></pre>"},{"location":"en/guide/package/","title":"Packaging and Publishing Guide","text":""},{"location":"en/guide/package/#project-structure-preparation","title":"Project Structure Preparation","text":"<ol> <li>Ensure correct project structure:</li> </ol> <pre><code>robyn_admin/\n\u251c\u2500\u2500 robyn_admin/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <ol> <li>Create setup.py file:</li> </ol> <pre><code>from setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name=\"robyn_admin\",\n    version=\"0.1.0\",\n    author=\"Your Name\",\n    author_email=\"your.email@example.com\",\n    description=\"A modern admin interface for Robyn framework\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/yourusername/robyn_admin\",\n    packages=find_packages(),\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    python_requires=\"&gt;=3.7\",\n    install_requires=[\n        \"robyn&gt;=0.1.0\",\n        \"tortoise-orm&gt;=0.19.0\",\n        # other dependencies...\n    ],\n    include_package_data=True,  # Include non-Python files\n    package_data={\n        'robyn_admin': [\n            'static/*',\n            'templates/*',\n            'i18n/*'\n        ],\n    },\n)\n</code></pre>"},{"location":"en/guide/package/#packaging-steps","title":"Packaging Steps","text":"<ol> <li>Install packaging tools:</li> </ol> <pre><code>pip install build twine\n</code></pre> <ol> <li>Build distribution packages:</li> </ol> <pre><code>python -m build\n</code></pre> <p>This will create two files in the <code>dist/</code> directory: - <code>robyn_admin-0.1.0.tar.gz</code> (source distribution) - <code>robyn_admin-0.1.0-py3-none-any.whl</code> (built distribution)</p>"},{"location":"en/guide/package/#test-installation","title":"Test Installation","text":"<ol> <li>Create virtual environment for testing:</li> </ol> <pre><code>python -m venv test_env\nsource test_env/bin/activate  # Linux/Mac\n# or\ntest_env\\Scripts\\activate  # Windows\n</code></pre> <ol> <li>Test local installation:</li> </ol> <pre><code>pip install dist/robyn_admin-0.1.0-py3-none-any.whl\n</code></pre>"},{"location":"en/guide/package/#publishing-to-pypi","title":"Publishing to PyPI","text":"<ol> <li>Register PyPI account:</li> <li>Visit https://pypi.org to register</li> <li> <p>Create API token</p> </li> <li> <p>Configure authentication:</p> </li> </ol> <pre><code># Create or edit ~/.pypirc\n[pypi]\nusername = __token__\npassword = your-token\n</code></pre> <ol> <li>Upload to PyPI:</li> </ol> <pre><code>python -m twine upload dist/*\n</code></pre> <ol> <li>Upload to Test PyPI (optional):</li> </ol> <pre><code>python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*\n</code></pre>"},{"location":"en/guide/package/#version-updates","title":"Version Updates","text":"<ol> <li> <p>Update version number in setup.py</p> </li> <li> <p>Rebuild and upload:</p> </li> </ol> <pre><code>python -m build\npython -m twine upload dist/*\n</code></pre>"},{"location":"en/guide/package/#important-notes","title":"Important Notes","text":"<ol> <li>Version Management</li> <li>Follow semantic versioning</li> <li> <p>Update version number before each release</p> </li> <li> <p>File Inclusion</p> </li> <li>Ensure MANIFEST.in includes all necessary non-Python files</li> <li> <p>Check package_data configuration</p> </li> <li> <p>Dependency Management</p> </li> <li>Specify required dependencies in install_requires</li> <li> <p>Use appropriate version ranges</p> </li> <li> <p>Documentation</p> </li> <li>Include clear installation and usage instructions in README.md</li> <li> <p>Include necessary license information</p> </li> <li> <p>Security</p> </li> <li>Don't include sensitive information in code</li> <li>Use .gitignore to exclude unnecessary files </li> </ol>"},{"location":"en/hooks/add_hook/","title":"Add Hook Function","text":""},{"location":"en/hooks/add_hook/#overview","title":"Overview","text":"<p>The add hook function allows you to customize the add operation logic in your model admin class. By overriding the <code>handle_add</code> method, you can:</p> <ul> <li>Add custom business logic before and after saving</li> <li>Modify data before saving</li> <li>Set additional fields</li> <li>Implement custom validation logic</li> </ul>"},{"location":"en/hooks/add_hook/#basic-usage","title":"Basic Usage","text":"<p>Override the <code>handle_add</code> method in your model admin class:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_add(self, request: Request, data: dict) -&gt; tuple[bool, str]:\n        \"\"\"\n        Handle add operation hook method\n        Args:\n            request: Request object\n            data: Data to be added\n        Returns:\n            tuple[bool, str]: (success status, message)\n        \"\"\"\n        try:\n            # Process form data\n            processed_data = await self.process_form_data(data)\n\n            # You can add custom logic here\n            # Example: Add creation time\n            processed_data['created_at'] = datetime.now()\n\n            # Create object\n            obj = await self.model.create(**processed_data)\n\n            # You can perform other operations here, such as:\n            # - Record operation logs\n            # - Send notifications\n            # - Trigger other business processes\n\n            return True, \"Create successful\"\n\n        except Exception as e:\n            print(f\"Add processing error: {str(e)}\")\n            return False, f\"Create failed: {str(e)}\"\n</code></pre>"},{"location":"en/hooks/add_hook/#parameter-description","title":"Parameter Description","text":"<ul> <li><code>request</code>: Robyn's Request object, containing all information about the current request</li> <li><code>data</code>: Dictionary containing data to be added, where keys are field names and values are field values</li> </ul>"},{"location":"en/hooks/add_hook/#return-value","title":"Return Value","text":"<p>The method should return a tuple containing:</p> <ul> <li><code>bool</code>: Indicates whether the operation was successful</li> <li><code>str</code>: Operation result message </li> </ul>"},{"location":"en/hooks/batch_delete_hook/","title":"Batch Delete Hook Function","text":""},{"location":"en/hooks/batch_delete_hook/#overview","title":"Overview","text":"<p>The batch delete hook function allows you to customize the batch delete operation logic in your model admin class. By overriding the <code>handle_batch_delete</code> method, you can:</p> <ul> <li>Implement batch soft delete</li> <li>Add pre-delete validation</li> <li>Handle related data in batch</li> <li>Record batch deletion logs</li> </ul>"},{"location":"en/hooks/batch_delete_hook/#basic-usage","title":"Basic Usage","text":"<p>Override the <code>handle_batch_delete</code> method in your model admin class:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_batch_delete(self, request: Request, ids: list) -&gt; tuple[bool, str, int]:\n        \"\"\"\n        Handle batch delete operation hook method\n        Args:\n            request: Request object\n            ids: List of record IDs to delete\n        Returns:\n            tuple[bool, str, int]: (success status, message, deleted count)\n        \"\"\"\n        try:\n            deleted_count = 0\n            for id in ids:\n                try:\n                    obj = await self.get_object(id)\n                    if obj:\n                        # You can add custom logic here\n                        # Example: Soft delete\n                        obj.is_deleted = True\n                        await obj.save()\n\n                        # Or perform physical deletion\n                        # await obj.delete()\n\n                        # You can perform other operations here, such as:\n                        # - Check related data\n                        # - Record deletion logs\n                        # - Send notifications\n\n                        deleted_count += 1\n                except Exception as e:\n                    print(f\"Failed to delete record {id}: {str(e)}\")\n                    continue\n\n            if deleted_count &gt; 0:\n                return True, f\"Successfully deleted {deleted_count} records\", deleted_count\n            return False, \"No records were deleted\", 0\n\n        except Exception as e:\n            print(f\"Batch delete processing error: {str(e)}\")\n            return False, f\"Batch delete failed: {str(e)}\", 0\n</code></pre>"},{"location":"en/hooks/batch_delete_hook/#parameter-description","title":"Parameter Description","text":"<ul> <li><code>request</code>: Robyn's Request object, containing all information about the current request</li> <li><code>ids</code>: List of record IDs to be deleted</li> </ul>"},{"location":"en/hooks/batch_delete_hook/#return-value","title":"Return Value","text":"<p>The method should return a tuple containing:</p> <ul> <li><code>bool</code>: Indicates whether the operation was successful</li> <li><code>str</code>: Operation result message</li> <li><code>int</code>: Number of successfully deleted records </li> </ul>"},{"location":"en/hooks/delete_hook/","title":"Delete Hook Function","text":""},{"location":"en/hooks/delete_hook/#overview","title":"Overview","text":"<p>The delete hook function allows you to customize the delete operation logic in your model admin class. By overriding the <code>handle_delete</code> method, you can:</p> <ul> <li>Implement soft delete</li> <li>Add pre-delete validation</li> <li>Handle related data</li> <li>Record deletion logs</li> </ul>"},{"location":"en/hooks/delete_hook/#basic-usage","title":"Basic Usage","text":"<p>Override the <code>handle_delete</code> method in your model admin class:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_delete(self, request: Request, object_id: str) -&gt; tuple[bool, str]:\n        \"\"\"\n        Handle delete operation hook method\n        Args:\n            request: Request object\n            object_id: Record ID\n        Returns:\n            tuple[bool, str]: (success status, message)\n        \"\"\"\n        try:\n            obj = await self.get_object(object_id)\n            if not obj:\n                return False, \"Record not found\"\n\n            # You can add custom logic here\n            # Example: Soft delete\n            obj.is_deleted = True\n            await obj.save()\n\n            # Or perform physical deletion\n            # await obj.delete()\n\n            # You can perform other operations here, such as:\n            # - Check related data\n            # - Record deletion logs\n            # - Send notifications\n\n            return True, \"Delete successful\"\n\n        except Exception as e:\n            print(f\"Delete processing error: {str(e)}\")\n            return False, f\"Delete failed: {str(e)}\"\n</code></pre>"},{"location":"en/hooks/delete_hook/#parameter-description","title":"Parameter Description","text":"<ul> <li><code>request</code>: Robyn's Request object, containing all information about the current request</li> <li><code>object_id</code>: ID of the record to be deleted</li> </ul>"},{"location":"en/hooks/delete_hook/#return-value","title":"Return Value","text":"<p>The method should return a tuple containing:</p> <ul> <li><code>bool</code>: Indicates whether the operation was successful</li> <li><code>str</code>: Operation result message </li> </ul>"},{"location":"en/hooks/edit_hook/","title":"Edit Hook Function","text":""},{"location":"en/hooks/edit_hook/#overview","title":"Overview","text":"<p>The edit hook function allows you to customize the edit operation logic in your model admin class. By overriding the <code>handle_edit</code> method, you can:</p> <ul> <li>Add custom business logic before and after saving</li> <li>Modify data before saving</li> <li>Update additional fields</li> <li>Implement custom validation logic</li> </ul>"},{"location":"en/hooks/edit_hook/#basic-usage","title":"Basic Usage","text":"<p>Override the <code>handle_edit</code> method in your model admin class:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_edit(self, request: Request,\n                 object_id: str, data: dict) -&gt; tuple[bool, str]:\n    \"\"\"\n    Handle edit operation hook method\n    Args:\n        request: Request object\n        object_id: Record ID\n        data: Edit data\n    Returns:\n        tuple[bool, str]: (success status, message)\n    \"\"\"\n        try:\n            # Get original object\n            obj = await self.get_object(object_id)\n            if not obj:\n                return False, \"Record not found\"\n            # Process form data using process_form_data method\n            processed_data = await self.process_form_data(data)\n            # Update object\n            for field, value in processed_data.items():\n                setattr(obj, field, value)\n            # You can do other processing here, like writing logs or setting other database field values\n            # Example: setattr(obj, \"finish_time\", datetime.now())\n            await obj.save()\n            return True, \"Update successful\"\n        except Exception as e:\n            print(f\"Edit processing error: {str(e)}\")\n            return False, f\"Update failed: {str(e)}\"\n</code></pre>"},{"location":"en/hooks/edit_hook/#parameter-description","title":"Parameter Description","text":"<ul> <li><code>request</code>: Robyn's Request object, containing all information about the current request</li> <li><code>object_id</code>: ID of the record to be edited</li> <li><code>data</code>: Dictionary containing edit data, where keys are field names and values are field values</li> </ul>"},{"location":"en/hooks/edit_hook/#return-value","title":"Return Value","text":"<p>The method should return a tuple containing:</p> <ul> <li><code>bool</code>: Indicates whether the operation was successful</li> <li><code>str</code>: Operation result message </li> </ul>"},{"location":"en/hooks/query_hook/","title":"Query Hook Function","text":""},{"location":"en/hooks/query_hook/#overview","title":"Overview","text":"<p>The query hook function allows you to customize the data query logic in your model admin class. By overriding the <code>handle_query</code> method, you can:</p> <ul> <li>Customize query conditions</li> <li>Add data filtering</li> <li>Customize sorting logic</li> <li>Implement data permission control</li> </ul>"},{"location":"en/hooks/query_hook/#basic-usage","title":"Basic Usage","text":"<p>Override the <code>handle_query</code> method in your model admin class:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_query(self, request: Request, params: dict) -&gt; tuple[QuerySet, int]:\n        \"\"\"\n        Handle data query hook method\n        Args:\n            request: Request object\n            params: Query parameter dictionary, containing:\n                - limit: Records per page\n                - offset: Offset\n                - search: Search keyword\n                - sort: Sort field\n                - order: Sort order (asc/desc)\n                - Other filter parameters\n        Returns:\n            tuple[QuerySet, int]: (Query result set, Total count)\n        \"\"\"\n        try:\n            # Get base queryset\n            queryset = await self.get_queryset(request, params)\n\n            # You can add custom logic here\n            # Example: Data permission control\n            if not request.user.is_superuser:\n                queryset = queryset.filter(owner=request.user)\n\n            # Custom filter conditions\n            if params.get('status'):\n                queryset = queryset.filter(status=params['status'])\n\n            # Handle sorting\n            if params.get('sort'):\n                order_by = f\"{'-' if params['order'] == 'desc' else ''}{params['sort']}\"\n                queryset = queryset.order_by(order_by)\n            elif self.default_ordering:\n                queryset = queryset.order_by(*self.default_ordering)\n\n            # Get total count\n            total = await queryset.count()\n\n            # Pagination\n            queryset = queryset.offset(params['offset']).limit(params['limit'])\n\n            return queryset, total\n\n        except Exception as e:\n            print(f\"Query processing error: {str(e)}\")\n            return self.model.all(), 0\n</code></pre>"},{"location":"en/hooks/query_hook/#parameter-description","title":"Parameter Description","text":"<ul> <li><code>request</code>: Robyn's Request object, containing all information about the current request</li> <li><code>params</code>: Query parameter dictionary, containing pagination, sorting, search parameters</li> </ul>"},{"location":"en/hooks/query_hook/#return-value","title":"Return Value","text":"<p>The method should return a tuple containing:</p> <ul> <li><code>QuerySet</code>: Query result set</li> <li><code>int</code>: Total record count </li> </ul>"},{"location":"zh/","title":"QC Robyn Admin","text":"<p>QC Robyn Admin \u662f\u4e00\u4e2a\u57fa\u4e8e Robyn \u4e0e bootstrap \u642d\u5efa\u7684\u6846\u67b6\u7684\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\uff0c\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u7ec4\u4ef6\u548c\u529f\u80fd\uff0c\u5e2e\u52a9\u5feb\u901f\u6784\u5efa\u7ba1\u7406\u540e\u53f0\u3002</p>"},{"location":"zh/#_1","title":"\u4e3b\u8981\u7279\u6027","text":"<ul> <li>\ud83d\ude80 \u5feb\u901f\u6784\u5efa\uff1a\u901a\u8fc7\u7b80\u5355\u7684\u914d\u7f6e\u5373\u53ef\u751f\u6210\u5b8c\u6574\u7684\u540e\u53f0\u7ba1\u7406\u754c\u9762</li> <li>\ud83d\udcca \u8868\u683c\u7ec4\u4ef6\uff1a\u652f\u6301\u6392\u5e8f\u3001\u8fc7\u6ee4\u3001\u641c\u7d22\u3001\u81ea\u5b9a\u4e49\u683c\u5f0f\u5316\u7b49\u529f\u80fd</li> <li>\ud83d\udcdd \u8868\u5355\u7ec4\u4ef6\uff1a\u652f\u6301\u591a\u79cd\u8868\u5355\u5b57\u6bb5\u7c7b\u578b\uff0c\u5305\u62ec\u6587\u672c\u3001\u65e5\u671f\u3001\u9009\u62e9\u5668\u7b49</li> <li>\ud83d\udd0d \u641c\u7d22\u8fc7\u6ee4\uff1a\u652f\u6301\u590d\u6742\u7684\u641c\u7d22\u548c\u8fc7\u6ee4\u6761\u4ef6</li> <li>\ud83d\udd17 \u5173\u8054\u5b57\u6bb5\uff1a\u652f\u6301\u5904\u7406\u6a21\u578b\u95f4\u7684\u5173\u8054\u5173\u7cfb</li> <li>\ud83d\udd12 \u6743\u9650\u63a7\u5236\uff1a\u7ec6\u7c92\u5ea6\u7684\u6743\u9650\u7ba1\u7406\u7cfb\u7edf</li> <li>\ud83d\udcdd \u94a9\u5b50\u51fd\u6570\uff1a\u652f\u6301\u81ea\u5b9a\u4e49\u4e3a\u540e\u53f0\u64cd\u4f5c\u6dfb\u52a0\u94a9\u5b50\u51fd\u6570</li> </ul>"},{"location":"zh/#_2","title":"\u5b89\u88c5","text":"<pre><code>pip install qc-robyn-admin\n</code></pre>"},{"location":"zh/#_3","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u5feb\u901f\u5f00\u59cb</p>"},{"location":"zh/#_4","title":"\u63a5\u4e0b\u6765\u9700\u8981\u505a\u7684","text":"<ul> <li>\u590d\u6742\u5173\u8054\u6a21\u578b\u7f16\u8f91\u4ee5\u53ca\u67e5\u8be2\u7684\u652f\u6301</li> <li>\u7279\u6b8a\u7ec4\u4ef6\u7684\u652f\u6301</li> </ul>"},{"location":"zh/quickstart/","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/quickstart/#_2","title":"\u6848\u4f8b\uff1a \u67d0\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf","text":"<p>\u901a\u8fc7tortoise-orm \u521b\u5efa\u76f8\u5173\u7684\u6a21\u578b\uff1a </p> <p>testdemo/table.py</p> <pre><code>from tortoise import fields, models\n\nclass Author(models.Model):\n    \"\"\"\u4f5c\u8005\u6a21\u578b\"\"\"\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=100, description=\"\u4f5c\u8005\u59d3\u540d\")\n    avatar = fields.CharField(max_length=255, null=True, description=\"\u4f5c\u8005\u5934\u50cf\u8def\u5f84\")\n    biography = fields.TextField(null=True, description=\"\u4f5c\u8005\u7b80\u4ecb\")\n    email = fields.CharField(max_length=100, null=True, description=\"\u4f5c\u8005\u90ae\u7bb1\")\n    created_at = fields.DatetimeField(auto_now_add=True)\n    updated_at = fields.DatetimeField(auto_now=True)\n\n    class Meta:\n        table = \"authors\"\n\nclass Publisher(models.Model):\n    \"\"\"\u51fa\u7248\u793e\u6a21\u578b\"\"\"\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=100, description=\"\u51fa\u7248\u793e\u540d\u79f0\")\n    address = fields.CharField(max_length=255, null=True, description=\"\u51fa\u7248\u793e\u5730\u5740\")\n    website = fields.CharField(max_length=255, null=True, description=\"\u51fa\u7248\u793e\u7f51\u7ad9\")\n    created_at = fields.DatetimeField(auto_now_add=True)\n\n    class Meta:\n        table = \"publishers\"\n\nclass Category(models.Model):\n    \"\"\"\u56fe\u4e66\u5206\u7c7b\u6a21\u578b\"\"\"\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=50, description=\"\u5206\u7c7b\u540d\u79f0\")\n    parent = fields.ForeignKeyField(\n        'models.Category', \n        related_name='children', \n        null=True, \n        description=\"\u7236\u5206\u7c7b\"\n    )\n    created_at = fields.DatetimeField(auto_now_add=True)\n\n    class Meta:\n        table = \"categories\"\n\nclass Book(models.Model):\n    \"\"\"\u56fe\u4e66\u6a21\u578b\"\"\"\n    id = fields.IntField(pk=True)\n    title = fields.CharField(max_length=200, description=\"\u4e66\u540d\")\n    isbn = fields.CharField(max_length=13, unique=True, description=\"ISBN\u53f7\")\n    cover_image = fields.CharField(max_length=255, null=True, description=\"\u5c01\u9762\u56fe\u7247\u8def\u5f84\")\n    description = fields.TextField(description=\"\u56fe\u4e66\u63cf\u8ff0\", null=True)\n    content = fields.TextField(description=\"\u56fe\u4e66\u5185\u5bb9\u6458\u8981\", null=True)\n    price = fields.DecimalField(max_digits=10, decimal_places=2, description=\"\u4ef7\u683c\")\n    publication_date = fields.DateField(description=\"\u51fa\u7248\u65e5\u671f\")\n\n    # \u5173\u8054\u5b57\u6bb5\n    publisher = fields.ForeignKeyField(\n        'models.Publisher', \n        related_name='books',\n        description=\"\u51fa\u7248\u793e\"\n    )\n    authors = fields.ManyToManyField(\n        'models.Author',\n        related_name='books',\n        through='book_authors',\n        description=\"\u4f5c\u8005\"\n    )\n    category = fields.ForeignKeyField(\n        'models.Category',\n        related_name='books',\n        description=\"\u5206\u7c7b\"\n    )\n\n    created_at = fields.DatetimeField(auto_now_add=True)\n    updated_at = fields.DatetimeField(auto_now=True)\n\n    class Meta:\n        table = \"books\"\n\nclass BookReview(models.Model):\n    \"\"\"\u56fe\u4e66\u8bc4\u8bba\u6a21\u578b\"\"\"\n    id = fields.IntField(pk=True)\n    book = fields.ForeignKeyField(\n        'models.Book',\n        related_name='reviews',\n        description=\"\u8bc4\u8bba\u7684\u56fe\u4e66\"\n    )\n    reviewer_name = fields.CharField(max_length=100, description=\"\u8bc4\u8bba\u8005\u59d3\u540d\")\n    rating = fields.IntField(description=\"\u8bc4\u5206(1-5)\")\n    review_text = fields.TextField(description=\"\u8bc4\u8bba\u5185\u5bb9\")\n    created_at = fields.DatetimeField(auto_now_add=True)\n\n    class Meta:\n        table = \"book_reviews\"\n\nclass BookInventory(models.Model):\n    \"\"\"\u56fe\u4e66\u5e93\u5b58\u6a21\u578b - \u4e0e\u56fe\u4e66\u4e00\u5bf9\u4e00\u5173\u7cfb\"\"\"\n    id = fields.IntField(pk=True)\n    book = fields.OneToOneField(\n        'models.Book',\n        related_name='inventory',\n        description=\"\u5173\u8054\u7684\u56fe\u4e66\"\n    )\n    quantity = fields.IntField(description=\"\u5e93\u5b58\u6570\u91cf\")\n    location = fields.CharField(max_length=100, description=\"\u5b58\u653e\u4f4d\u7f6e\")\n    last_check_date = fields.DatetimeField(description=\"\u6700\u65b0\u76d8\u70b9\u65e5\u671f\")\n\n    class Meta:\n        table = \"book_inventories\"\n</code></pre> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u7f16\u5199\u6570\u636e\u521d\u59cb\u5316\u7684\u7a0b\u5e8f\uff1a</p> <p>testdemo/init_data.py</p> <pre><code>from faker import Faker\nfrom datetime import datetime, timedelta\nimport random\nfrom decimal import Decimal\nfrom tortoise import Tortoise\nfrom .table import Author, Publisher, Category, Book, BookReview, BookInventory\n\nfake = Faker(['zh_CN'])  # \u4f7f\u7528\u4e2d\u6587\u6570\u636e\n\nasync def generate_test_data():\n    # \u751f\u6210\u4f5c\u8005\u6570\u636e\n    authors = []\n    for _ in range(20):\n        author = await Author.create(\n            name=fake.name(),\n            avatar=f\"/static/avatars/{fake.uuid4()}.jpg\",\n            biography=fake.text(max_nb_chars=500),\n            email=fake.email()\n        )\n        authors.append(author)\n\n    # \u751f\u6210\u51fa\u7248\u793e\u6570\u636e\n    publishers = []\n    for _ in range(10):\n        publisher = await Publisher.create(\n            name=fake.company() + \"\u51fa\u7248\u793e\",\n            address=fake.address(),\n            website=fake.url()\n        )\n        publishers.append(publisher)\n\n    # \u751f\u6210\u5206\u7c7b\u6570\u636e\n    main_categories = [\"\u6587\u5b66\", \"\u79d1\u6280\", \"\u6559\u80b2\", \"\u827a\u672f\", \"\u5386\u53f2\", \"\u7ecf\u6d4e\", \"\u54f2\u5b66\", \"\u8ba1\u7b97\u673a\"]\n    categories = []\n\n    # \u521b\u5efa\u4e3b\u5206\u7c7b\n    for cat_name in main_categories:\n        category = await Category.create(name=cat_name)\n        categories.append(category)\n\n        # \u4e3a\u6bcf\u4e2a\u4e3b\u5206\u7c7b\u521b\u5efa2-3\u4e2a\u5b50\u5206\u7c7b\n        for _ in range(random.randint(2, 3)):\n            sub_category = await Category.create(\n                name=f\"{cat_name}-{fake.word()}\",\n                parent=category\n            )\n            categories.append(sub_category)\n\n    # \u751f\u6210\u56fe\u4e66\u6570\u636e\n    books = []\n    for _ in range(100):\n        book = await Book.create(\n            title=fake.sentence(nb_words=4)[:-1],  # \u53bb\u6389\u53e5\u53f7\n            isbn=str(fake.random_number(digits=13, fix_len=True)),\n            cover_image=f\"/static/covers/{fake.uuid4()}.jpg\",\n            description=fake.text(max_nb_chars=200),\n            content=fake.text(max_nb_chars=1000),\n            price=Decimal(str(random.uniform(20.0, 199.9))).quantize(Decimal('0.00')),\n            publication_date=fake.date_between(start_date='-5y', end_date='today'),\n            publisher=random.choice(publishers),\n            category=random.choice(categories)\n        )\n\n        # \u4e3a\u6bcf\u672c\u4e66\u6dfb\u52a01-3\u4e2a\u4f5c\u8005\n        for author in random.sample(authors, random.randint(1, 3)):\n            await book.authors.add(author)\n\n        books.append(book)\n\n    # \u751f\u6210\u56fe\u4e66\u8bc4\u8bba\u6570\u636e\n    for book in books:\n        # \u4e3a\u6bcf\u672c\u4e66\u751f\u62100-5\u6761\u8bc4\u8bba\n        for _ in range(random.randint(0, 5)):\n            await BookReview.create(\n                book=book,\n                reviewer_name=fake.name(),\n                rating=random.randint(1, 5),\n                review_text=fake.text(max_nb_chars=200)\n            )\n\n    # \u751f\u6210\u56fe\u4e66\u5e93\u5b58\u6570\u636e\n    for book in books:\n        await BookInventory.create(\n            book=book,\n            quantity=random.randint(0, 100),\n            location=f\"{random.choice('ABCDEF')}-{random.randint(1,20)}-{random.randint(1,10)}\",\n            last_check_date=datetime.now() - timedelta(days=random.randint(0, 30))\n        )\n\n    print(\"\u6d4b\u8bd5\u6570\u636e\u751f\u6210\u5b8c\u6210\uff01\") \n</code></pre> <p>\u6211\u4eec\u8fdb\u884c\u6570\u636e\u7684\u521d\u59cb\u5316\uff0c\u5e76\u521d\u59cb\u5316AdminSite\u7b49\u914d\u7f6e\u4fe1\u606f</p> <p>main.py</p> <pre><code>python\n\nfrom robyn import Robyn, Response, jsonify\nfrom qc_robyn_admin.core import AdminSite, MenuItem\nfrom testdemo.init_data import  generate_test_data\nfrom testdemo.table import Author\nfrom testdemo.admin_site_model import AuthorAdmin\nimport os\n\n\n\n\nif __name__ == \"__main__\":\n    # \u8fd0\u884c\u6570\u636e\u521d\u59cb\u5316 \n    app = Robyn(__file__)\n    # \u670d\u52a1\u76ee\u5f55\n    app.serve_directory(\n    route=\"/static\",\n        directory_path=os.path.join(os.getcwd(), \"static\"),\n    )\n\n    admin_site = AdminSite(\n            app,\n            title=\"QC Robyn Admin\",\n            prefix=\"admin\",\n            copyright=\"\u00a9 2024 Company Name. All rights reserved\",\n            db_url=\"sqlite://db.sqlite3\",\n            modules={\n                \"models\": [\"testdemo.table\", \"qc_robyn_admin.models\"]\n            },\n            default_language=\"en_US\",\n            generate_schemas=True,\n            startup_function=generate_test_data\n        )\n\n    app.start(port=8020)\n</code></pre> <p>\u8fd0\u884c\u5b8c\u6210\u540e\uff0c\u9ed8\u8ba4\u521b\u5efa\u7528\u6237\u4e3aadmin/admin, \u767b\u9646\u540e\u5373\u53ef\u770b\u5230\u7ba1\u7406\u9875\u9762</p> <p></p> <p></p>"},{"location":"zh/quickstart/#_3","title":"\u521b\u5efa\u540e\u53f0\u6a21\u578b\u7c7b","text":"<p>\u9996\u5148\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u83dc\u5355\u680f\u9009\u9879\uff1a\u5e76\u4e14\u9884\u8bbe\u597dAuthorAdmin\u4f5c\u4e3a\u540e\u53f0\u6a21\u578b\u7ba1\u7406\u7c7b</p> <p>testdemo/main.py</p> <pre><code>...\nif __name__ == \"__main__\":\n    # \u8fd0\u884c\u6570\u636e\u521d\u59cb\u5316 \n    app = Robyn(__file__)\n    # \u670d\u52a1\u76ee\u5f55\n    app.serve_directory(\n    route=\"/static\",\n        directory_path=os.path.join(os.getcwd(), \"static\"),\n    )\n\n    admin_site = AdminSite(\n            app,\n            title=\"QC Robyn Admin\",\n            prefix=\"admin\",\n            copyright=\"\u00a9 2024 Company Name. All rights reserved\",\n            db_url=\"sqlite://db.sqlite3\",\n            modules={\n                \"models\": [\"testdemo.table\", \"qc_robyn_admin.models\"]\n            },\n            default_language=\"en_US\",\n            generate_schemas=True\n        )\n\n    admin_site.register_menu(MenuItem(\n        name=\"\u540e\u53f0\u7ba1\u7406\",\n        icon=\"bi bi-gear\",\n        order=1\n    ))\n    admin_site.register_model(Author, AuthorAdmin)\n\n    async def register_tortoise():\n        await tortoise_init(\n            db_url=\"sqlite://db.sqlite3\",\n            modules={'models': ['testdemo.table']},\n            startu_up_function=init_data\n        )\n\n    app.startup_handler(register_tortoise)\n\n    app.start(port=8020)\n</code></pre> <p>\u6211\u4eec\u6765\u4e3atortoise\u6a21\u578b\u521b\u5efa\u67d0\u53f0\u7ba1\u7406\u9875\u9762\uff0c\u4ee5Author\u4e3a\u4f8b, \u521b\u5efaAuthorAdmin\u540e\u53f0\u6a21\u578b\u7ba1\u7406\u7c7b, \u5e76\u5b9a\u4e49\u76f8\u5173\u914d\u7f6e</p> <p>testdemo/admin_site_model.py</p> <pre><code>python\n\nfrom qc_robyn_admin.core import (ModelAdmin,  TableField, DisplayType, FormField,\n                                 SearchField, InputFilter, DateRangeFilter\n                                 )\nfrom .table import Author, Publisher, Category, Book, BookReview, BookInventory\n\n# \u83b7\u53d6\u524d\u4e00\u767e\u4e2a\u5b57\u7b26\ndef get_biography(self, value):\n    return value[:100]\n\n# \u4f5c\u8005\u7ba1\u7406\nclass AuthorAdmin(ModelAdmin):\n    # \u663e\u793a\u540d\u79f0\n    verbose_name = \"\u4f5c\u8005\u7ba1\u7406\u9875\u9762\"\n\n    # \u83dc\u5355\u914d\u7f6e\n    menu_group = \"\u540e\u53f0\u7ba1\u7406\"    # \u6240\u5c5e\u83dc\u5355\u7ec4\n    menu_icon = \"bi bi-people\" # Bootstrap \u56fe\u6807\n    menu_order = 1            # \u83dc\u5355\u6392\u5e8f\n\n    # \u529f\u80fd\u5f00\u5173\n    enable_edit = True       # \u5141\u8bb8\u7f16\u8f91\n    allow_add = True        # \u5141\u8bb8\u6dfb\u52a0\n    allow_delete = True     # \u5141\u8bb8\u5220\u9664\n    allow_export = True     # \u5141\u8bb8\u5bfc\u51fa\n    allow_import = True    # \u5141\u8bb8\u5bfc\u5165\n\n\n    # \u7f16\u8f91\u8868\u5355\u6807\u9898\n    edit_form_title = \"\u7f16\u8f91\u4f5c\u8005\u8868\u5355\"\n    add_form_title = \"\u6dfb\u52a0\u4f5c\u8005\u8868\u5355\"\n\n    # \u8868\u683c\u5b57\u6bb5\u914d\u7f6e\n    table_fields = [\n        # need to insert pk field to\n        TableField(\n            name=\"id\", label=\"ID\", display_type=DisplayType.TEXT, editable=False, hidden=True\n        ),\n        TableField(\n            \"name\", label=\"\u4f5c\u8005\u540d\u79f0\", display_type=DisplayType.TEXT, sortable=True, formatter=lambda x: str(x)\n        ),\n        TableField(\n            \"avatar\", label=\"\u5934\u50cf\", display_type=DisplayType.IMAGE, \n            sortable=True, \n            formatter=lambda x:  '&lt;img src={} width=\"100\" height=\"100\"&gt;'.format(x) if x else None\n        ),\n        TableField(\n            'biography', label='\u7b80\u4ecb', display_type=DisplayType.TEXT, \n            sortable=True, formatter=lambda x: str(x)\n        ),\n        TableField(\n            'email', label='\u4f5c\u8005\u90ae\u7bb1', display_type=DisplayType.TEXT, \n            sortable=True, formatter=lambda x: str(x)\n        ),\n        TableField(\n            'created_at', label='\u521b\u5efa\u65e5\u671f', display_type=DisplayType.DATETIME, \n            sortable=True, formatter=lambda x: x.strftime(\"%Y-%m-%d %H:%M:%S\")\n        )\n    ]\n\n\n\n    # \u7f16\u8f91\u8868\u5355\u5b57\u6bb5\n    form_fields = [\n        FormField(\"name\", label=\"\u4f5c\u8005\u540d\u79f0\", required=True),\n        FormField(\"avatar\", label=\"\u5934\u50cf\", field_type=DisplayType.FILE_UPLOAD,\n                  upload_path=\"static/avatars\", accept=\"image/*\", max_size=1024*1024*10)\n    ]\n\n\n\n    # \u6dfb\u52a0\u6570\u636e\u8868\u5355\n    add_form_fields = [\n        FormField(\"name\", label=\"\u4f5c\u8005\u540d\u79f0\", required=True),\n        FormField(\"avatar\", label=\"\u5934\u50cf\", field_type=DisplayType.FILE_UPLOAD,upload_path=\"static/avatars\", accept=\"image/*\", max_size=1024*1024*10),\n        FormField(\n            'biography', label='\u7b80\u4ecb', field_type=DisplayType.TEXT, \n            processor=lambda x: get_biography(x)\n        )\n    ]\n\n    # \u8fc7\u6ee4\u5668\n    filter_fields = [\n        InputFilter(\n            \"email\", label=\"\u90ae\u7bb1\u67e5\u8be2\", \n            placeholder=\"\u8bf7\u8f93\u5165\u90ae\u7bb1\"\n        ),\n        DateRangeFilter(\n            \"created_at\", label=\"\u521b\u5efa\u65e5\u671f\"\n        )\n    ]\n\n    default_ordering = [\"-created_at\"]\n\n    import_fields = [\n        \"name\",\n        \"email\",\n        \"biography\"\n    ]\n</code></pre> <p>\u8fdb\u5165\u540e\u53f0\u540e\u67e5\u770bAuthor\u7ba1\u7406\u9875\u9762\uff1a</p> <p></p>"},{"location":"zh/quickstart/#_4","title":"\u5173\u8054\u67e5\u8be2","text":"<p>\u6211\u4eec\u63a5\u4e0b\u6765\u60f3\u8981\u67e5\u8be2\u6bcf\u672c\u4e66\u7684\u51fa\u7248\u793e\u662f\u54ea\u4e2a\u516c\u53f8\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\u6a21\u578b\u7c7b</p> <pre><code># \u4e66\u672c\nclass BookAdmin(ModelAdmin):\n    # \u663e\u793a\u540d\u79f0\n    verbose_name = \"\u4e66\u7c4d\u67e5\u8be2\u9875\u9762\"\n\n    # \u83dc\u5355\u914d\u7f6e\n    menu_group = \"\u540e\u53f0\u7ba1\u7406\"    # \u6240\u5c5e\u83dc\u5355\u7ec4\n    menu_icon = \"bi bi-people\" # Bootstrap \u56fe\u6807\n    menu_order = 2            # \u83dc\u5355\u6392\u5e8f\n\n    # \u529f\u80fd\u5f00\u5173\n    enable_edit = True       # \u5141\u8bb8\u7f16\u8f91\n    allow_add = True        # \u5141\u8bb8\u6dfb\u52a0\n    allow_delete = True     # \u5141\u8bb8\u5220\u9664\n    allow_export = True     # \u5141\u8bb8\u5bfc\u51fa\n    allow_import = True    # \u5141\u8bb8\u5bfc\u5165\n\n\n\n    # \u8868\u683c\u5b57\u6bb5\u914d\u7f6e\n    table_fields = [\n        # need to insert pk field to\n        TableField(\n            name=\"id\", label=\"ID\", display_type=DisplayType.TEXT, editable=False, hidden=True\n        ),\n        TableField(\n            \"title\", label=\"\u4e66\u540d\", display_type=DisplayType.TEXT, sortable=True, formatter=lambda x: str(x)\n        ),\n        TableField(\n            \"isbn\", label=\"isbn\u53f7\", display_type=DisplayType.IMAGE, \n            sortable=True, \n            formatter=lambda x:  '&lt;a href={}&gt;{}&lt;/a&gt;'.format(x, x) if x else None\n        ),\n        TableField(\n            'description', label='\u56fe\u4e66\u63cf\u8ff0', display_type=DisplayType.TEXT, \n            sortable=True, formatter=lambda x: str(x)\n        ),\n        TableField(\n            'price', label='\u4ef7\u683c', display_type=DisplayType.TEXT, \n            sortable=True, formatter=lambda x: str(x)\n        ),\n        TableField(\n            'Publisher_name', label='\u51fa\u7248\u793e', display_type=DisplayType.TEXT, \n            related_model=Publisher, related_key=\"publisher_id\"\n        )\n    ]\n\n    default_ordering = [\"-created_at\"]\n\n\n    async def get_status_choices(self) -&gt; Dict[str, str]:\n        \"\"\"\u83b7\u53d6\u72b6\u6001\u9009\u9879\"\"\"\n        # \u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6240\u6709\u4e0d\u91cd\u590d\u7684\u72b6\u6001\u503c\n        status_choices = await Publisher.all().values_list('name', flat=True)\n        # \u8f6c\u6362\u4e3a\u9009\u9879\u5b57\u5178\n        return {status: status for status in status_choices if status}\n\n    async def get_filter_fields(self):\n        \"\"\"\u83b7\u53d6\u8fc7\u6ee4\u5b57\u6bb5\u914d\u7f6e\"\"\"\n        # \u52a8\u6001\u83b7\u53d6\u72b6\u6001\u9009\u9879\n        status_choices = await self.get_status_choices()        \n        filters = [\n            # \u52a8\u6001\u9009\u9879\u7684\u4e0b\u62c9\u6846\u8fc7\u6ee4\u5668\n            SelectFilter(\n                \"Publisher_name\", \n                label=\"\u51fa\u7248\u793e\",  \n                choices=status_choices,\n                related_key=\"publisher_id\",\n                related_model=Publisher\n            )\n        ]\n        return filters\n</code></pre> <p>tip - \u901a\u8fc7related_model\u548crelated_key\u6765\u5b9a\u4e49\u5173\u8054\u67e5\u8be2 - \u901a\u8fc7get_filter_fields\u6765\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668 - \u901a\u8fc7get_status_choices\u6765\u52a8\u6001\u83b7\u53d6\u8fc7\u6ee4\u5668\u9009\u9879</p> <p></p>"},{"location":"zh/api/model_admin_manager/","title":"\u6743\u9650\u7ba1\u7406","text":"<p>QC Robyn Admin \u63d0\u4f9b\u4e86\u7b80\u5355\u7684\u8def\u7531\u7ba1\u7406\u6a21\u5757\uff0c\u5305\u62ec\u7528\u6237\u7ba1\u7406\u3001\u89d2\u8272\u7ba1\u7406\u548c\u6743\u9650\u63a7\u5236\u3002</p>"},{"location":"zh/api/model_admin_manager/#_2","title":"\u521d\u59cb\u8d26\u53f7","text":"<p>\u7cfb\u7edf\u521d\u59cb\u5316\u65f6\u4f1a\u81ea\u52a8\u521b\u5efa\u8d85\u7ea7\u7ba1\u7406\u5458\u8d26\u53f7\uff1a - \u7528\u6237\u540d\uff1aadmin - \u5bc6\u7801\uff1aadmin</p> <p>\u5efa\u8bae\u9996\u6b21\u767b\u5f55\u540e\u7acb\u5373\u4fee\u6539\u5bc6\u7801\u3002</p> <p>tips\uff1a</p> <p>qc_robyn_admin\u901a\u8fc7\u914d\u7f6e\u89d2\u8272\u7684\u65b9\u5f0f\u6765\u63a7\u5236\u8def\u7531\u6743\u9650\uff0c\u9700\u8981\u5bf9\u89d2\u8272\u505a\u597d\u5141\u8bb8\u8def\u7531\u8bbf\u95ee\u540e\uff0c\u624d\u53ef\u4ee5\u8fdb\u884c\u8def\u7531\u9650\u5236\uff0c\u5426\u5219\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u9875\u9762</p> <p> </p> <p>\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u7528\u6237</p> <p></p> <p>\u8bbe\u7f6e\u7528\u6237\u6240\u5c5e\u89d2\u8272</p> <p></p>"},{"location":"zh/api/model_admin_manager/#_3","title":"\u7528\u6237\u7ba1\u7406","text":"<p>\u5728\u7528\u6237\u7ba1\u7406\u754c\u9762\uff0c\u53ef\u4ee5\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a - \u521b\u5efa\u65b0\u7528\u6237 - \u7f16\u8f91\u7528\u6237\u4fe1\u606f\uff08\u7528\u6237\u540d\u3001\u5bc6\u7801\u3001\u90ae\u7bb1\u7b49\uff09 - \u8bbe\u7f6e\u7528\u6237\u72b6\u6001\uff08\u542f\u7528/\u7981\u7528\uff09 - \u5206\u914d\u7528\u6237\u89d2\u8272</p> <p></p>"},{"location":"zh/api/model_admin_manager/#_4","title":"\u89d2\u8272\u7ba1\u7406","text":"<p>\u89d2\u8272\u662f\u6743\u9650\u7684\u96c6\u5408\uff0c\u5728\u89d2\u8272\u7ba1\u7406\u754c\u9762\u53ef\u4ee5\uff1a - \u521b\u5efa\u65b0\u89d2\u8272 - \u7f16\u8f91\u89d2\u8272\u4fe1\u606f - \u914d\u7f6e\u89d2\u8272\u53ef\u8bbf\u95ee\u8def\u7531</p> <p></p>"},{"location":"zh/api/model_admin_manager/#_5","title":"\u7528\u6237\u89d2\u8272\u914d\u7f6e","text":"<p>\u5bf9\u7528\u6237\u7ed1\u5b9a\u89d2\u8272</p> <p></p>"},{"location":"zh/components/filter_field/","title":"FilterField \u8fc7\u6ee4\u5b57\u6bb5\u7ec4\u4ef6","text":"<p>FilterField \u662f\u7528\u4e8e\u914d\u7f6e\u6570\u636e\u5217\u8868\u8fc7\u6ee4\u6761\u4ef6\u7684\u7ec4\u4ef6\uff0c\u652f\u6301\u591a\u79cd\u8fc7\u6ee4\u7c7b\u578b\u548c\u6570\u636e\u5904\u7406\u529f\u80fd\u3002</p> <p>\u914d\u7f6e\u5728AdminModel\u7684filter_fields\u4e2d\u3002</p>"},{"location":"zh/components/filter_field/#_1","title":"\u57fa\u672c\u8fc7\u6ee4\u5668\u7c7b\u578b","text":""},{"location":"zh/components/filter_field/#inputfilter","title":"InputFilter \u8f93\u5165\u6846\u8fc7\u6ee4\u5668","text":"<p>\u7528\u4e8e\u6587\u672c\u641c\u7d22\u8fc7\u6ee4\uff1a</p> <pre><code>InputFilter(\n    name=\"username\",           # \u5b57\u6bb5\u540d\n    label=\"\u7528\u6237\u540d\",            # \u663e\u793a\u6807\u7b7e\n    placeholder=\"\u8bf7\u8f93\u5165\u7528\u6237\u540d\", # \u5360\u4f4d\u6587\u672c\n    operator=\"icontains\"       # \u8fc7\u6ee4\u64cd\u4f5c\u7b26\n)\n</code></pre>"},{"location":"zh/components/filter_field/#selectfilter","title":"SelectFilter \u4e0b\u62c9\u9009\u62e9\u8fc7\u6ee4\u5668","text":"<p>\u7528\u4e8e\u9009\u9879\u8fc7\u6ee4\uff1a</p> <pre><code>SelectFilter(\n    name=\"status\",\n    label=\"\u72b6\u6001\",\n    choices={                  # \u9009\u9879\u914d\u7f6e\n        True: \"\u542f\u7528\",\n        False: \"\u7981\u7528\"\n    },\n    multiple=False            # \u662f\u5426\u652f\u6301\u591a\u9009\n)\n</code></pre>"},{"location":"zh/components/filter_field/#daterangefilter","title":"DateRangeFilter \u65e5\u671f\u8303\u56f4\u8fc7\u6ee4\u5668","text":"<p>\u7528\u4e8e\u65e5\u671f\u8303\u56f4\u8fc7\u6ee4\uff1a</p> <pre><code>DateRangeFilter(\n    name=\"create_time\",\n    label=\"\u521b\u5efa\u65f6\u95f4\"\n)\n</code></pre>"},{"location":"zh/components/filter_field/#numberrangefilter","title":"NumberRangeFilter \u6570\u5b57\u8303\u56f4\u8fc7\u6ee4\u5668","text":"<p>\u7528\u4e8e\u6570\u503c\u8303\u56f4\u8fc7\u6ee4\uff1a</p> <pre><code>NumberRangeFilter(\n    name=\"price\",\n    label=\"\u4ef7\u683c\"\n)\n</code></pre>"},{"location":"zh/components/filter_field/#booleanfilter","title":"BooleanFilter \u5e03\u5c14\u8fc7\u6ee4\u5668","text":"<p>\u7528\u4e8e\u5e03\u5c14\u503c\u8fc7\u6ee4\uff1a</p> <pre><code>BooleanFilter(\n    name=\"is_active\",\n    label=\"\u662f\u5426\u6fc0\u6d3b\"\n)\n</code></pre>"},{"location":"zh/components/filter_field/#_2","title":"\u5173\u8054\u6a21\u578b\u8fc7\u6ee4","text":"<p>\u652f\u6301\u5bf9\u5173\u8054\u6a21\u578b\u5b57\u6bb5\u8fdb\u884c\u8fc7\u6ee4\uff1a</p> <pre><code>InputFilter(\n    name=\"Category_name\",      # \u683c\u5f0f\u4e3a: \u5173\u8054\u6a21\u578b\u540d_\u5b57\u6bb5\u540d\n    label=\"\u5206\u7c7b\u540d\u79f0\",\n    related_model=Category,    # \u5173\u8054\u7684\u6a21\u578b\u7c7b\n    related_key=\"category_id\"  # \u5916\u952e\u5b57\u6bb5\u540d\n)\n</code></pre>"},{"location":"zh/components/filter_field/#_3","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>filter_fields = [\n    # \u6587\u672c\u8f93\u5165\u8fc7\u6ee4\n    InputFilter(\n        name=\"username\",\n        label=\"\u7528\u6237\u540d\",\n        placeholder=\"\u8bf7\u8f93\u5165\u7528\u6237\u540d\u641c\u7d22\"\n    ),\n\n    # \u9009\u62e9\u8fc7\u6ee4\n    SelectFilter(\n        name=\"status\",\n        label=\"\u72b6\u6001\",\n        choices={\n            1: \"\u6b63\u5e38\",\n            0: \"\u7981\u7528\",\n            -1: \"\u5220\u9664\"\n        }\n    ),\n\n    # \u65e5\u671f\u8303\u56f4\u8fc7\u6ee4\n    DateRangeFilter(\n        name=\"create_time\",\n        label=\"\u521b\u5efa\u65f6\u95f4\"\n    ),\n\n    # \u6570\u5b57\u8303\u56f4\u8fc7\u6ee4\n    NumberRangeFilter(\n        name=\"price\",\n        label=\"\u4ef7\u683c\u533a\u95f4\"\n    ),\n\n    # \u5e03\u5c14\u8fc7\u6ee4\n    BooleanFilter(\n        name=\"is_active\",\n        label=\"\u6fc0\u6d3b\u72b6\u6001\"\n    ),\n\n    # \u5173\u8054\u6a21\u578b\u8fc7\u6ee4\n    InputFilter(\n        name=\"Category_name\",\n        label=\"\u5206\u7c7b\u540d\u79f0\",\n        related_model=Category,\n        related_key=\"category_id\"\n    )\n]\n</code></pre>"},{"location":"zh/components/filter_field/#_4","title":"\u91cd\u8981\u53c2\u6570\u8bf4\u660e","text":""},{"location":"zh/components/filter_field/#_5","title":"\u57fa\u7840\u53c2\u6570","text":"<ul> <li> <p><code>name</code>: \u8fc7\u6ee4\u5b57\u6bb5\u540d\u79f0</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u5bf9\u5e94\u6a21\u578b\u7684\u5b57\u6bb5\u540d\uff0c\u5173\u8054\u6a21\u578b\u683c\u5f0f\u4e3a\"\u6a21\u578b\u540d_\u5b57\u6bb5\u540d\"</li> </ul> </li> <li> <p><code>label</code>: \u663e\u793a\u6807\u7b7e</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u8fc7\u6ee4\u5668\u7684\u663e\u793a\u540d\u79f0</li> </ul> </li> <li> <p><code>filter_type</code>: \u8fc7\u6ee4\u5668\u7c7b\u578b</p> <ul> <li>\u7c7b\u578b: <code>FilterType</code></li> <li>\u53ef\u9009\u503c:<ul> <li><code>INPUT</code>: \u8f93\u5165\u6846</li> <li><code>SELECT</code>: \u4e0b\u62c9\u9009\u62e9</li> <li><code>DATE_RANGE</code>: \u65e5\u671f\u8303\u56f4</li> <li><code>NUMBER_RANGE</code>: \u6570\u5b57\u8303\u56f4</li> <li><code>BOOLEAN</code>: \u5e03\u5c14\u9009\u62e9</li> </ul> </li> </ul> </li> </ul>"},{"location":"zh/components/filter_field/#_6","title":"\u9ad8\u7ea7\u53c2\u6570","text":"<ul> <li> <p><code>choices</code>: \u9009\u9879\u914d\u7f6e\uff08\u7528\u4e8eSelectFilter\uff09</p> <ul> <li>\u7c7b\u578b: <code>Dict[Any, str]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u9009\u62e9\u6846\u7684\u9009\u9879\u548c\u5bf9\u5e94\u7684\u503c</li> </ul> </li> <li> <p><code>multiple</code>: \u662f\u5426\u652f\u6301\u591a\u9009\uff08\u7528\u4e8eSelectFilter\uff09</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>False</code></li> </ul> </li> <li> <p><code>placeholder</code>: \u5360\u4f4d\u63d0\u793a\u6587\u672c</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u8f93\u5165\u6846\u7684\u63d0\u793a\u6587\u672c</li> </ul> </li> <li> <p><code>operator</code>: \u8fc7\u6ee4\u64cd\u4f5c\u7b26</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u9ed8\u8ba4\u503c: <code>icontains</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u8fc7\u6ee4\u6761\u4ef6\u7684\u6bd4\u8f83\u65b9\u5f0f</li> </ul> </li> </ul>"},{"location":"zh/components/filter_field/#_7","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li> <p>\u5173\u8054\u6a21\u578b\u8fc7\u6ee4</p> <ul> <li>\u5b57\u6bb5\u540d\u5fc5\u987b\u7b26\u5408\"\u6a21\u578b\u540d_\u5b57\u6bb5\u540d\"\u7684\u683c\u5f0f</li> <li>\u9700\u8981\u6b63\u786e\u914d\u7f6erelated_model\u548crelated_key</li> </ul> </li> <li> <p>\u9009\u62e9\u8fc7\u6ee4\u5668</p> <ul> <li>choices\u5b57\u5178\u7684key\u4e3a\u5b9e\u9645\u503c\uff0cvalue\u4e3a\u663e\u793a\u6587\u672c</li> <li>multiple=True\u65f6\u652f\u6301\u591a\u9009\u529f\u80fd(to do)</li> </ul> </li> <li> <p>\u8303\u56f4\u8fc7\u6ee4\u5668</p> <ul> <li>DateRangeFilter\u63d0\u4f9b\u65e5\u671f\u9009\u62e9\u5668</li> <li>NumberRangeFilter\u63d0\u4f9b\u6570\u503c\u8f93\u5165\u6846 </li> </ul> </li> </ol>"},{"location":"zh/components/filter_field/#_8","title":"\u9ad8\u7ea7\u7528\u6cd5","text":""},{"location":"zh/components/filter_field/#_9","title":"\u52a8\u6001\u8fc7\u6ee4\u9009\u9879","text":"<p>\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u4ece\u6570\u636e\u5e93\u4e2d\u52a8\u6001\u83b7\u53d6\u8fc7\u6ee4\u9009\u9879\uff0c\u6bd4\u5982\u72b6\u6001\u5217\u8868\u3002\u8fd9\u65f6\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 <code>get_filter_fields</code> \u65b9\u6cd5\u6765\u5b9e\u73b0\uff1a</p> <pre><code>class TrademarkAdmin(AdminModel):\n    async def get_status_choices(self) -&gt; Dict[str, str]:\n        \"\"\"\u83b7\u53d6\u72b6\u6001\u9009\u9879\"\"\"\n        # \u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6240\u6709\u4e0d\u91cd\u590d\u7684\u72b6\u6001\u503c\n        status_choices = await US_Trademark.all().values_list('status', flat=True)\n        # \u8f6c\u6362\u4e3a\u9009\u9879\u5b57\u5178\n        return {status: status for status in status_choices if status}\n\n    async def get_filter_fields(self) -&gt; List[FilterField]:\n        \"\"\"\u83b7\u53d6\u8fc7\u6ee4\u5b57\u6bb5\u914d\u7f6e\"\"\"\n        # \u52a8\u6001\u83b7\u53d6\u72b6\u6001\u9009\u9879\n        status_choices = await self.get_status_choices()        \n\n        filters = [\n            # \u666e\u901a\u6587\u672c\u641c\u7d22\u8fc7\u6ee4\u5668\n            InputFilter(\n                \"mark_name\", \n                label=\"\u5546\u6807\u540d\", \n                placeholder=\"\u8bf7\u8f93\u5165\u5546\u6807\u540d\",\n                operator=\"icontains\"\n            ),\n            # \u52a8\u6001\u9009\u9879\u7684\u4e0b\u62c9\u6846\u8fc7\u6ee4\u5668\n            SelectFilter(\n                \"status\", \n                label=\"\u72b6\u6001\",  \n                choices=status_choices,\n            )\n        ]\n        return filters\n</code></pre> <p>\u8fd9\u79cd\u65b9\u5f0f\u7279\u522b\u9002\u7528\u4e8e\u4ee5\u4e0b\u573a\u666f\uff1a - \u9700\u8981\u4ece\u6570\u636e\u5e93\u52a8\u6001\u83b7\u53d6\u8fc7\u6ee4\u9009\u9879 - \u8fc7\u6ee4\u9009\u9879\u9700\u8981\u6839\u636e\u7528\u6237\u6743\u9650\u52a8\u6001\u751f\u6210 - \u8fc7\u6ee4\u5668\u914d\u7f6e\u9700\u8981\u4f9d\u8d56\u5176\u4ed6\u6570\u636e</p> <p>\u901a\u8fc7\u91cd\u5199 <code>get_filter_fields</code> \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\uff1a 1. \u5b9e\u73b0\u52a8\u6001\u7684\u8fc7\u6ee4\u9009\u9879 2. \u6839\u636e\u6761\u4ef6\u8fd4\u56de\u4e0d\u540c\u7684\u8fc7\u6ee4\u5668\u914d\u7f6e 3. \u5728\u8fc7\u6ee4\u5668\u914d\u7f6e\u4e2d\u4f7f\u7528\u5f02\u6b65\u64cd\u4f5c</p>"},{"location":"zh/components/form_field/","title":"FormField \u8868\u5355\u5b57\u6bb5\u7ec4\u4ef6","text":"<p>FormField \u662f\u7528\u4e8e\u914d\u7f6e\u8868\u5355\u5b57\u6bb5\u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u652f\u6301\u591a\u79cd\u8f93\u5165\u7c7b\u578b\u3001\u6570\u636e\u5904\u7406\u548c\u9a8c\u8bc1\u529f\u80fd\u3002</p> <p>\u914d\u7f6e\u5728AdminModel\u7684form_fields\u548cadd_form_fields\u4e2d</p>"},{"location":"zh/components/form_field/#_1","title":"\u793a\u4f8b","text":"<pre><code>python\n\nadd_form_fields = [\n        FormField(\"name\", label=\"\u4f5c\u8005\u540d\u79f0\", required=True),\n        FormField(\"avatar\", label=\"\u5934\u50cf\", field_type=DisplayType.FILE_UPLOAD,upload_path=\"static/avatars\", accept=\"image/*\", max_size=1024*1024*10),\n        FormField(\n            'biography', label='\u7b80\u4ecb', field_type=DisplayType.TEXT, \n            processor=lambda x: get_biography(x)\n        )\n    ]\n</code></pre>"},{"location":"zh/components/form_field/#_2","title":"\u57fa\u672c\u53c2\u6570","text":"<ul> <li> <p><code>name</code>: \u5b57\u6bb5\u540d\u79f0</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u5bf9\u5e94\u6a21\u578b\u7684\u5b57\u6bb5\u540d\uff0c\u7528\u4e8e\u8868\u5355\u63d0\u4ea4</li> </ul> </li> <li> <p><code>label</code>: \u663e\u793a\u6807\u7b7e</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u8868\u5355\u5b57\u6bb5\u7684\u663e\u793a\u540d\u79f0</li> </ul> </li> <li> <p><code>field_type</code>: \u5b57\u6bb5\u7c7b\u578b</p> <ul> <li>\u7c7b\u578b: <code>DisplayType</code></li> <li>\u53ef\u9009\u503c:<ul> <li><code>TEXT</code>: \u6587\u672c\u8f93\u5165\u6846</li> <li><code>EMAIL</code>: \u90ae\u7bb1\u8f93\u5165\u6846</li> <li><code>PASSWORD</code>: \u5bc6\u7801\u8f93\u5165\u6846</li> <li><code>DATE</code>: \u65e5\u671f\u9009\u62e9\u5668</li> <li><code>DATETIME</code>: \u65e5\u671f\u65f6\u95f4\u9009\u62e9\u5668</li> <li><code>SELECT</code>: \u4e0b\u62c9\u9009\u62e9\u6846</li> <li><code>SWITCH</code>: \u5f00\u5173\u7ec4\u4ef6</li> <li><code>FILE_UPLOAD</code>: \u6587\u4ef6\u4e0a\u4f20</li> </ul> </li> <li>\u8bf4\u660e: \u51b3\u5b9a\u8868\u5355\u5b57\u6bb5\u7684\u8f93\u5165\u7c7b\u578b</li> </ul> </li> <li> <p><code>upload_path</code>: \u6587\u4ef6\u4e0a\u4f20\u8def\u5f84str</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u9ed8\u8ba4\u503c: None</li> <li>\u8bf4\u660e: \u6587\u4ef6\u56fe\u7247\u4e0a\u4f20\u7684\u8def\u5f84</li> </ul> </li> <li> <p><code>max_size</code>: \u6587\u4ef6\u4e0a\u4f20\u6700\u5927\u5927\u5c0f</p> <ul> <li>\u7c7b\u578b: <code>int</code></li> <li>\u9ed8\u8ba4\u503c: None</li> <li>\u8bf4\u660e: \u6587\u4ef6\u56fe\u7247\u4e0a\u4f20\u7684\u6700\u5927\u5927\u5c0f(\u5355\u4f4d\u5b57\u8282)</li> </ul> </li> </ul>"},{"location":"zh/components/form_field/#_3","title":"\u9ad8\u7ea7\u914d\u7f6e","text":""},{"location":"zh/components/form_field/#_4","title":"\u9009\u62e9\u5668\u914d\u7f6e","text":"<p>\u7528\u4e8e\u914d\u7f6e\u4e0b\u62c9\u9009\u62e9\u6846\u7684\u9009\u9879\uff1a</p> <ul> <li><code>choices</code>: \u9009\u9879\u914d\u7f6e<ul> <li>\u7c7b\u578b: <code>Dict[str, Any]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u9009\u62e9\u6846\u7684\u9009\u9879\u548c\u5bf9\u5e94\u7684\u503c</li> </ul> </li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>FormField(\n    \"is_active\",\n    label=\"\u72b6\u6001\",\n    field_type=DisplayType.SELECT,\n    choices={\"\u6b63\u5e38\": True, \"\u7981\u7528\": False}\n)\n</code></pre>"},{"location":"zh/components/form_field/#_5","title":"\u6570\u636e\u5904\u7406\u5668","text":"<p>\u7528\u4e8e\u5728\u8868\u5355\u63d0\u4ea4\u65f6\u5904\u7406\u5b57\u6bb5\u503c\uff1a</p> <ul> <li><code>processor</code>: \u5904\u7406\u51fd\u6570<ul> <li>\u7c7b\u578b: <code>Callable[[Any], Any]</code></li> <li>\u8bf4\u660e: \u5728\u4fdd\u5b58\u6570\u636e\u524d\u5bf9\u5b57\u6bb5\u503c\u8fdb\u884c\u5904\u7406</li> </ul> </li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>FormField(\n    \"password\", \n    label=\"\u5bc6\u7801\", \n    field_type=DisplayType.PASSWORD,\n    required=True,\n    processor=lambda x: AdminUser.hash_password(x)  # \u5bc6\u7801\u52a0\u5bc6\u5904\u7406\n)\n</code></pre>"},{"location":"zh/components/form_field/#_6","title":"\u5b57\u6bb5\u7c7b\u578b\u793a\u4f8b","text":""},{"location":"zh/components/form_field/#_7","title":"\u6587\u672c\u8f93\u5165\u6846","text":"<pre><code>FormField(\n    \"username\",\n    label=\"\u7528\u6237\u540d\",\n    required=True\n)\n</code></pre>"},{"location":"zh/components/form_field/#_8","title":"\u90ae\u7bb1\u8f93\u5165\u6846","text":"<pre><code>FormField(\n    \"email\",\n    label=\"\u90ae\u7bb1\",\n    field_type=DisplayType.EMAIL,\n    required=True\n)\n</code></pre>"},{"location":"zh/components/form_field/#_9","title":"\u5bc6\u7801\u8f93\u5165\u6846","text":"<pre><code>FormField(\n    \"password\",\n    label=\"\u5bc6\u7801\",\n    field_type=DisplayType.PASSWORD,\n    required=True\n)\n</code></pre>"},{"location":"zh/components/form_field/#_10","title":"\u65e5\u671f\u9009\u62e9\u5668","text":"<pre><code>FormField(\n    'create_at',\n    label=\"\u51fa\u751f\u65e5\u671f\",\n    field_type=DisplayType.DATE\n)\n</code></pre>"},{"location":"zh/components/form_field/#_11","title":"\u4e0b\u62c9\u9009\u62e9\u6846","text":"<pre><code>FormField(\n    \"status\",\n    label=\"\u72b6\u6001\",\n    field_type=DisplayType.SELECT,\n    choices={\n        \"\u542f\u7528\": True,\n        \"\u7981\u7528\": False\n    }\n)\n</code></pre>"},{"location":"zh/components/form_field/#_12","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>form_fields = [\n    # \u57fa\u672c\u6587\u672c\u5b57\u6bb5\n    FormField(\n        \"username\",\n        label=\"\u7528\u6237\u540d\",\n        required=True\n    ),\n\n    # \u90ae\u7bb1\u5b57\u6bb5\n    FormField(\n        \"email\",\n        label=\"\u90ae\u7bb1\",\n        field_type=DisplayType.EMAIL,\n        required=True\n    ),\n\n    # \u5bc6\u7801\u5b57\u6bb5\uff08\u5e26\u5904\u7406\u5668\uff09\n    FormField(\n        \"password\", \n        label=\"\u5bc6\u7801\", \n        field_type=DisplayType.PASSWORD,\n        required=True,\n        processor=lambda x: AdminUser.hash_password(x)\n    ),\n\n    # \u7535\u8bdd\u5b57\u6bb5\n    FormField(\n        \"phone\",\n        label=\"\u7535\u8bdd\",\n        field_type=DisplayType.TEXT,\n        required=True\n    ),\n\n    # \u72b6\u6001\u9009\u62e9\u5b57\u6bb5\n    FormField(\n        \"is_active\",\n        label=\"\u72b6\u6001\",\n        field_type=DisplayType.SELECT,\n        choices={\"\u6b63\u5e38\": True, \"\u7981\u7528\": False}\n    ),\n\n    # \u65e5\u671f\u5b57\u6bb5\n    FormField(\n        'create_at',\n        label=\"\u51fa\u751f\u65e5\u671f\",\n        field_type=DisplayType.DATE\n    )\n]\n</code></pre>"},{"location":"zh/components/form_field/#_13","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li> <p>\u5b57\u6bb5\u7c7b\u578b</p> <ul> <li>\u9009\u62e9\u5408\u9002\u7684 <code>field_type</code> \u53ef\u4ee5\u83b7\u5f97\u76f8\u5e94\u7684\u8f93\u5165\u9a8c\u8bc1</li> <li><code>EMAIL</code> \u7c7b\u578b\u4f1a\u81ea\u52a8\u9a8c\u8bc1\u90ae\u7bb1\u683c\u5f0f</li> <li><code>DATE</code> \u548c <code>DATETIME</code> \u4f1a\u63d0\u4f9b\u65e5\u671f\u9009\u62e9\u5668</li> </ul> </li> <li> <p>\u6570\u636e\u5904\u7406</p> <ul> <li><code>processor</code> \u51fd\u6570\u5728\u6570\u636e\u4fdd\u5b58\u524d\u6267\u884c</li> <li>\u786e\u4fdd\u5904\u7406\u51fd\u6570\u8fd4\u56de\u6b63\u786e\u7684\u6570\u636e\u7c7b\u578b</li> </ul> </li> <li> <p>\u5fc5\u586b\u5b57\u6bb5</p> <ul> <li>\u8bbe\u7f6e <code>required=True</code> \u7684\u5b57\u6bb5\u4f1a\u5728\u524d\u7aef\ufffd\ufffd\ufffd\u884c\u9a8c\u8bc1</li> <li>\u8868\u5355\u63d0\u4ea4\u65f6\u4f1a\u68c0\u67e5\u5fc5\u586b\u5b57\u6bb5\u662f\u5426\u586b\u5199 </li> </ul> </li> </ol>"},{"location":"zh/components/model/","title":"ModelAdmin \u6a21\u578b\u7ba1\u7406\u7c7b","text":"<p>ModelAdmin \u662f\u7528\u4e8e\u914d\u7f6e\u6a21\u578b\u5728\u540e\u53f0\u7684\u5c55\u793a\u548c\u7ba1\u7406\u65b9\u5f0f\u7684\u6838\u5fc3\u7c7b\u3002\u901a\u8fc7\u7ee7\u627f\u548c\u914d\u7f6e ModelAdmin\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6a21\u578b\u7684\u663e\u793a\u5b57\u6bb5\u3001\u8fc7\u6ee4\u5668\u3001\u641c\u7d22\u9879\u7b49\u529f\u80fd\u3002</p>"},{"location":"zh/components/model/#_1","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from qc_robyn_admin.core import ModelAdmin, TableField, DisplayType\n\nclass MarkAdmin(ModelAdmin):\n    # \u663e\u793a\u540d\u79f0\n    verbose_name = \"\u5546\u6807\u67e5\u8be2\"\n\n    # \u83dc\u5355\u914d\u7f6e\n    menu_group = \"\u5546\u6807\u67e5\u8be2\"    # \u6240\u5c5e\u83dc\u5355\u7ec4\n    menu_icon = \"bi bi-people\" # Bootstrap \u56fe\u6807\n    menu_order = 1            # \u83dc\u5355\u6392\u5e8f\n\n    # \u529f\u80fd\u5f00\u5173\n    enable_edit = True       # \u5141\u8bb8\u7f16\u8f91\n    allow_add = True        # \u5141\u8bb8\u6dfb\u52a0\n    allow_delete = True     # \u5141\u8bb8\u5220\u9664\n    allow_export = True     # \u5141\u8bb8\u5bfc\u51fa\n    allow_import = True    # \u5141\u8bb8\u5bfc\u5165\n\n    # \u8868\u683c\u5b57\u6bb5\u914d\u7f6e\n    table_fields = [\n        TableField(\n            name=\"id\", label=\"ID\", display_type=DisplayType.TEXT, editable=False, hidden=True\n        ),\n        TableField(\n            \"xxx\", label=\"xxx\", display_type=DisplayType.TEXT, sortable=True, formatter=lambda x: str(x)\n        ),\n    ]\n    # \u9ed8\u8ba4\u6392\u5e8f\n    default_ordering = [\"-created_at\"]\n\n    import_fields = [\n        \"name\",\n        \"email\",\n        \"biography\"\n    ]\n...\n# Mark is tortoise-orm model\nadmin_site.register_model(Mark, MarkAdmin)\n</code></pre>"},{"location":"zh/components/model/#_2","title":"\u5c5e\u6027\u8bf4\u660e","text":""},{"location":"zh/components/model/#_3","title":"\u57fa\u7840\u5c5e\u6027","text":"<ul> <li> <p><code>verbose_name</code>: \u663e\u793a\u540d\u79f0</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u5728\u540e\u53f0\u754c\u9762\u83dc\u5355\u680f\u5c55\u793a\u7684\u540d\u79f0</li> </ul> </li> <li> <p><code>menu_group</code>: \u83dc\u5355\u7ec4</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u6a21\u578b\u5728\u540e\u53f0\u83dc\u5355\u4e2d\u6240\u5c5e\u7684\u7ec4</li> </ul> </li> <li> <p><code>menu_icon</code>: \u83dc\u5355\u56fe\u6807</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u4f7f\u7528 Bootstrap Icons \u7684\u56fe\u6807\u7c7b\u540d</li> </ul> </li> <li> <p><code>menu_order</code>: \u83dc\u5355\u6392\u5e8f</p> <ul> <li>\u7c7b\u578b: <code>int</code></li> <li>\u8bf4\u660e: \u5728\u540c\u7ec4\u83dc\u5355\u4e2d\u7684\u6392\u5e8f\u4f4d\u7f6e\uff0c\u6570\u5b57\u8d8a\u5c0f\u8d8a\u9760\u524d</li> </ul> </li> </ul>"},{"location":"zh/components/model/#_4","title":"\u529f\u80fd\u63a7\u5236","text":"<ul> <li> <p><code>enable_edit</code>: \u542f\u7528\u7f16\u8f91</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>True</code></li> <li>\u8bf4\u660e: \u662f\u5426\u5141\u8bb8\u7f16\u8f91\u8868\u683c\u8bb0\u5f55</li> </ul> </li> <li> <p><code>allow_add</code>: \u5141\u8bb8\u6dfb\u52a0</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>True</code></li> <li>\u8bf4\u660e: \u662f\u5426\u663e\u793a\u6dfb\u52a0\u6309\u94ae\uff0c\u9700\u8981\u642d\u914d add_form\u53c2\u6570\u4f7f\u7528</li> </ul> </li> <li> <p><code>allow_delete</code>: \u5141\u8bb8\u5220\u9664</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>True</code></li> <li>\u8bf4\u660e: \u662f\u5426\u5141\u8bb8\u5220\u9664\u8bb0\u5f55</li> </ul> </li> <li> <p><code>allow_export</code>: \u5141\u8bb8\u5bfc\u51fa</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>True</code></li> <li>\u8bf4\u660e: \u662f\u5426\u663e\u793a\u5bfc\u51fa\u6309\u94ae</li> </ul> </li> <li> <p><code>allow_import</code>: \u5141\u8bb8\u5bfc\u5165</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>True</code></li> <li>\u8bf4\u660e: \u662f\u5426\u663e\u793a\u5bfc\u5165\u6309\u94ae</li> </ul> </li> </ul>"},{"location":"zh/components/model/#_5","title":"\u5b57\u6bb5\u914d\u7f6e","text":"<ul> <li> <p><code>table_fields</code>: \u8868\u683c\u5b57\u6bb5</p> <ul> <li>\u7c7b\u578b: <code>List[TableField]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u8868\u683c\u4e2d\u663e\u793a\u7684\u5b57\u6bb5\u53ca\u5176\u914d\u7f6e, \u66f4\u591a\u53c2\u6570\u9605\u8bfb: TableField</li> </ul> </li> <li> <p><code>form_fields</code>: \u8868\u5355\u5b57\u6bb5</p> <ul> <li>\u7c7b\u578b: <code>List[FormField]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u7f16\u8f91\u8868\u5355\u4e2d\u7684\u5b57\u6bb5\u53ca\u5176\u914d\u7f6e, \u66f4\u591a\u53c2\u6570\u9605\u8bfb: FormField</li> </ul> </li> <li> <p><code>search_fields</code>: \u641c\u7d22\u5b57\u6bb5</p> <ul> <li>\u7c7b\u578b: <code>List[SearchField]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u53ef\u641c\u7d22\u7684\u5b57\u6bb5, \u66f4\u591a\u53c2\u6570\u9605\u8bfb: SearchField</li> </ul> </li> <li> <p><code>filter_fields</code>: \u8fc7\u6ee4\u5b57\u6bb5</p> <ul> <li>\u7c7b\u578b: <code>List[FilterField]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u8fc7\u6ee4\u5668\u5b57\u6bb5, \u66f4\u591a\u53c2\u6570\u9605\u8bfb: FilterField</li> </ul> </li> <li> <p><code>import_fields</code>: \u5bfc\u5165\u5b57\u6bb5</p> <ul> <li>\u7c7b\u578b: <code>List[str]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u5bfc\u5165\u65f6\u53ef\u5bfc\u5165\u7684\u5b57\u6bb5</li> </ul> </li> </ul>"},{"location":"zh/components/model/#_6","title":"\u9ad8\u7ea7\u914d\u7f6e","text":""},{"location":"zh/components/model/#_7","title":"\u81ea\u5b9a\u4e49\u67e5\u8be2\u96c6","text":"<pre><code>async def get_queryset(self, request: Request, params: dict) -&gt; QuerySet:\n    \"\"\"\u81ea\u5b9a\u4e49\u67e5\u8be2\u96c6\"\"\"\n    queryset = self.model.all()\n\n    # \u6dfb\u52a0\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u6761\u4ef6\n    queryset = queryset.filter(is_active=True)\n\n    # \u5904\u7406\u5173\u8054\u67e5\u8be2\n    queryset = queryset.select_related(\"department\")\n\n    return queryset\n</code></pre>"},{"location":"zh/components/model/#_8","title":"\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316","text":"<pre><code>async def serialize_object(self, obj: Model, for_display: bool = True) -&gt; dict:\n    \"\"\"\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u65b9\u6cd5\"\"\"\n    result = await super().serialize_object(obj, for_display)\n\n    # \u6dfb\u52a0\u81ea\u5b9a\u4e49\u5b57\u6bb5\n    result['custom_field'] = await self.get_custom_value(obj)\n\n    return result\n</code></pre>"},{"location":"zh/components/model/#_9","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>from robyn_admin.core import ModelAdmin, TableField, SearchField, SelectFilter\nfrom your_models import User\n\nclass UserAdmin(ModelAdmin):\n    verbose_name = \"\u7528\u6237\u7ba1\u7406\"\n    menu_group = \"\u7cfb\u7edf\u7ba1\u7406\"\n    menu_icon = \"bi bi-people\"\n\n    table_fields = [\n        TableField(\"username\", label=\"\u7528\u6237\u540d\", sortable=True),\n        TableField(\"email\", label=\"\u90ae\u7bb1\", sortable=True),\n        TableField(\n            \"is_active\", \n            label=\"\u72b6\u6001\",\n            display_type=DisplayType.SWITCH,\n            editable=True,\n            labels={True: \"\u542f\u7528\", False: \"\u7981\u7528\"}\n        )\n    ]\n\n    search_fields = [\n        SearchField(\"username\", label=\"\u7528\u6237\u540d\"),\n        SearchField(\"email\", label=\"\u90ae\u7bb1\")\n    ]\n\n    filter_fields = [\n        SelectFilter(\n            \"is_active\",\n            label=\"\u72b6\u6001\",\n            choices={True: \"\u542f\u7528\", False: \"\u7981\u7528\"}\n        )\n    ]\n\n    default_ordering = [\"-created_at\"]\n</code></pre>"},{"location":"zh/components/register/","title":"AdminSite \u7ad9\u70b9\u6ce8\u518c","text":"<p>AdminSite \u662f QC Robyn Admin \u7684\u6838\u5fc3\u7c7b\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u548c\u914d\u7f6e\u6574\u4e2a\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\u3002</p>"},{"location":"zh/components/register/#_1","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from robyn import Robyn\nfrom qc_robyn_admin.core import AdminSite\n\napp = Robyn()\nadmin_site = AdminSite(\n    app,\n    title=\"QC Robyn Admin\",\n    prefix=\"admin\",\n    copyright=\"\u00a9 2024 \u516c\u53f8\u540d\u79f0 \u7248\u6743\u6240\u6709\",\n    db_url=\"postgresql://user:password@localhost:5432/dbname\",\n    modules={\n        \"models\": [\"model.table\", \"robyn_admin.models\"]\n    },\n    default_language=\"zh_CN\",\n    generate_schemas=True\n)\n</code></pre>"},{"location":"zh/components/register/#_2","title":"\u53c2\u6570\u8bf4\u660e","text":""},{"location":"zh/components/register/#_3","title":"\u5fc5\u9700\u53c2\u6570","text":"<ul> <li><code>app</code>: Robyn \u5e94\u7528\u5b9e\u4f8b<ul> <li>\u7c7b\u578b: <code>Robyn</code></li> <li>\u8bf4\u660e: \u7528\u4e8e\u6ce8\u518c\u8def\u7531\u548c\u5904\u7406\u5668\u7684 Robyn \u5e94\u7528\u5b9e\u4f8b</li> </ul> </li> </ul>"},{"location":"zh/components/register/#_4","title":"\u53ef\u9009\u53c2\u6570","text":"<ul> <li> <p><code>title</code>: \u540e\u53f0\u7cfb\u7edf\u6807\u9898</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u9ed8\u8ba4\u503c: 'QC Robyn Admin'</li> <li>\u8bf4\u660e: \u663e\u793a\u5728\u540e\u53f0\u754c\u9762\u9876\u90e8\u7684\u7cfb\u7edf\u540d\u79f0</li> </ul> </li> <li> <p><code>prefix</code>: \u8def\u7531\u524d\u7f00</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u9ed8\u8ba4\u503c: 'admin'</li> <li>\u8bf4\u660e: \u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\u7684 URL \u524d\u7f00\uff0c\u5982 '/admin'</li> </ul> </li> <li> <p><code>copyright</code>: \u7248\u6743\u4fe1\u606f</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u9ed8\u8ba4\u503c: 'QC Robyn Admin'</li> <li>\u8bf4\u660e: \u9875\u9762\u5e95\u90e8\u7684\u7248\u6743\u4fe1\u606f</li> </ul> </li> <li> <p><code>db_url</code>: \u6570\u636e\u5e93\u8fde\u63a5 URL</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u9ed8\u8ba4\u503c: None</li> <li>\u8bf4\u660e: \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u4e3a None \u5219\u5c1d\u8bd5\u590d\u7528\u5df2\u6709\u914d\u7f6e</li> </ul> </li> <li> <p><code>modules</code>: \u6a21\u578b\u6a21\u5757\u914d\u7f6e</p> <ul> <li>\u7c7b\u578b: <code>Dict[str, List[Union[str, ModuleType]]]</code></li> <li>\u9ed8\u8ba4\u503c: None</li> <li>\u8bf4\u660e: \u9700\u8981\u52a0\u8f7d\u7684\u6a21\u578b\u6a21\u5757\u914d\u7f6e</li> </ul> </li> <li> <p><code>default_language</code>: \u9ed8\u8ba4\u8bed\u8a00</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u9ed8\u8ba4\u503c: 'en_US'</li> <li>\u8bf4\u660e: \u7cfb\u7edf\u9ed8\u8ba4\u8bed\u8a00\uff0c\u652f\u6301 'zh_CN' \u548c 'en_US'</li> </ul> </li> <li> <p><code>generate_schemas</code>: \u662f\u5426\u81ea\u52a8\u751f\u6210\u6570\u636e\u5e93\u8868</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: False</li> <li>\u8bf4\u660e: \u662f\u5426\u5728\u542f\u52a8\u65f6\u81ea\u52a8\u521b\u5efa\u6570\u636e\u5e93\u8868\u7ed3\u6784</li> </ul> </li> </ul>"},{"location":"zh/components/register/#_5","title":"\u4e3b\u8981\u65b9\u6cd5","text":""},{"location":"zh/components/register/#register_model","title":"register_model","text":"<p>\u6ce8\u518c\u6a21\u578b\u5230\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\u3002</p> <pre><code>admin_site.register_model(YourModel, YourModelAdmin)\n</code></pre> <p>\u53c2\u6570: - <code>YourModel</code>: tortoise \u6a21\u578b\u7c7b - <code>YourModelAdmin</code>: \u5bf9\u5e94\u7684\u7ba1\u7406\u7c7b</p>"},{"location":"zh/components/register/#register_menu","title":"register_menu","text":"<p>\u6ce8\u518c\u81ea\u5b9a\u4e49\u83dc\u5355\u9879\u3002</p> <pre><code>from robyn_admin.core import MenuItem\n\nadmin_site.register_menu(MenuItem(\n    name=\"\u7cfb\u7edf\u7ba1\u7406\",\n    icon=\"bi bi-gear\",\n    order=1\n))\n</code></pre> <p>\u53c2\u6570: - <code>menu_item</code>: MenuItem \u5b9e\u4f8b\uff0c\u5305\u542b\u83dc\u5355\u7684\u540d\u79f0\u3001\u56fe\u6807\u7b49\u4fe1\u606f</p>"},{"location":"zh/components/register/#_6","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>from robyn import Robyn\nfrom robyn_admin.core import AdminSite, ModelAdmin, MenuItem\nfrom your_models import YourModel\n\napp = Robyn()\n\nadmin_site = AdminSite(\n    app,\n    title=\"\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\",\n    prefix=\"admin\",\n    copyright=\"\u00a9 2024 qc_robyn_admin\",\n    default_language=\"zh_CN\"\n)\n\nadmin_site.register_menu(MenuItem(\n    name=\"\u4e1a\u52a1\u7ba1\u7406\",\n    icon=\"bi bi-briefcase\",\n    order=1\n))\n\nadmin_site.register_model(YourModel, YourModelAdmin)\n</code></pre>"},{"location":"zh/components/register/#_7","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li> <p>\u6570\u636e\u5e93\u914d\u7f6e</p> <ul> <li>\u5982\u679c\u672a\u63d0\u4f9b <code>db_url</code>\uff0c\u7cfb\u7edf\u4f1a\u5c1d\u8bd5\u590d\u7528\u5df2\u6709\u7684\u6570\u636e\u5e93\u914d\u7f6e</li> <li>\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u660e\u786e\u63d0\u4f9b\u6570\u636e\u5e93\u914d\u7f6e</li> </ul> </li> <li> <p>\u6743\u9650\u63a7\u5236</p> <ul> <li>\u7cfb\u7edf\u4f1a\u81ea\u52a8\u521b\u5efa\u9ed8\u8ba4\u7684\u8d85\u7ea7\u7ba1\u7406\u5458\u8d26\u53f7\uff08\u7528\u6237\u540d: admin\uff0c\u5bc6\u7801: admin\uff09</li> <li>\u5efa\u8bae\u5728\u90e8\u7f72\u540e\u7acb\u5373\u4fee\u6539\u8d85\u7ea7\u7ba1\u7406\u5458\u5bc6\u7801</li> </ul> </li> <li> <p>\u8def\u7531\u524d\u7f00</p> <ul> <li>\u786e\u4fdd <code>prefix</code> \u4e0d\u8981\u4e0e\u5176\u4ed6\u8def\u7531\u51b2\u7a81</li> <li>\u5efa\u8bae\u4f7f\u7528\u6709\u610f\u4e49\u7684\u524d\u7f00\uff0c\u5982 'admin'\u3001'manage' \u7b49</li> </ul> </li> </ol>"},{"location":"zh/components/search_field/","title":"SearchField \u641c\u7d22\u5b57\u6bb5\u7ec4\u4ef6","text":"<p>SearchField \u662f\u7528\u4e8e\u914d\u7f6e\u6570\u636e\u5217\u8868\u641c\u7d22\u6761\u4ef6\u7684\u7ec4\u4ef6\uff0c\u652f\u6301\u666e\u901a\u5b57\u6bb5\u548c\u5173\u8054\u6a21\u578b\u5b57\u6bb5\u7684\u641c\u7d22\u3002</p> <p>\u914d\u7f6e\u5728AdminModel\u7684search_fields\u4e2d\u3002</p>"},{"location":"zh/components/search_field/#_1","title":"\u57fa\u672c\u7528\u6cd5","text":""},{"location":"zh/components/search_field/#_2","title":"\u666e\u901a\u5b57\u6bb5\u641c\u7d22","text":"<p>\u7528\u4e8e\u5bf9\u5f53\u524d\u6a21\u578b\u5b57\u6bb5\u8fdb\u884c\u641c\u7d22\uff1a</p> <pre><code>search_fields = [\n    SearchField(\n        name=\"username\",           # \u5b57\u6bb5\u540d\n    )\n]\n</code></pre>"},{"location":"zh/components/search_field/#_3","title":"\u5173\u8054\u6a21\u578b\u5b57\u6bb5\u641c\u7d22","text":"<p>\u7528\u4e8e\u5bf9\u5173\u8054\u6a21\u578b\u7684\u5b57\u6bb5\u8fdb\u884c\u641c\u7d22\uff1a</p> <pre><code>search_fields = [\n    SearchField(\n        name=\"Category_name\",      # \u683c\u5f0f\u4e3a: \u5173\u8054\u6a21\u578b\u540d_\u5b57\u6bb5\u540d\n        related_model=Category,    # \u5173\u8054\u7684\u6a21\u578b\u7c7b\n        related_key=\"category_id\"  # \u5916\u952e\u5b57\u6bb5\u540d\n    )\n]\n</code></pre>"},{"location":"zh/components/search_field/#_4","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>class TrademarkRecordAdmin(AdminModel):\n    search_fields = [\n        # \u5173\u8054\u6a21\u578b\u5b57\u6bb5\u641c\u7d22\n        SearchField(\n            name=\"US_Trademark_mark_name\",     # \u641c\u7d22\u5546\u6807\u540d\u79f0\n            related_model=US_Trademark,\n            related_key=\"trademark_id\",\n        ),\n        SearchField(\n            name=\"US_Trademark_serial_number\", # \u641c\u7d22\u5546\u6807\u7f16\u53f7\n            related_model=US_Trademark,\n            related_key=\"trademark_id\",\n        )\n    ]\n</code></pre>"},{"location":"zh/components/search_field/#_5","title":"\u91cd\u8981\u53c2\u6570\u8bf4\u660e","text":""},{"location":"zh/components/search_field/#_6","title":"\u57fa\u7840\u53c2\u6570","text":"<ul> <li><code>name</code>: \u641c\u7d22\u5b57\u6bb5\u540d\u79f0<ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u5bf9\u5e94\u6a21\u578b\u7684\u5b57\u6bb5\u540d\uff0c\u5173\u8054\u6a21\u578b\u683c\u5f0f\u4e3a\"\u6a21\u578b\u540d_\u5b57\u6bb5\u540d\"</li> </ul> </li> </ul>"},{"location":"zh/components/search_field/#_7","title":"\u5173\u8054\u6a21\u578b\u53c2\u6570","text":"<ul> <li> <p><code>related_model</code>: \u5173\u8054\u7684\u6a21\u578b\u7c7b</p> <ul> <li>\u7c7b\u578b: <code>Type[Model]</code></li> <li>\u8bf4\u660e: \u6307\u5b9a\u5173\u8054\u7684\u6a21\u578b\u7c7b</li> </ul> </li> <li> <p><code>related_key</code>: \u5173\u8054\u7684\u5916\u952e\u5b57\u6bb5</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u6307\u5b9a\u5173\u8054\u6a21\u578b\u7684\u5916\u952e\u5b57\u6bb5\u540d</li> </ul> </li> </ul>"},{"location":"zh/components/search_field/#_8","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li> <p>\u5173\u8054\u6a21\u578b\u641c\u7d22</p> <ul> <li>\u5b57\u6bb5\u540d\u5fc5\u987b\u7b26\u5408\"\u6a21\u578b\u540d_\u5b57\u6bb5\u540d\"\u7684\u683c\u5f0f</li> <li>\u9700\u8981\u540c\u65f6\u914d\u7f6erelated_model\u548crelated_key\u53c2\u6570</li> </ul> </li> <li> <p>\u641c\u7d22\u884c\u4e3a</p> <ul> <li>\u9ed8\u8ba4\u4f7f\u7528\u6a21\u7cca\u5339\u914d\uff08icontains\uff09\u8fdb\u884c\u641c\u7d22</li> <li>\u591a\u4e2a\u641c\u7d22\u5b57\u6bb5\u4e4b\u95f4\u662fOR\u5173\u7cfb </li> </ul> </li> </ol>"},{"location":"zh/components/table_field/","title":"TableField \u8868\u683c\u5b57\u6bb5\u7ec4\u4ef6","text":"<p>TableField \u662f\u7528\u4e8e\u914d\u7f6e\u8868\u683c\u5217\u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u652f\u6301\u591a\u79cd\u663e\u793a\u7c7b\u578b\u3001\u5173\u8054\u67e5\u8be2\u3001\u683c\u5f0f\u5316\u7b49\u529f\u80fd\u3002</p>"},{"location":"zh/components/table_field/#_1","title":"\u57fa\u672c\u53c2\u6570","text":"<ul> <li> <p><code>name</code>: \u5b57\u6bb5\u540d\u79f0</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u5bf9\u5e94\u6a21\u578b\u7684\u5b57\u6bb5\u540d\uff0c\u5173\u8054\u5b57\u6bb5\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u8bed\u6cd5</li> </ul> </li> <li> <p><code>label</code>: \u663e\u793a\u6807\u7b7e</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u8868\u683c\u5217\u5934\u663e\u793a\u7684\u540d\u79f0</li> </ul> </li> <li> <p><code>display_type</code>: \u663e\u793a\u7c7b\u578b</p> <ul> <li>\u7c7b\u578b: <code>DisplayType</code></li> <li>\u53ef\u9009\u503c:<ul> <li><code>TEXT</code>: \u6587\u672c\u7c7b\u578b</li> <li><code>DATETIME</code>: \u65e5\u671f\u65f6\u95f4\u7c7b\u578b</li> <li><code>LINK</code>: \u94fe\u63a5\u7c7b\u578b</li> <li><code>SWITCH</code>: \u5f00\u5173\u7c7b\u578b</li> <li><code>IMAGE</code>: \u56fe\u7247\u7c7b\u578b</li> <li><code>SELECT</code>: \u9009\u62e9\u7c7b\u578b</li> </ul> </li> <li>\u8bf4\u660e: \u51b3\u5b9a\u5b57\u6bb5\u5728\u8868\u683c\u4e2d\u7684\u663e\u793a\u65b9\u5f0f</li> </ul> </li> <li> <p><code>sortable</code>: \u662f\u5426\u53ef\u6392\u5e8f</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>False</code></li> <li>\u8bf4\u660e: \u662f\u5426\u5141\u8bb8\u70b9\u51fb\u5217\u5934\u8fdb\u884c\u6392\u5e8f</li> </ul> </li> <li> <p><code>editable</code>: \u662f\u5426\u53ef\u7f16\u8f91</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>False</code></li> <li>\u8bf4\u660e: \u662f\u5426\u5141\u8bb8\u76f4\u63a5\u5728\u8868\u683c\u4e2d\u7f16\u8f91</li> </ul> </li> <li> <p><code>hidden</code>: \u662f\u5426\u9690\u85cf</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>False</code></li> <li>\u8bf4\u660e: \u662f\u5426\u5728\u8868\u683c\u4e2d\u9690\u85cf\u8be5\u5217</li> </ul> </li> </ul>"},{"location":"zh/components/table_field/#_2","title":"\u5173\u8054\u5b57\u6bb5\u914d\u7f6e","text":"<p>\u7528\u4e8e\u914d\u7f6e\u5173\u8054\u6a21\u578b\u7684\u5b57\u6bb5\u663e\u793a\uff1a</p> <ul> <li> <p><code>related_model</code>: \u5173\u8054\u6a21\u578b</p> <ul> <li>\u7c7b\u578b: <code>Type[Model]</code></li> <li>\u8bf4\u660e: \u5173\u8054\u7684 Tortoise ORM \u6a21\u578b\u7c7b</li> </ul> </li> <li> <p><code>related_key</code>: \u5173\u8054\u952e</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u5f53\u524d\u6a21\u578b\u4e2d\u7684\u5916\u952e\u5b57\u6bb5\u540d</li> </ul> </li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>TableField(\n    \"Trademark_mark_name\",  # \u4f7f\u7528 \u6a21\u578b\u540d_\u5b57\u6bb5\u540d \u7684\u683c\u5f0f\n    label=\"\u5546\u6807\",\n    related_model=Trademark,  # \u5173\u8054\u7684tortoise-orm\u6a21\u578b\u7c7b\n    related_key=\"trademark_id\",  # \u5916\u952e\u5b57\u6bb5\u540d\n    sortable=True\n)\n</code></pre>"},{"location":"zh/components/table_field/#_3","title":"\u683c\u5f0f\u5316\u914d\u7f6e","text":""},{"location":"zh/components/table_field/#formatter","title":"formatter \u51fd\u6570","text":"<p>\u7528\u4e8e\u81ea\u5b9a\u4e49\u5b57\u6bb5\u7684\u663e\u793a\u683c\u5f0f\uff1a\u53ef\u4ee5\u4f20\u5165html\u6216\u8005\u5bf9\u6570\u636e\u5e93\u8fd4\u56de\u503c\u8fdb\u884c\u683c\u5f0f\u5316\u7b49\u64cd\u4f5c</p> <pre><code>TableField(\n    \"create_mail_date\",\n    label=\"\u521b\u5efa\u65f6\u95f4\",\n    display_type=DisplayType.DATETIME,\n    formatter=lambda x: x.strftime('%Y-%m-%d') if x else ''\n)\nTableField(\n    \"document_link\", \n    label=\"\u6587\u6863\u94fe\u63a5\", \n    display_type=DisplayType.LINK,\n    sortable=True,\n    formatter=lambda x: f'&lt;a href=\"{x}\" target=\"_blank\"&gt;\u67e5\u770b\u6587\u4ef6&lt;/a&gt;' if x else ''\n)\n</code></pre>"},{"location":"zh/components/table_field/#_4","title":"\u5f00\u5173\u7ec4\u4ef6\u914d\u7f6e","text":"<p>\u7528\u4e8e\u5e03\u5c14\u503c\u5b57\u6bb5\u7684\u5f00\u5173\u663e\u793a\uff1a</p> <ul> <li> <p><code>labels</code>: \u663e\u793a\u6587\u672c\u914d\u7f6e</p> <ul> <li>\u7c7b\u578b: <code>Dict[bool, str]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u5f00\u5173\u4e0d\u540c\u72b6\u6001\u663e\u793a\u7684\u6587\u672c</li> </ul> </li> <li> <p><code>choices</code>: \u503c\u6620\u5c04\u914d\u7f6e</p> <ul> <li>\u7c7b\u578b: <code>Dict[bool, Any]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u5f00\u5173\u72b6\u6001\u5bf9\u5e94\u7684\u5b9e\u9645\u503c</li> </ul> </li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>TableField(\n    \"push_to_customer_done\",\n    label=\"\u5904\u7406\u60c5\u51b5\",\n    display_type=DisplayType.SWITCH,\n    editable=True,\n    labels={True: \"\u5df2\u5904\u7406\", False: \"\u672a\u5904\u7406\"},\n    choices={True: True, False: False}\n)\n</code></pre>"},{"location":"zh/components/table_field/#_5","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>table_fields = [\n    # \u4e3b\u952e\u5b57\u6bb5\uff08\u901a\u5e38\u9690\u85cf\uff09\n    TableField(\n        \"id\", \n        label=\"ID\", \n        display_type=DisplayType.TEXT, \n        editable=True, \n        hidden=True\n    ),\n\n    # \u5173\u8054\u5b57\u6bb5\n    TableField(\n        \"US_Trademark_mark_name\",\n        label=\"\u5546\u6807\",\n        related_model=US_Trademark,\n        related_key=\"trademark_id\",\n        sortable=True\n    ),\n\n    # \u666e\u901a\u6587\u672c\u5b57\u6bb5\n    TableField(\n        \"document_description\", \n        label=\"\u6587\u6863\u63cf\u8ff0\", \n        display_type=DisplayType.TEXT, \n        sortable=True, \n        formatter=lambda x: x\n    ),\n\n    # \u65e5\u671f\u65f6\u95f4\u5b57\u6bb5\n    TableField(\n        \"create_mail_date\", \n        label=\"\u521b\u5efa\u65f6\u95f4\", \n        display_type=DisplayType.DATETIME, \n        sortable=True, \n        formatter=lambda x: x.strftime('%Y-%m-%d') if x else ''\n    ),\n\n    # \u94fe\u63a5\u5b57\u6bb5\n    TableField(\n        \"document_link\", \n        label=\"\u6587\u6863\u94fe\u63a5\", \n        display_type=DisplayType.LINK,\n        formatter=lambda x: f'&lt;a href=\"{x}\" target=\"_blank\"&gt;\u67e5\u770b\u6587\u4ef6&lt;/a&gt;' if x else ''\n    ),\n\n    # \u5f00\u5173\u5b57\u6bb5\n    TableField(\n        \"push_to_customer_done\", \n        label=\"\u5904\u7406\u60c5\u51b5\",\n        display_type=DisplayType.SWITCH,\n        editable=True,\n        labels={True: \"\u5df2\u5904\u7406\", False: \"\u672a\u5904\u7406\"},\n        choices={True: True, False: False}\n    )\n]\n</code></pre>"},{"location":"zh/hooks/add_hook/","title":"\u6dfb\u52a0\u94a9\u5b50\u51fd\u6570","text":""},{"location":"zh/hooks/add_hook/#_2","title":"\u6982\u8ff0","text":"<p>\u6dfb\u52a0\u94a9\u5b50\u51fd\u6570\u5141\u8bb8\u60a8\u5728\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u81ea\u5b9a\u4e49\u6dfb\u52a0\u64cd\u4f5c\u7684\u5904\u7406\u903b\u8f91\u3002\u901a\u8fc7\u91cd\u5199<code>handle_add</code>\u65b9\u6cd5,\u60a8\u53ef\u4ee5:</p> <ul> <li>\u5728\u4fdd\u5b58\u524d\u540e\u6dfb\u52a0\u81ea\u5b9a\u4e49\u4e1a\u52a1\u903b\u8f91</li> <li>\u4fee\u6539\u8981\u4fdd\u5b58\u7684\u6570\u636e</li> <li>\u6dfb\u52a0\u989d\u5916\u7684\u5b57\u6bb5\u8bbe\u7f6e</li> <li>\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u9a8c\u8bc1\u903b\u8f91</li> </ul>"},{"location":"zh/hooks/add_hook/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>\u5728\u60a8\u7684\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u91cd\u5199<code>handle_add</code>\u65b9\u6cd5:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_add(self, request: Request, data: dict) -&gt; tuple[bool, str]:\n        \"\"\"\n        \u5904\u7406\u6dfb\u52a0\u64cd\u4f5c\u7684\u94a9\u5b50\u65b9\u6cd5\n        Args:\n            request: Request\u5bf9\u8c61\n            data: \u6dfb\u52a0\u7684\u6570\u636e\n        Returns:\n            tuple[bool, str]: (\u662f\u5426\u6210\u529f, \u6d88\u606f)\n        \"\"\"\n        try:\n            # \u5904\u7406\u8868\u5355\u6570\u636e\n            processed_data = await self.process_form_data(data)\n\n            # \u5728\u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u903b\u8f91\n            # \u4f8b\u5982\uff1a\u6dfb\u52a0\u521b\u5efa\u65f6\u95f4\n            processed_data['created_at'] = datetime.now()\n\n            # \u521b\u5efa\u5bf9\u8c61\n            obj = await self.model.create(**processed_data)\n\n            # \u8fd9\u91cc\u53ef\u4ee5\u8fdb\ufffd\ufffd\u5176\u4ed6\u64cd\u4f5c\uff0c\u6bd4\u5982\uff1a\n            # - \u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7\n            # - \u53d1\u9001\u901a\u77e5\n            # - \u89e6\u53d1\u5176\u4ed6\u4e1a\u52a1\u6d41\u7a0b\n\n            return True, \"\u521b\u5efa\u6210\u529f\"\n\n        except Exception as e:\n            print(f\"\u6dfb\u52a0\u5904\u7406\u9519\u8bef: {str(e)}\")\n            return False, f\"\u521b\u5efa\u5931\u8d25: {str(e)}\"\n</code></pre>"},{"location":"zh/hooks/add_hook/#_4","title":"\u53c2\u6570\u8bf4\u660e","text":"<ul> <li><code>request</code>: Robyn\u7684Request\u5bf9\u8c61,\u5305\u542b\u5f53\u524d\u8bf7\u6c42\u7684\u6240\u6709\u4fe1\u606f</li> <li><code>data</code>: \u5305\u542b\u6dfb\u52a0\u6570\u636e\u7684\u5b57\u5178,\u952e\u4e3a\u5b57\u6bb5\u540d,\u503c\u4e3a\u5b57\u6bb5\u503c</li> </ul>"},{"location":"zh/hooks/add_hook/#_5","title":"\u8fd4\u56de\u503c","text":"<p>\u8be5\u65b9\u6cd5\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4,\u5305\u542b:</p> <ul> <li><code>bool</code>: \u8868\u793a\u64cd\u4f5c\u662f\u5426\u6210\u529f</li> <li><code>str</code>: \u64cd\u4f5c\u7ed3\u679c\u6d88\u606f</li> </ul>"},{"location":"zh/hooks/batch_delete_hook/","title":"\u6279\u91cf\u5220\u9664\u94a9\u5b50\u51fd\u6570","text":""},{"location":"zh/hooks/batch_delete_hook/#_2","title":"\u6982\u8ff0","text":"<p>\u6279\u91cf\u5220\u9664\u94a9\u5b50\u51fd\u6570\u5141\u8bb8\u60a8\u5728\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u81ea\u5b9a\u4e49\u6279\u91cf\u5220\u9664\u64cd\u4f5c\u7684\u5904\u7406\u903b\u8f91\u3002\u901a\u8fc7\u91cd\u5199<code>handle_batch_delete</code>\u65b9\u6cd5,\u60a8\u53ef\u4ee5:</p> <ul> <li>\u5b9e\u73b0\u6279\u91cf\u8f6f\u5220\u9664</li> <li>\u6dfb\u52a0\u5220\u9664\u524d\u7684\u6570\u636e\u9a8c\u8bc1</li> <li>\u6279\u91cf\u5904\u7406\u5173\u8054\u6570\u636e</li> <li>\u8bb0\u5f55\u6279\u91cf\u5220\u9664\u65e5\u5fd7</li> </ul>"},{"location":"zh/hooks/batch_delete_hook/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>\u5728\u60a8\u7684\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u91cd\u5199<code>handle_batch_delete</code>\u65b9\u6cd5:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_batch_delete(self, request: Request, ids: list) -&gt; tuple[bool, str, int]:\n        \"\"\"\n        \u5904\u7406\u6279\u91cf\u5220\u9664\u64cd\u4f5c\u7684\u94a9\u5b50\u65b9\u6cd5\n        Args:\n            request: Request\u5bf9\u8c61\n            ids: \u8981\u5220\u9664\u7684\u8bb0\u5f55ID\u5217\u8868\n        Returns:\n            tuple[bool, str, int]: (\u662f\u5426\u6210\u529f, \u6d88\u606f, \u5220\u9664\u6210\u529f\u6570\u91cf)\n        \"\"\"\n        try:\n            deleted_count = 0\n            for id in ids:\n                try:\n                    obj = await self.get_object(id)\n                    if obj:\n                        # \u5728\u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u903b\u8f91\n                        # \u4f8b\u5982\uff1a\u8f6f\u5220\u9664\n                        obj.is_deleted = True\n                        await obj.save()\n\n                        # \u6216\u8005\u6267\u884c\u7269\u7406\u5220\u9664\n                        # await obj.delete()\n\n                        # \u8fd9\u91cc\u53ef\u4ee5\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\uff0c\u6bd4\u5982\uff1a\n                        # - \u68c0\u67e5\u5173\u8054\u6570\u636e\n                        # - \u8bb0\u5f55\u5220\u9664\u65e5\u5fd7\n                        # - \u53d1\u9001\u901a\u77e5\n\n                        deleted_count += 1\n                except Exception as e:\n                    print(f\"\u5220\u9664\u8bb0\u5f55 {id} \u5931\u8d25: {str(e)}\")\n                    continue\n\n            if deleted_count &gt; 0:\n                return True, f\"\u6210\u529f\u5220\u9664 {deleted_count} \u6761\u8bb0\u5f55\", deleted_count\n            return False, \"\u6ca1\u6709\u8bb0\u5f55\u88ab\u5220\u9664\", 0\n\n        except Exception as e:\n            print(f\"\u6279\u91cf\u5220\u9664\u5904\u7406\u9519\u8bef: {str(e)}\")\n            return False, f\"\u6279\u91cf\u5220\u9664\u5931\u8d25: {str(e)}\", 0\n</code></pre>"},{"location":"zh/hooks/batch_delete_hook/#_4","title":"\u53c2\u6570\u8bf4\u660e","text":"<ul> <li><code>request</code>: Robyn\u7684Request\u5bf9\u8c61,\u5305\u542b\u5f53\u524d\u8bf7\u6c42\u7684\u6240\u6709\u4fe1\u606f</li> <li><code>ids</code>: \u8981\u5220\u9664\u7684\u8bb0\u5f55ID\u5217\u8868</li> </ul>"},{"location":"zh/hooks/batch_delete_hook/#_5","title":"\u8fd4\u56de\u503c","text":"<p>\u8be5\u65b9\u6cd5\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4,\u5305\u542b:</p> <ul> <li><code>bool</code>: \u8868\u793a\u64cd\u4f5c\u662f\u5426\u6210\u529f</li> <li><code>str</code>: \u64cd\u4f5c\u7ed3\u679c\u6d88\u606f</li> <li><code>int</code>: \u6210\u529f\u5220\u9664\u7684\u8bb0\u5f55\u6570\u91cf </li> </ul>"},{"location":"zh/hooks/delete_hook/","title":"\u5220\u9664\u94a9\u5b50\u51fd\u6570","text":""},{"location":"zh/hooks/delete_hook/#_2","title":"\u6982\u8ff0","text":"<p>\u5220\u9664\u94a9\u5b50\u51fd\u6570\u5141\u8bb8\u60a8\u5728\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u81ea\u5b9a\u4e49\u5220\u9664\u64cd\u4f5c\u7684\u5904\u7406\u903b\u8f91\u3002\u901a\u8fc7\u91cd\u5199<code>handle_delete</code>\u65b9\u6cd5,\u60a8\u53ef\u4ee5:</p> <ul> <li>\u5b9e\u73b0\u8f6f\u5220\u9664</li> <li>\u6dfb\u52a0\u5220\u9664\u524d\u7684\u6570\u636e\u9a8c\u8bc1</li> <li>\u5904\u7406\u5173\u8054\u6570\u636e</li> <li>\u8bb0\u5f55\u5220\u9664\u65e5\u5fd7</li> </ul>"},{"location":"zh/hooks/delete_hook/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>\u5728\u60a8\u7684\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u91cd\u5199<code>handle_delete</code>\u65b9\u6cd5:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_delete(self, request: Request, object_id: str) -&gt; tuple[bool, str]:\n        \"\"\"\n        \u5904\u7406\u5220\u9664\u64cd\u4f5c\u7684\u94a9\u5b50\u65b9\u6cd5\n        Args:\n            request: Request\u5bf9\u8c61\n            object_id: \u8bb0\u5f55ID\n        Returns:\n            tuple[bool, str]: (\u662f\u5426\u6210\u529f, \u6d88\u606f)\n        \"\"\"\n        try:\n            obj = await self.get_object(object_id)\n            if not obj:\n                return False, \"\u8bb0\u5f55\u4e0d\u5b58\u5728\"\n\n            # \u5728\u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u903b\u8f91\n            # \u4f8b\u5982\uff1a\u8f6f\u5220\u9664\n            obj.is_deleted = True\n            await obj.save()\n\n            # \u6216\u8005\u6267\u884c\u7269\u7406\u5220\u9664\n            # await obj.delete()\n\n            # \u8fd9\u91cc\u53ef\u4ee5\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\uff0c\u6bd4\u5982\uff1a\n            # - \u68c0\u67e5\u5173\u8054\u6570\u636e\n            # - \u8bb0\u5f55\u5220\u9664\u65e5\u5fd7\n            # - \u53d1\u9001\u901a\u77e5\n\n            return True, \"\u5220\u9664\u6210\u529f\"\n\n        except Exception as e:\n            print(f\"\u5220\u9664\u5904\u7406\u9519\u8bef: {str(e)}\")\n            return False, f\"\u5220\u9664\u5931\u8d25: {str(e)}\"\n</code></pre>"},{"location":"zh/hooks/delete_hook/#_4","title":"\u53c2\u6570\u8bf4\u660e","text":"<ul> <li><code>request</code>: Robyn\u7684Request\u5bf9\u8c61,\u5305\u542b\u5f53\u524d\u8bf7\u6c42\u7684\u6240\u6709\u4fe1\u606f</li> <li><code>object_id</code>: \u8981\u5220\u9664\u7684\u8bb0\u5f55ID</li> </ul>"},{"location":"zh/hooks/delete_hook/#_5","title":"\u8fd4\u56de\u503c","text":"<p>\u8be5\u65b9\u6cd5\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4,\u5305\u542b:</p> <ul> <li><code>bool</code>: \u8868\u793a\u64cd\u4f5c\u662f\u5426\u6210\u529f</li> <li><code>str</code>: \u64cd\u4f5c\u7ed3\u679c\u6d88\u606f </li> </ul>"},{"location":"zh/hooks/edit_hook/","title":"\u7f16\u8f91\u94a9\u5b50\u51fd\u6570","text":""},{"location":"zh/hooks/edit_hook/#_2","title":"\u6982\u8ff0","text":"<p>\u7f16\u8f91\u94a9\u5b50\u51fd\u6570\u5141\u8bb8\u60a8\u5728\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u81ea\u5b9a\u4e49\u7f16\u8f91\u64cd\u4f5c\u7684\u5904\u7406\u903b\u8f91\u3002\u901a\u8fc7\u91cd\u5199<code>handle_edit</code>\u65b9\u6cd5,\u60a8\u53ef\u4ee5:</p> <ul> <li>\u5728\u4fdd\u5b58\u524d\u540e\u6dfb\u52a0\u81ea\u5b9a\u4e49\u4e1a\u52a1\u903b\u8f91</li> <li>\u4fee\u6539\u8981\u4fdd\u5b58\u7684\u6570\u636e</li> <li>\u6dfb\u52a0\u989d\u5916\u7684\u5b57\u6bb5\u66f4\u65b0</li> <li>\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u9a8c\u8bc1\u903b\u8f91</li> </ul>"},{"location":"zh/hooks/edit_hook/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>\u5728\u60a8\u7684\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u91cd\u5199<code>handle_edit</code>\u65b9\u6cd5:</p> <pre><code>python\n\nclass YourModelAdmin(ModelAdmin):\n    async def handle_edit(self, request: Request,\n             object_id: str, data: dict) -&gt; tuple[bool, str]:\n    \"\"\"\n    \u5904\u7406\u7f16\u8f91\u64cd\u4f5c\u7684\u94a9\u5b50\u65b9\u6cd5\n    Args:\n    request: Request\u5bf9\u8c61\n    object_id: \u8bb0\u5f55ID\n    data: \u7f16\u8f91\u7684\u6570\u636e\n    Returns:\n    tuple[bool, str]: (\u662f\u5426\u6210\u529f, \u6d88\u606f)\n    \"\"\"\n        try:\n        # \u83b7\u53d6\u539f\u59cb\u5bf9\u8c61\n            obj = await self.get_object(object_id)\n            if not obj:\n                return False, \"\u8bb0\u5f55\u4e0d\u5b58\u5728\"\n            # \u8c03\u7528process_form_data\u65b9\u6cd5\u5904\u7406\u8868\u5355\u6570\u636e\n            processed_data = await self.process_form_data(data)\n            # \u66f4\u65b0\u5bf9\u8c61\n            for field, value in processed_data.items():\n                setattr(obj, field, value)\n            #  \u8fd9\u91cc\u53ef\u4ee5\u505a\u522b\u7684\u5904\u7406\uff0c\u6bd4\u5982\u5199\u65e5\u5fd7\u6216\u8005\u7ed9\u6570\u636e\u5e93\u522b\u7684\u5b57\u6bb5\u8bbe\u7f6e\u503c\n            # \u4f8b\u5982\uff1a setattr(obj, \"finish_time\", datetime.now())\n            await obj.save()\n            return True, \"\u66f4\u65b0\u6210\u529f\"\n        except Exception as e:\n            print(f\"\u7f16\u8f91\u5904\u7406\u9519\u8bef: {str(e)}\")\n            return False, f\"\u66f4\u65b0\u5931\u8d25: {str(e)}\"\n</code></pre>"},{"location":"zh/hooks/edit_hook/#_4","title":"\u53c2\u6570\u8bf4\u660e","text":"<ul> <li><code>request</code>: Robyn\u7684Request\u5bf9\u8c61,\u5305\u542b\u5f53\u524d\u8bf7\u6c42\u7684\u6240\u6709\u4fe1\u606f</li> <li><code>object_id</code>: \u8981\u7f16\u8f91\u7684\u8bb0\u5f55ID</li> <li><code>data</code>: \u5305\u542b\u7f16\u8f91\u6570\u636e\u7684\u5b57\u5178,\u952e\u4e3a\u5b57\u6bb5\u540d,\u503c\u4e3a\u5b57\u6bb5\u503c</li> </ul>"},{"location":"zh/hooks/edit_hook/#_5","title":"\u8fd4\u56de\u503c","text":"<p>\u8be5\u65b9\u6cd5\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4,\u5305\u542b:</p> <ul> <li><code>bool</code>: \u8868\u793a\u64cd\u4f5c\u662f\u5426\u6210\u529f</li> <li><code>str</code>: \u64cd\u4f5c\u7ed3\u679c\u6d88\u606f</li> </ul>"},{"location":"zh/hooks/query_hook/","title":"\u67e5\u8be2\u94a9\u5b50\u51fd\u6570","text":""},{"location":"zh/hooks/query_hook/#_2","title":"\u6982\u8ff0","text":"<p>\u67e5\u8be2\u94a9\u5b50\u51fd\u6570\u5141\u8bb8\u60a8\u5728\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u81ea\u5b9a\u4e49\u6570\u636e\u67e5\u8be2\u7684\u5904\u7406\u903b\u8f91\u3002\u901a\u8fc7\u91cd\u5199<code>handle_query</code>\u65b9\u6cd5,\u60a8\u53ef\u4ee5:</p> <ul> <li>\u81ea\u5b9a\u4e49\u67e5\u8be2\u6761\u4ef6</li> <li>\u6dfb\u52a0\u6570\u636e\u8fc7\u6ee4</li> <li>\u81ea\u5b9a\u4e49\u6392\u5e8f\u903b\u8f91</li> <li>\u5b9e\u73b0\u6570\u636e\u6743\u9650\u63a7\u5236</li> </ul>"},{"location":"zh/hooks/query_hook/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>\u5728\u60a8\u7684\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u91cd\u5199<code>handle_query</code>\u65b9\u6cd5:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_query(self, request: Request, params: dict) -&gt; tuple[QuerySet, int]:\n        \"\"\"\n        \u5904\u7406\u6570\u636e\u67e5\u8be2\u7684\u94a9\u5b50\u65b9\u6cd5\n        Args:\n            request: Request\u5bf9\u8c61\n            params: \u67e5\u8be2\u53c2\u6570\u5b57\u5178,\u5305\u542b:\n                - limit: \u6bcf\u9875\u8bb0\u5f55\u6570\n                - offset: \u504f\u79fb\u91cf\n                - search: \u641c\u7d22\u5173\u952e\u5b57\n                - sort: \u6392\u5e8f\u5b57\u6bb5\n                - order: \u6392\u5e8f\u65b9\u5f0f(asc/desc)\n                - \u5176\u4ed6\u8fc7\u6ee4\u53c2\u6570\n        Returns:\n            tuple[QuerySet, int]: (\u67e5\u8be2\u7ed3\u679c\u96c6, \u603b\u8bb0\u5f55\u6570)\n        \"\"\"\n        try:\n            # \u83b7\u53d6\u57fa\u7840\u67e5\u8be2\u96c6\n            queryset = await self.get_queryset(request, params)\n\n            # \u5728\u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u903b\u8f91\n            # \u4f8b\u5982\uff1a\u6570\u636e\u6743\u9650\u63a7\u5236\n            if not request.user.is_superuser:\n                queryset = queryset.filter(owner=request.user)\n\n            # \u81ea\u5b9a\u4e49\u8fc7\u6ee4\u6761\u4ef6\n            if params.get('status'):\n                queryset = queryset.filter(status=params['status'])\n\n            # \u5904\u7406\u6392\u5e8f\n            if params.get('sort'):\n                order_by = f\"{'-' if params['order'] == 'desc' else ''}{params['sort']}\"\n                queryset = queryset.order_by(order_by)\n            elif self.default_ordering:\n                queryset = queryset.order_by(*self.default_ordering)\n\n            # \u83b7\u53d6\u603b\u8bb0\u5f55\u6570\n            total = await queryset.count()\n\n            # \u5206\u9875\n            queryset = queryset.offset(params['offset']).limit(params['limit'])\n\n            return queryset, total\n\n        except Exception as e:\n            print(f\"\u67e5\u8be2\u5904\u7406\u9519\u8bef: {str(e)}\")\n            return self.model.all(), 0\n</code></pre>"},{"location":"zh/hooks/query_hook/#_4","title":"\u53c2\u6570\u8bf4\u660e","text":"<ul> <li><code>request</code>: Robyn\u7684Request\u5bf9\u8c61,\u5305\u542b\u5f53\u524d\u8bf7\u6c42\u7684\u6240\u6709\u4fe1\u606f</li> <li><code>params</code>: \u67e5\u8be2\u53c2\u6570\u5b57\u5178,\u5305\u542b\u5206\u9875\u3001\u6392\u5e8f\u3001\u641c\u7d22\u7b49\u53c2\u6570</li> </ul>"},{"location":"zh/hooks/query_hook/#_5","title":"\u8fd4\u56de\u503c","text":"<p>\u8be5\u65b9\u6cd5\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4,\u5305\u542b:</p> <ul> <li><code>QuerySet</code>: \u67e5\u8be2\u7ed3\u679c\u96c6</li> <li><code>int</code>: \u603b\u8bb0\u5f55\u6570 </li> </ul>"},{"location":"en/en/","title":"QC Robyn Admin","text":"<p>QC Robyn Admin is a powerful admin interface built on top of the Robyn framework and bootstrap, providing rich components and features to help quickly build admin backends.</p>"},{"location":"en/en/#key-features","title":"Key Features","text":"<ul> <li>\ud83d\ude80 Quick Setup: Generate complete admin interface with simple configurations</li> <li>\ud83d\udcca Table Component: Support sorting, filtering, searching, and custom formatting</li> <li>\ud83d\udcdd Form Component: Support various field types including text, date, select, etc.</li> <li>\ud83d\udd0d Search &amp; Filter: Support complex search and filter conditions</li> <li>\ud83d\udd17 Related Fields: Handle relationships between models</li> <li>\ud83d\udd12 Permissions: Fine-grained permission management system</li> <li>\ud83d\udcdd Hooks: Support custom hooks for admin operations</li> </ul>"},{"location":"en/en/#installation","title":"Installation","text":""},{"location":"en/en/api/model_admin_manager/","title":"Authorization Management","text":"<p>Robyn Admin provides a complete RBAC authorization management system, including user management, role management, and permission control.</p>"},{"location":"en/en/api/model_admin_manager/#initial-account","title":"Initial Account","text":"<p>The system automatically creates a super admin account during initialization: - Username: admin - Password: admin</p> <p>It is recommended to change the password immediately after first login.</p>"},{"location":"en/en/api/model_admin_manager/#user-management","title":"User Management","text":"<p>In the user management interface, you can: - Create new users - Edit user information (username, password, email, etc.) - Set user status (enable/disable) - Assign user roles</p> <p></p>"},{"location":"en/en/api/model_admin_manager/#role-management","title":"Role Management","text":"<p>Roles are collections of permissions. In the role management interface, you can: - Create new roles - Edit role information - Configure role can access routes</p> <p></p>"},{"location":"en/en/api/model_admin_manager/#user-for-role","title":"User For Role","text":"<p>edit user for role</p> <p></p>"},{"location":"en/en/components/filter_field/","title":"FilterField Component","text":"<p>FilterField is a component for configuring data list filtering conditions, supporting various filter types and data processing capabilities.</p> <p>Configuration is done in the filter_fields of AdminModel.</p>"},{"location":"en/en/components/filter_field/#basic-filter-types","title":"Basic Filter Types","text":""},{"location":"en/en/components/filter_field/#inputfilter","title":"InputFilter","text":"<p>Used for text search filtering:</p> <pre><code>InputFilter(\n    name=\"username\",           # Field name\n    label=\"Username\",          # Display label\n    placeholder=\"Enter username\", # Placeholder text\n    operator=\"icontains\"       # Filter operator\n)\n</code></pre>"},{"location":"en/en/components/filter_field/#selectfilter","title":"SelectFilter","text":"<p>Used for option filtering:</p> <pre><code>SelectFilter(\n    name=\"status\",\n    label=\"Status\",\n    choices={                  # Options configuration\n        True: \"Enabled\",\n        False: \"Disabled\"\n    },\n    multiple=False            # Whether to support multiple selection\n)\n</code></pre>"},{"location":"en/en/components/filter_field/#daterangefilter","title":"DateRangeFilter","text":"<p>Used for date range filtering:</p> <pre><code>DateRangeFilter(\n    name=\"create_time\",\n    label=\"Create Time\"\n)\n</code></pre>"},{"location":"en/en/components/filter_field/#numberrangefilter","title":"NumberRangeFilter","text":"<p>Used for numeric range filtering:</p> <pre><code>NumberRangeFilter(\n    name=\"price\",\n    label=\"Price\"\n)\n</code></pre>"},{"location":"en/en/components/filter_field/#booleanfilter","title":"BooleanFilter","text":"<p>Used for boolean value filtering:</p> <pre><code>BooleanFilter(\n    name=\"is_active\",\n    label=\"Active Status\"\n)\n</code></pre>"},{"location":"en/en/components/filter_field/#related-model-filtering","title":"Related Model Filtering","text":"<p>Supports filtering on related model fields:</p> <pre><code>InputFilter(\n    name=\"Category_name\",      # Format: RelatedModelName_fieldname\n    label=\"Category Name\",\n    related_model=Category,    # Related model class\n    related_key=\"category_id\"  # Foreign key field name\n)\n</code></pre>"},{"location":"en/en/components/filter_field/#complete-example","title":"Complete Example","text":"<pre><code>filter_fields = [\n    # Text input filter\n    InputFilter(\n        name=\"username\",\n        label=\"Username\",\n        placeholder=\"Search by username\"\n    ),\n\n    # Select filter\n    SelectFilter(\n        name=\"status\",\n        label=\"Status\",\n        choices={\n            1: \"Normal\",\n            0: \"Disabled\",\n            -1: \"Deleted\"\n        }\n    ),\n\n    # Date range filter\n    DateRangeFilter(\n        name=\"create_time\",\n        label=\"Create Time\"\n    ),\n\n    # Number range filter\n    NumberRangeFilter(\n        name=\"price\",\n        label=\"Price Range\"\n    ),\n\n    # Boolean filter\n    BooleanFilter(\n        name=\"is_active\",\n        label=\"Active Status\"\n    ),\n\n    # Related model filter\n    InputFilter(\n        name=\"Category_name\",\n        label=\"Category Name\",\n        related_model=Category,\n        related_key=\"category_id\"\n    )\n]\n</code></pre>"},{"location":"en/en/components/filter_field/#important-parameters","title":"Important Parameters","text":""},{"location":"en/en/components/filter_field/#basic-parameters","title":"Basic Parameters","text":"<ul> <li> <p><code>name</code>: Filter field name</p> <ul> <li>Type: <code>str</code></li> <li>Description: Corresponds to model field name, format for related models is \"ModelName_fieldname\"</li> </ul> </li> <li> <p><code>label</code>: Display label</p> <ul> <li>Type: <code>str</code></li> <li>Description: Display name for the filter</li> </ul> </li> <li> <p><code>filter_type</code>: Filter type</p> <ul> <li>Type: <code>FilterType</code></li> <li>Available values:<ul> <li><code>INPUT</code>: Input box</li> <li><code>SELECT</code>: Dropdown select</li> <li><code>DATE_RANGE</code>: Date range</li> <li><code>NUMBER_RANGE</code>: Number range</li> <li><code>BOOLEAN</code>: Boolean select</li> </ul> </li> </ul> </li> </ul>"},{"location":"en/en/components/filter_field/#advanced-parameters","title":"Advanced Parameters","text":"<ul> <li> <p><code>choices</code>: Options configuration (for SelectFilter)</p> <ul> <li>Type: <code>Dict[Any, str]</code></li> <li>Description: Defines the options and corresponding values for the select box</li> </ul> </li> <li> <p><code>multiple</code>: Multiple selection support (for SelectFilter)</p> <ul> <li>Type: <code>bool</code></li> <li>Default value: <code>False</code></li> </ul> </li> <li> <p><code>placeholder</code>: Placeholder text</p> <ul> <li>Type: <code>str</code></li> <li>Description: Hint text for input box</li> </ul> </li> <li> <p><code>operator</code>: Filter operator</p> <ul> <li>Type: <code>str</code></li> <li>Default value: <code>icontains</code></li> <li>Description: Defines how the filter condition compares values</li> </ul> </li> </ul>"},{"location":"en/en/components/filter_field/#important-notes","title":"Important Notes","text":"<ol> <li> <p>Related Model Filtering</p> <ul> <li>Field name must follow the \"ModelName_fieldname\" format</li> <li>Correct configuration of related_model and related_key is required</li> </ul> </li> <li> <p>Select Filter</p> <ul> <li>In choices dictionary, key is the actual value, value is the display text</li> <li>multiple=True enables multiple selection(to do)</li> </ul> </li> <li> <p>Range Filters</p> <ul> <li>DateRangeFilter provides date picker</li> <li>NumberRangeFilter provides numeric input boxes </li> </ul> </li> </ol>"},{"location":"en/en/components/filter_field/#advanced-usage","title":"Advanced Usage","text":""},{"location":"en/en/components/filter_field/#dynamic-filter-options","title":"Dynamic Filter Options","text":"<p>In some scenarios, we need to dynamically fetch filter options from the database, such as status lists. This can be achieved by overriding the <code>get_filter_fields</code> method:</p> <pre><code>class TrademarkAdmin(AdminModel):\n    async def get_status_choices(self) -&gt; Dict[str, str]:\n        \"\"\"Get status options\"\"\"\n        # Fetch all unique status values from database\n        status_choices = await US_Trademark.all().values_list('status', flat=True)\n        # Convert to options dictionary\n        return {status: status for status in status_choices if status}\n\n    async def get_filter_fields(self) -&gt; List[FilterField]:\n        \"\"\"Get filter field configurations\"\"\"\n        # Dynamically get status options\n        status_choices = await self.get_status_choices()        \n\n        filters = [\n            # Regular text search filter\n            InputFilter(\n                \"mark_name\", \n                label=\"Trademark Name\", \n                placeholder=\"Enter trademark name\",\n                operator=\"icontains\"\n            ),\n            # Dropdown filter with dynamic options\n            SelectFilter(\n                \"status\", \n                label=\"Status\",  \n                choices=status_choices,\n            )\n        ]\n        return filters\n</code></pre> <p>This approach is particularly useful in scenarios where: - Filter options need to be dynamically fetched from database - Filter options need to be generated based on user permissions - Filter configurations depend on other data</p> <p>By overriding the <code>get_filter_fields</code> method, we can: 1. Implement dynamic filter options 2. Return different filter configurations based on conditions 3. Use async operations in filter configurations</p>"},{"location":"en/en/components/form_field/","title":"FormField Component","text":"<p>FormField is a core component for configuring form fields, supporting various input types, data processing, and validation functionalities.</p> <p>Configuration is done in the form_fields and add_form_fields of AdminModel</p>"},{"location":"en/en/components/form_field/#basic-parameters","title":"Basic Parameters","text":"<ul> <li> <p><code>name</code>: Field name</p> <ul> <li>Type: <code>str</code></li> <li>Description: Corresponds to the model field name, used for form submission</li> </ul> </li> <li> <p><code>label</code>: Display label</p> <ul> <li>Type: <code>str</code></li> <li>Description: Display name for the form field</li> </ul> </li> <li> <p><code>field_type</code>: Field type</p> <ul> <li>Type: <code>DisplayType</code></li> <li>Available values:<ul> <li><code>TEXT</code>: Text input box</li> <li><code>EMAIL</code>: Email input box</li> <li><code>PASSWORD</code>: Password input box</li> <li><code>DATE</code>: Date picker</li> <li><code>DATETIME</code>: Date time picker</li> <li><code>SELECT</code>: Dropdown select box</li> <li><code>SWITCH</code>: Switch component</li> <li><code>FILE_UPLOAD</code>: File upload</li> </ul> </li> <li>Description: Determines the input type of the form field</li> </ul> </li> <li> <p><code>required</code>: Required field</p> <ul> <li>Type: <code>bool</code></li> <li>Default value: <code>False</code></li> <li>Description: Whether the field is required</li> </ul> </li> <li> <p><code>upload_path</code>: File upload path</p> <ul> <li>Type: <code>str</code></li> <li>Default value: <code>None</code></li> <li>Description: The path for file upload</li> </ul> </li> <li> <p><code>max_size</code>: File upload max size</p> <ul> <li>Type: <code>int</code></li> <li>Default value: <code>None</code></li> <li>Description: The max size for file upload (unit: bytes)</li> </ul> </li> </ul>"},{"location":"en/en/components/form_field/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"en/en/components/form_field/#select-configuration","title":"Select Configuration","text":"<p>For configuring dropdown select options:</p> <ul> <li><code>choices</code>: Options configuration<ul> <li>Type: <code>Dict[str, Any]</code></li> <li>Description: Defines the options and corresponding values for the select box</li> </ul> </li> </ul> <p>Example:</p> <pre><code>FormField(\n    \"is_active\",\n    label=\"Status\",\n    field_type=DisplayType.SELECT,\n    choices={\"Active\": True, \"Disabled\": False}\n)\n</code></pre>"},{"location":"en/en/components/form_field/#data-processor","title":"Data Processor","text":"<p>For processing field values during form submission:</p> <ul> <li><code>processor</code>: Processing function<ul> <li>Type: <code>Callable[[Any], Any]</code></li> <li>Description: Processes field value before saving</li> </ul> </li> </ul> <p>Example:</p> <pre><code>FormField(\n    \"password\", \n    label=\"Password\", \n    field_type=DisplayType.PASSWORD,\n    required=True,\n    processor=lambda x: AdminUser.hash_password(x)  # Password encryption\n)\n</code></pre>"},{"location":"en/en/components/form_field/#field-type-examples","title":"Field Type Examples","text":""},{"location":"en/en/components/form_field/#text-input","title":"Text Input","text":"<pre><code>FormField(\n    \"username\",\n    label=\"Username\",\n    required=True\n)\n</code></pre>"},{"location":"en/en/components/form_field/#email-input","title":"Email Input","text":"<pre><code>FormField(\n    \"email\",\n    label=\"Email\",\n    field_type=DisplayType.EMAIL,\n    required=True\n)\n</code></pre>"},{"location":"en/en/components/form_field/#password-input","title":"Password Input","text":"<pre><code>FormField(\n    \"password\",\n    label=\"Password\",\n    field_type=DisplayType.PASSWORD,\n    required=True\n)\n</code></pre>"},{"location":"en/en/components/form_field/#date-picker","title":"Date Picker","text":"<pre><code>FormField(\n    'create_at',\n    label=\"Birth Date\",\n    field_type=DisplayType.DATE\n)\n</code></pre>"},{"location":"en/en/components/form_field/#dropdown-select","title":"Dropdown Select","text":"<pre><code>FormField(\n    \"status\",\n    label=\"Status\",\n    field_type=DisplayType.SELECT,\n    choices={\n        \"Enabled\": True,\n        \"Disabled\": False\n    }\n)\n</code></pre>"},{"location":"en/en/components/form_field/#complete-example","title":"Complete Example","text":"<pre><code>form_fields = [\n    # Basic text field\n    FormField(\n        \"username\",\n        label=\"Username\",\n        required=True\n    ),\n\n    # Email field\n    FormField(\n        \"email\",\n        label=\"Email\",\n        field_type=DisplayType.EMAIL,\n        required=True\n    ),\n\n    # Password field (with processor)\n    FormField(\n        \"password\", \n        label=\"Password\", \n        field_type=DisplayType.PASSWORD,\n        required=True,\n        processor=lambda x: AdminUser.hash_password(x)\n    ),\n\n    # Phone field\n    FormField(\n        \"phone\",\n        label=\"Phone\",\n        field_type=DisplayType.TEXT,\n        required=True\n    ),\n\n    # Status select field\n    FormField(\n        \"is_active\",\n        label=\"Status\",\n        field_type=DisplayType.SELECT,\n        choices={\"Active\": True, \"Disabled\": False}\n    ),\n\n    # Date field\n    FormField(\n        'create_at',\n        label=\"Birth Date\",\n        field_type=DisplayType.DATE\n    )\n]\n</code></pre>"},{"location":"en/en/components/form_field/#important-notes","title":"Important Notes","text":"<ol> <li> <p>Field Types</p> <ul> <li>Choosing the appropriate <code>field_type</code> provides corresponding input validation</li> <li><code>EMAIL</code> type automatically validates email format</li> <li><code>DATE</code> and <code>DATETIME</code> provide date pickers</li> </ul> </li> <li> <p>Data Processing</p> <ul> <li><code>processor</code> functions execute before data saving</li> <li>Ensure processing functions return the correct data type</li> </ul> </li> <li> <p>Required Fields</p> <ul> <li>Fields with <code>required=True</code> are validated on the frontend</li> <li>Required fields are checked during form submission </li> </ul> </li> </ol>"},{"location":"en/en/components/model/","title":"ModelAdmin Class","text":"<p>ModelAdmin is the core class for configuring how models are displayed and managed in the admin interface. By inheriting and configuring ModelAdmin, you can customize display fields, filters, search options, and other features.</p>"},{"location":"en/en/components/model/#basic-usage","title":"Basic Usage","text":"<pre><code>from qc_robyn_admin.core import ModelAdmin, TableField, DisplayType\n\nclass MarkAdmin(ModelAdmin):\n    # \u663e\u793a\u540d\u79f0\n    verbose_name = \"\u5546\u6807\u67e5\u8be2\"\n\n    # \u83dc\u5355\u914d\u7f6e\n    menu_group = \"\u5546\u6807\u67e5\u8be2\"    # \u6240\u5c5e\u83dc\u5355\u7ec4\n    menu_icon = \"bi bi-people\" # Bootstrap \u56fe\u6807\n    menu_order = 1            # \u83dc\u5355\u6392\u5e8f\n\n    # \u529f\u80fd\u5f00\u5173\n    enable_edit = True       # \u5141\u8bb8\u7f16\u8f91\n    allow_add = True        # \u5141\u8bb8\u6dfb\u52a0\n    allow_delete = True     # \u5141\u8bb8\u5220\u9664\n    allow_export = True     # \u5141\u8bb8\u5bfc\u51fa\n    allow_import = True    # \u5141\u8bb8\u5bfc\u5165\n\n    # \u8868\u683c\u5b57\u6bb5\u914d\u7f6e\n    table_fields = [\n        TableField(\n            name=\"id\", label=\"ID\", display_type=DisplayType.TEXT, editable=False, hidden=True\n        ),\n        TableField(\n            \"xxx\", label=\"xxx\", display_type=DisplayType.TEXT, sortable=True, formatter=lambda x: str(x)\n        ),\n    ]\n    # \u9ed8\u8ba4\u6392\u5e8f\n    default_ordering = [\"-created_at\"]\n\n    import_fields = [\n        \"name\",\n        \"email\",\n        \"biography\"\n    ]\n...\n# Mark is tortoise-orm model\nadmin_site.register_model(Mark, MarkAdmin)\n</code></pre>"},{"location":"en/en/components/model/#properties","title":"Properties","text":""},{"location":"en/en/components/model/#basic-properties","title":"Basic Properties","text":"<ul> <li> <p><code>verbose_name</code>: Display name</p> <ul> <li>Type: <code>str</code></li> <li>Description: Model name displayed in the admin interface</li> </ul> </li> <li> <p><code>menu_group</code>: Menu group</p> <ul> <li>Type: <code>str</code></li> <li>Description: Group name where the model appears in the admin menu</li> </ul> </li> <li> <p><code>menu_icon</code>: Menu icon</p> <ul> <li>Type: <code>str</code></li> <li>Description: Bootstrap Icons class name</li> </ul> </li> <li> <p><code>menu_order</code>: Menu order</p> <ul> <li>Type: <code>int</code></li> <li>Description: Position in the menu group, smaller numbers appear first</li> </ul> </li> </ul>"},{"location":"en/en/components/model/#feature-controls","title":"Feature Controls","text":"<ul> <li> <p><code>enable_edit</code>: Enable editing</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>True</code></li> <li>Description: Whether to allow record editing</li> </ul> </li> <li> <p><code>allow_add</code>: Allow adding</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>True</code></li> <li>Description: Whether to show the add button</li> </ul> </li> <li> <p><code>allow_delete</code>: Allow deletion</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>True</code></li> <li>Description: Whether to allow record deletion</li> </ul> </li> <li> <p><code>allow_export</code>: Allow export</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>True</code></li> <li>Description: Whether to show the export button</li> </ul> </li> <li> <p><code>allow_import</code>: Allow import</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>True</code></li> <li>Description: Whether to show the import button</li> </ul> </li> </ul>"},{"location":"en/en/components/model/#field-configuration","title":"Field Configuration","text":"<ul> <li> <p><code>table_fields</code>: Table fields</p> <ul> <li>Type: <code>List[TableField]</code></li> <li>Description: Define fields and their configuration in the table, more details reading: TableField</li> </ul> </li> <li> <p><code>form_fields</code>: Form fields</p> <ul> <li>Type: <code>List[FormField]</code></li> <li>Description: Define fields and their configuration in the edit form, more details reading: FormField</li> </ul> </li> <li> <p><code>search_fields</code>: Search fields</p> <ul> <li>Type: <code>List[SearchField]</code></li> <li>Description: Define searchable fields, more details reading: SearchField</li> </ul> </li> <li> <p><code>filter_fields</code>: Filter fields</p> <ul> <li>Type: <code>List[FilterField]</code></li> <li>Description: Define filter fields, more details reading: FilterField</li> </ul> </li> <li> <p><code>import_fields</code>: Import fields</p> <ul> <li>Type: <code>List[str]</code></li> <li>Description: Define fields that can be imported</li> </ul> </li> </ul>"},{"location":"en/en/components/model/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"en/en/components/model/#custom-queryset","title":"Custom Queryset","text":"<pre><code>async def get_queryset(self, request: Request, params: dict) -&gt; QuerySet:\n    \"\"\"Custom queryset method\"\"\"\n    queryset = self.model.all()\n\n    # Add custom filters\n    queryset = queryset.filter(is_active=True)\n\n    # Handle related queries\n    queryset = queryset.select_related(\"department\")\n\n    return queryset\n</code></pre>"},{"location":"en/en/components/model/#custom-serialization","title":"Custom Serialization","text":"<pre><code>async def serialize_object(self, obj: Model, for_display: bool = True) -&gt; dict:\n    \"\"\"Custom serialization method\"\"\"\n    result = await super().serialize_object(obj, for_display)\n\n    # Add custom field\n    result['custom_field'] = await self.get_custom_value(obj)\n\n    return result\n</code></pre>"},{"location":"en/en/components/model/#usage-example","title":"Usage Example","text":"<pre><code>from robyn_admin.core import ModelAdmin, TableField, SearchField, SelectFilter\nfrom your_models import User\n\nclass UserAdmin(ModelAdmin):\n    verbose_name = \"User Management\"\n    menu_group = \"System\"\n    menu_icon = \"bi bi-people\"\n\n    table_fields = [\n        TableField(\"username\", label=\"Username\", sortable=True),\n        TableField(\"email\", label=\"Email\", sortable=True),\n        TableField(\n            \"is_active\", \n            label=\"Status\",\n            display_type=DisplayType.SWITCH,\n            editable=True,\n            labels={True: \"Active\", False: \"Inactive\"}\n        )\n    ]\n\n    search_fields = [\n        SearchField(\"username\", label=\"Username\"),\n        SearchField(\"email\", label=\"Email\")\n    ]\n\n    filter_fields = [\n        SelectFilter(\n            \"is_active\",\n            label=\"Status\",\n            choices={True: \"Active\", False: \"Inactive\"}\n        )\n    ]\n\n    default_ordering = [\"-created_at\"]\n</code></pre>"},{"location":"en/en/components/register/","title":"AdminSite Registration","text":"<p>AdminSite is the core class of QC Robyn Admin, used to initialize and configure the entire admin system.</p>"},{"location":"en/en/components/register/#basic-usage","title":"Basic Usage","text":"<pre><code>from robyn import Robyn\nfrom robyn_admin.core import AdminSite\n\napp = Robyn()\nadmin_site = AdminSite(\n    app,\n    title=\"QC Robyn Admin\",\n    prefix=\"admin\",\n    copyright=\"\u00a9 2024 Company Name. All rights reserved\",\n    db_url=\"postgresql://user:password@localhost:5432/dbname\",\n    modules={\n        \"models\": [\"model.table\", \"robyn_admin.models\"]\n    },\n    default_language=\"en_US\",\n    generate_schemas=True\n)\n</code></pre>"},{"location":"en/en/components/register/#parameters","title":"Parameters","text":""},{"location":"en/en/components/register/#required-parameters","title":"Required Parameters","text":"<ul> <li><code>app</code>: Robyn application instance<ul> <li>Type: <code>Robyn</code></li> <li>Description: The Robyn application instance used for registering routes and handlers</li> </ul> </li> </ul>"},{"location":"en/en/components/register/#optional-parameters","title":"Optional Parameters","text":"<ul> <li> <p><code>title</code>: Admin system title</p> <ul> <li>Type: <code>str</code></li> <li>Default: 'QC Robyn Admin'</li> <li>Description: System name displayed at the top of the admin interface</li> </ul> </li> <li> <p><code>prefix</code>: Route prefix</p> <ul> <li>Type: <code>str</code></li> <li>Default: 'admin'</li> <li>Description: URL prefix for the admin system, e.g., '/admin'</li> </ul> </li> <li> <p><code>copyright</code>: Copyright information</p> <ul> <li>Type: <code>str</code></li> <li>Default: 'QC Robyn Admin'</li> <li>Description: Copyright text displayed at the bottom of the page</li> </ul> </li> <li> <p><code>db_url</code>: Database connection URL</p> <ul> <li>Type: <code>str</code></li> <li>Default: None</li> <li>Description: Database connection string, uses existing configuration if None</li> </ul> </li> <li> <p><code>modules</code>: Model module configuration</p> <ul> <li>Type: <code>Dict[str, List[Union[str, ModuleType]]]</code></li> <li>Default: None</li> <li>Description: Configuration for model modules to be loaded</li> </ul> </li> <li> <p><code>default_language</code>: Default language</p> <ul> <li>Type: <code>str</code></li> <li>Default: 'en_US'</li> <li>Description: System default language, supports 'zh_CN' and 'en_US'</li> </ul> </li> <li> <p><code>generate_schemas</code>: Auto-generate database tables</p> <ul> <li>Type: <code>bool</code></li> <li>Default: False</li> <li>Description: Whether to automatically create database tables on startup</li> </ul> </li> </ul>"},{"location":"en/en/components/register/#main-methods","title":"Main Methods","text":""},{"location":"en/en/components/register/#register_model","title":"register_model","text":"<p>Register a model to the admin system.</p> <pre><code>admin_site.register_model(YourModel, YourModelAdmin)\n</code></pre> <p>Parameters: - <code>YourModel</code>: Tortoise ORM model class - <code>YourModelAdmin</code>: Corresponding admin class</p>"},{"location":"en/en/components/register/#register_menu","title":"register_menu","text":"<p>Register a custom menu item.</p> <pre><code>from robyn_admin.core import MenuItem\n\nadmin_site.register_menu(MenuItem(\n    name=\"System Management\",\n    icon=\"bi bi-gear\",\n    order=1\n))\n</code></pre> <p>Parameters: - <code>menu_item</code>: MenuItem instance containing menu name, icon, and other information</p>"},{"location":"en/en/components/register/#usage-example","title":"Usage Example","text":"<pre><code>from robyn import Robyn\nfrom robyn_admin.core import AdminSite, ModelAdmin, MenuItem\nfrom your_models import YourModel\n\napp = Robyn()\n\nadmin_site = AdminSite(\n    app,\n    title=\"Admin System\",\n    prefix=\"admin\",\n    copyright=\"\u00a9 2024 qc_robyn_admin\",\n    default_language=\"en_US\"\n)\n\nadmin_site.register_menu(MenuItem(\n    name=\"Business Management\",\n    icon=\"bi bi-briefcase\",\n    order=1\n))\n\nadmin_site.register_model(YourModel, YourModelAdmin)\n</code></pre>"},{"location":"en/en/components/register/#important-notes","title":"Important Notes","text":"<ol> <li> <p>Database Configuration</p> <ul> <li>If <code>db_url</code> is not provided, the system will try to use existing database configuration</li> <li>It's recommended to explicitly provide database configuration in production</li> </ul> </li> <li> <p>Permission Control</p> <ul> <li>The system automatically creates a default superuser account (username: admin, password: admin)</li> <li>It's recommended to change the superuser password immediately after deployment</li> </ul> </li> <li> <p>Route Prefix</p> <ul> <li>Ensure the <code>prefix</code> doesn't conflict with other routes</li> <li>Use meaningful prefixes like 'admin', 'manage', etc. </li> </ul> </li> </ol>"},{"location":"en/en/components/search_field/","title":"SearchField Component","text":"<p>SearchField is a component for configuring data list search conditions, supporting both regular fields and related model fields search.</p> <p>Configuration is done in the search_fields of AdminModel.</p>"},{"location":"en/en/components/search_field/#basic-usage","title":"Basic Usage","text":""},{"location":"en/en/components/search_field/#regular-field-search","title":"Regular Field Search","text":"<p>Used for searching fields in the current model:</p> <pre><code>search_fields = [\n    SearchField(\n        name=\"username\",           # Field name\n    )\n]\n</code></pre>"},{"location":"en/en/components/search_field/#related-model-field-search","title":"Related Model Field Search","text":"<p>Used for searching fields in related models:</p> <pre><code>search_fields = [\n    SearchField(\n        name=\"Category_name\",      # Format: RelatedModelName_fieldname\n        related_model=Category,    # Related model class\n        related_key=\"category_id\"  # Foreign key field name\n    )\n]\n</code></pre>"},{"location":"en/en/components/search_field/#complete-example","title":"Complete Example","text":"<pre><code>class TrademarkRecordAdmin(AdminModel):\n    search_fields = [\n        # Related model field search\n        SearchField(\n            name=\"US_Trademark_mark_name\",     # Search trademark name\n            related_model=US_Trademark,\n            related_key=\"trademark_id\",\n        ),\n        SearchField(\n            name=\"US_Trademark_serial_number\", # Search trademark number\n            related_model=US_Trademark,\n            related_key=\"trademark_id\",\n        )\n    ]\n</code></pre>"},{"location":"en/en/components/search_field/#important-parameters","title":"Important Parameters","text":""},{"location":"en/en/components/search_field/#basic-parameters","title":"Basic Parameters","text":"<ul> <li><code>name</code>: Search field name<ul> <li>Type: <code>str</code></li> <li>Description: Corresponds to model field name, format for related models is \"ModelName_fieldname\"</li> </ul> </li> </ul>"},{"location":"en/en/components/search_field/#related-model-parameters","title":"Related Model Parameters","text":"<ul> <li> <p><code>related_model</code>: Related model class</p> <ul> <li>Type: <code>Type[Model]</code></li> <li>Description: Specifies the related model class</li> </ul> </li> <li> <p><code>related_key</code>: Related foreign key field</p> <ul> <li>Type: <code>str</code></li> <li>Description: Specifies the foreign key field name of the related model</li> </ul> </li> </ul>"},{"location":"en/en/components/search_field/#important-notes","title":"Important Notes","text":"<ol> <li> <p>Related Model Search</p> <ul> <li>Field name must follow the \"ModelName_fieldname\" format</li> <li>Both related_model and related_key parameters must be configured</li> </ul> </li> <li> <p>Search Behavior</p> <ul> <li>Uses fuzzy matching (icontains) by default</li> <li>Multiple search fields have OR relationship </li> </ul> </li> </ol>"},{"location":"en/en/components/table_field/","title":"TableField Component","text":"<p>TableField is the core component for configuring table columns, supporting various display types, related queries, and formatting features.</p> <p>Example:</p> <pre><code>TableField(\n    \"Trademark_mark_name\",  # Use ModelName_fieldName format\n    label=\"Trademark\",\n    display_type=DisplayType.TEXT,\n    related_model=Trademark,  # Related Tortoise-ORM model class\n    related_key=\"trademark_id\",  # Foreign key field name\n    sortable=True\n)\n</code></pre>"},{"location":"en/en/components/table_field/#basic-parameters","title":"Basic Parameters","text":"<ul> <li> <p><code>name</code>: Field name</p> <ul> <li>Type: <code>str</code></li> <li>Description: Corresponds to model field name, use double underscore syntax for related fields</li> </ul> </li> <li> <p><code>label</code>: Display label</p> <ul> <li>Type: <code>str</code></li> <li>Description: Column header text shown in the table</li> </ul> </li> <li> <p><code>display_type</code>: Display type</p> <ul> <li>Type: <code>DisplayType</code></li> <li>Available values:<ul> <li><code>TEXT</code>: Text type</li> <li><code>DATETIME</code>: Date and time type</li> <li><code>LINK</code>: Link type</li> <li><code>SWITCH</code>: Switch type</li> <li><code>IMAGE</code>: Image type</li> <li><code>SELECT</code>: Select type</li> </ul> </li> <li>Description: Determines how the field is displayed in the table</li> </ul> </li> <li> <p><code>sortable</code>: Sortable</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>False</code></li> <li>Description: Whether to allow sorting by clicking the column header</li> </ul> </li> <li> <p><code>editable</code>: Editable</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>False</code></li> <li>Description: Whether to allow direct editing in the table</li> </ul> </li> <li> <p><code>hidden</code>: Hidden</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>False</code></li> <li>Description: Whether to hide this column in the table</li> </ul> </li> </ul>"},{"location":"en/en/components/table_field/#related-field-configuration","title":"Related Field Configuration","text":"<p>For configuring the display of related model fields:</p> <ul> <li> <p><code>related_model</code>: Related model</p> <ul> <li>Type: <code>Type[Model]</code></li> <li>Description: The related Tortoise ORM model class</li> </ul> </li> <li> <p><code>related_key</code>: Related key</p> <ul> <li>Type: <code>str</code></li> <li>Description: Foreign key field name in the current model</li> </ul> </li> </ul>"},{"location":"en/en/components/table_field/#formatting-configuration","title":"Formatting Configuration","text":""},{"location":"en/en/components/table_field/#formatter-function","title":"formatter Function","text":"<p>For customizing field display format: can pass HTML or format database return values</p> <pre><code>TableField(\n    \"create_mail_date\",\n    label=\"Created At\",\n    display_type=DisplayType.DATETIME,\n    formatter=lambda x: x.strftime('%Y-%m-%d') if x else ''\n)\nTableField(\n    \"document_link\", \n    label=\"Document Link\", \n    display_type=DisplayType.LINK,\n    sortable=True,\n    formatter=lambda x: f'&lt;a href=\"{x}\" target=\"_blank\"&gt;View File&lt;/a&gt;' if x else ''\n)\n</code></pre>"},{"location":"en/en/components/table_field/#switch-component-configuration","title":"Switch Component Configuration","text":"<p>For displaying boolean fields as switches:</p> <ul> <li> <p><code>labels</code>: Display text configuration</p> <ul> <li>Type: <code>Dict[bool, str]</code></li> <li>Description: Define text display for different switch states</li> </ul> </li> <li> <p><code>choices</code>: Value mapping configuration</p> <ul> <li>Type: <code>Dict[bool, Any]</code></li> <li>Description: Define actual values corresponding to switch states</li> </ul> </li> </ul> <p>Example:</p> <pre><code>TableField(\n    \"is_active\",\n    label=\"Status\",\n    display_type=DisplayType.SWITCH,\n    editable=True,\n    labels={True: \"Active\", False: \"Inactive\"},\n    choices={True: True, False: False}\n)\n</code></pre>"},{"location":"en/en/components/table_field/#complete-example","title":"Complete Example","text":"<pre><code>table_fields = [\n    # Primary key field (usually hidden)\n    TableField(\n        \"id\", \n        label=\"ID\", \n        display_type=DisplayType.TEXT, \n        editable=True, \n        hidden=True\n    ),\n\n    # Related field\n    TableField(\n        \"Trademark_mark_name\",\n        label=\"Trademark\",\n        related_model=Trademark,\n        related_key=\"trademark_id\",\n        sortable=True\n    ),\n\n    # Regular text field\n    TableField(\n        \"description\", \n        label=\"Description\", \n        display_type=DisplayType.TEXT, \n        sortable=True, \n        formatter=lambda x: x\n    ),\n\n    # DateTime field\n    TableField(\n        \"created_at\", \n        label=\"Created At\", \n        display_type=DisplayType.DATETIME, \n        sortable=True, \n        formatter=lambda x: x.strftime('%Y-%m-%d') if x else ''\n    ),\n\n    # Link field\n    TableField(\n        \"document_link\", \n        label=\"Document Link\", \n        display_type=DisplayType.LINK,\n        sortable=True,\n        formatter=lambda x: f'&lt;a href=\"{x}\" target=\"_blank\"&gt;View File&lt;/a&gt;' if x else ''\n    ),\n\n    # Switch field\n    TableField(\n        \"is_active\", \n        label=\"Status\",\n        display_type=DisplayType.SWITCH,\n        editable=True,\n        labels={True: \"Active\", False: \"Inactive\"},\n        choices={True: True, False: False}\n    )\n]\n</code></pre>"},{"location":"en/en/guide/package/","title":"Packaging and Publishing Guide","text":""},{"location":"en/en/guide/package/#project-structure-preparation","title":"Project Structure Preparation","text":"<ol> <li>Ensure correct project structure:</li> </ol> <pre><code>robyn_admin/\n\u251c\u2500\u2500 robyn_admin/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <ol> <li>Create setup.py file:</li> </ol> <pre><code>from setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name=\"robyn_admin\",\n    version=\"0.1.0\",\n    author=\"Your Name\",\n    author_email=\"your.email@example.com\",\n    description=\"A modern admin interface for Robyn framework\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/yourusername/robyn_admin\",\n    packages=find_packages(),\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    python_requires=\"&gt;=3.7\",\n    install_requires=[\n        \"robyn&gt;=0.1.0\",\n        \"tortoise-orm&gt;=0.19.0\",\n        # other dependencies...\n    ],\n    include_package_data=True,  # Include non-Python files\n    package_data={\n        'robyn_admin': [\n            'static/*',\n            'templates/*',\n            'i18n/*'\n        ],\n    },\n)\n</code></pre>"},{"location":"en/en/guide/package/#packaging-steps","title":"Packaging Steps","text":"<ol> <li>Install packaging tools:</li> </ol> <pre><code>pip install build twine\n</code></pre> <ol> <li>Build distribution packages:</li> </ol> <pre><code>python -m build\n</code></pre> <p>This will create two files in the <code>dist/</code> directory: - <code>robyn_admin-0.1.0.tar.gz</code> (source distribution) - <code>robyn_admin-0.1.0-py3-none-any.whl</code> (built distribution)</p>"},{"location":"en/en/guide/package/#test-installation","title":"Test Installation","text":"<ol> <li>Create virtual environment for testing:</li> </ol> <pre><code>python -m venv test_env\nsource test_env/bin/activate  # Linux/Mac\n# or\ntest_env\\Scripts\\activate  # Windows\n</code></pre> <ol> <li>Test local installation:</li> </ol> <pre><code>pip install dist/robyn_admin-0.1.0-py3-none-any.whl\n</code></pre>"},{"location":"en/en/guide/package/#publishing-to-pypi","title":"Publishing to PyPI","text":"<ol> <li>Register PyPI account:</li> <li>Visit https://pypi.org to register</li> <li> <p>Create API token</p> </li> <li> <p>Configure authentication:</p> </li> </ol> <pre><code># Create or edit ~/.pypirc\n[pypi]\nusername = __token__\npassword = your-token\n</code></pre> <ol> <li>Upload to PyPI:</li> </ol> <pre><code>python -m twine upload dist/*\n</code></pre> <ol> <li>Upload to Test PyPI (optional):</li> </ol> <pre><code>python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*\n</code></pre>"},{"location":"en/en/guide/package/#version-updates","title":"Version Updates","text":"<ol> <li> <p>Update version number in setup.py</p> </li> <li> <p>Rebuild and upload:</p> </li> </ol> <pre><code>python -m build\npython -m twine upload dist/*\n</code></pre>"},{"location":"en/en/guide/package/#important-notes","title":"Important Notes","text":"<ol> <li>Version Management</li> <li>Follow semantic versioning</li> <li> <p>Update version number before each release</p> </li> <li> <p>File Inclusion</p> </li> <li>Ensure MANIFEST.in includes all necessary non-Python files</li> <li> <p>Check package_data configuration</p> </li> <li> <p>Dependency Management</p> </li> <li>Specify required dependencies in install_requires</li> <li> <p>Use appropriate version ranges</p> </li> <li> <p>Documentation</p> </li> <li>Include clear installation and usage instructions in README.md</li> <li> <p>Include necessary license information</p> </li> <li> <p>Security</p> </li> <li>Don't include sensitive information in code</li> <li>Use .gitignore to exclude unnecessary files </li> </ol>"},{"location":"en/en/hooks/add_hook/","title":"Add Hook Function","text":""},{"location":"en/en/hooks/add_hook/#overview","title":"Overview","text":"<p>The add hook function allows you to customize the add operation logic in your model admin class. By overriding the <code>handle_add</code> method, you can:</p> <ul> <li>Add custom business logic before and after saving</li> <li>Modify data before saving</li> <li>Set additional fields</li> <li>Implement custom validation logic</li> </ul>"},{"location":"en/en/hooks/add_hook/#basic-usage","title":"Basic Usage","text":"<p>Override the <code>handle_add</code> method in your model admin class:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_add(self, request: Request, data: dict) -&gt; tuple[bool, str]:\n        \"\"\"\n        Handle add operation hook method\n        Args:\n            request: Request object\n            data: Data to be added\n        Returns:\n            tuple[bool, str]: (success status, message)\n        \"\"\"\n        try:\n            # Process form data\n            processed_data = await self.process_form_data(data)\n\n            # You can add custom logic here\n            # Example: Add creation time\n            processed_data['created_at'] = datetime.now()\n\n            # Create object\n            obj = await self.model.create(**processed_data)\n\n            # You can perform other operations here, such as:\n            # - Record operation logs\n            # - Send notifications\n            # - Trigger other business processes\n\n            return True, \"Create successful\"\n\n        except Exception as e:\n            print(f\"Add processing error: {str(e)}\")\n            return False, f\"Create failed: {str(e)}\"\n</code></pre>"},{"location":"en/en/hooks/add_hook/#parameter-description","title":"Parameter Description","text":"<ul> <li><code>request</code>: Robyn's Request object, containing all information about the current request</li> <li><code>data</code>: Dictionary containing data to be added, where keys are field names and values are field values</li> </ul>"},{"location":"en/en/hooks/add_hook/#return-value","title":"Return Value","text":"<p>The method should return a tuple containing:</p> <ul> <li><code>bool</code>: Indicates whether the operation was successful</li> <li><code>str</code>: Operation result message </li> </ul>"},{"location":"en/en/hooks/batch_delete_hook/","title":"Batch Delete Hook Function","text":""},{"location":"en/en/hooks/batch_delete_hook/#overview","title":"Overview","text":"<p>The batch delete hook function allows you to customize the batch delete operation logic in your model admin class. By overriding the <code>handle_batch_delete</code> method, you can:</p> <ul> <li>Implement batch soft delete</li> <li>Add pre-delete validation</li> <li>Handle related data in batch</li> <li>Record batch deletion logs</li> </ul>"},{"location":"en/en/hooks/batch_delete_hook/#basic-usage","title":"Basic Usage","text":"<p>Override the <code>handle_batch_delete</code> method in your model admin class:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_batch_delete(self, request: Request, ids: list) -&gt; tuple[bool, str, int]:\n        \"\"\"\n        Handle batch delete operation hook method\n        Args:\n            request: Request object\n            ids: List of record IDs to delete\n        Returns:\n            tuple[bool, str, int]: (success status, message, deleted count)\n        \"\"\"\n        try:\n            deleted_count = 0\n            for id in ids:\n                try:\n                    obj = await self.get_object(id)\n                    if obj:\n                        # You can add custom logic here\n                        # Example: Soft delete\n                        obj.is_deleted = True\n                        await obj.save()\n\n                        # Or perform physical deletion\n                        # await obj.delete()\n\n                        # You can perform other operations here, such as:\n                        # - Check related data\n                        # - Record deletion logs\n                        # - Send notifications\n\n                        deleted_count += 1\n                except Exception as e:\n                    print(f\"Failed to delete record {id}: {str(e)}\")\n                    continue\n\n            if deleted_count &gt; 0:\n                return True, f\"Successfully deleted {deleted_count} records\", deleted_count\n            return False, \"No records were deleted\", 0\n\n        except Exception as e:\n            print(f\"Batch delete processing error: {str(e)}\")\n            return False, f\"Batch delete failed: {str(e)}\", 0\n</code></pre>"},{"location":"en/en/hooks/batch_delete_hook/#parameter-description","title":"Parameter Description","text":"<ul> <li><code>request</code>: Robyn's Request object, containing all information about the current request</li> <li><code>ids</code>: List of record IDs to be deleted</li> </ul>"},{"location":"en/en/hooks/batch_delete_hook/#return-value","title":"Return Value","text":"<p>The method should return a tuple containing:</p> <ul> <li><code>bool</code>: Indicates whether the operation was successful</li> <li><code>str</code>: Operation result message</li> <li><code>int</code>: Number of successfully deleted records </li> </ul>"},{"location":"en/en/hooks/delete_hook/","title":"Delete Hook Function","text":""},{"location":"en/en/hooks/delete_hook/#overview","title":"Overview","text":"<p>The delete hook function allows you to customize the delete operation logic in your model admin class. By overriding the <code>handle_delete</code> method, you can:</p> <ul> <li>Implement soft delete</li> <li>Add pre-delete validation</li> <li>Handle related data</li> <li>Record deletion logs</li> </ul>"},{"location":"en/en/hooks/delete_hook/#basic-usage","title":"Basic Usage","text":"<p>Override the <code>handle_delete</code> method in your model admin class:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_delete(self, request: Request, object_id: str) -&gt; tuple[bool, str]:\n        \"\"\"\n        Handle delete operation hook method\n        Args:\n            request: Request object\n            object_id: Record ID\n        Returns:\n            tuple[bool, str]: (success status, message)\n        \"\"\"\n        try:\n            obj = await self.get_object(object_id)\n            if not obj:\n                return False, \"Record not found\"\n\n            # You can add custom logic here\n            # Example: Soft delete\n            obj.is_deleted = True\n            await obj.save()\n\n            # Or perform physical deletion\n            # await obj.delete()\n\n            # You can perform other operations here, such as:\n            # - Check related data\n            # - Record deletion logs\n            # - Send notifications\n\n            return True, \"Delete successful\"\n\n        except Exception as e:\n            print(f\"Delete processing error: {str(e)}\")\n            return False, f\"Delete failed: {str(e)}\"\n</code></pre>"},{"location":"en/en/hooks/delete_hook/#parameter-description","title":"Parameter Description","text":"<ul> <li><code>request</code>: Robyn's Request object, containing all information about the current request</li> <li><code>object_id</code>: ID of the record to be deleted</li> </ul>"},{"location":"en/en/hooks/delete_hook/#return-value","title":"Return Value","text":"<p>The method should return a tuple containing:</p> <ul> <li><code>bool</code>: Indicates whether the operation was successful</li> <li><code>str</code>: Operation result message </li> </ul>"},{"location":"en/en/hooks/edit_hook/","title":"Edit Hook Function","text":""},{"location":"en/en/hooks/edit_hook/#overview","title":"Overview","text":"<p>The edit hook function allows you to customize the edit operation logic in your model admin class. By overriding the <code>handle_edit</code> method, you can:</p> <ul> <li>Add custom business logic before and after saving</li> <li>Modify data before saving</li> <li>Update additional fields</li> <li>Implement custom validation logic</li> </ul>"},{"location":"en/en/hooks/edit_hook/#basic-usage","title":"Basic Usage","text":"<p>Override the <code>handle_edit</code> method in your model admin class:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_edit(self, request: Request,\n                 object_id: str, data: dict) -&gt; tuple[bool, str]:\n    \"\"\"\n    Handle edit operation hook method\n    Args:\n        request: Request object\n        object_id: Record ID\n        data: Edit data\n    Returns:\n        tuple[bool, str]: (success status, message)\n    \"\"\"\n        try:\n            # Get original object\n            obj = await self.get_object(object_id)\n            if not obj:\n                return False, \"Record not found\"\n            # Process form data using process_form_data method\n            processed_data = await self.process_form_data(data)\n            # Update object\n            for field, value in processed_data.items():\n                setattr(obj, field, value)\n            # You can do other processing here, like writing logs or setting other database field values\n            # Example: setattr(obj, \"finish_time\", datetime.now())\n            await obj.save()\n            return True, \"Update successful\"\n        except Exception as e:\n            print(f\"Edit processing error: {str(e)}\")\n            return False, f\"Update failed: {str(e)}\"\n</code></pre>"},{"location":"en/en/hooks/edit_hook/#parameter-description","title":"Parameter Description","text":"<ul> <li><code>request</code>: Robyn's Request object, containing all information about the current request</li> <li><code>object_id</code>: ID of the record to be edited</li> <li><code>data</code>: Dictionary containing edit data, where keys are field names and values are field values</li> </ul>"},{"location":"en/en/hooks/edit_hook/#return-value","title":"Return Value","text":"<p>The method should return a tuple containing:</p> <ul> <li><code>bool</code>: Indicates whether the operation was successful</li> <li><code>str</code>: Operation result message </li> </ul>"},{"location":"en/en/hooks/query_hook/","title":"Query Hook Function","text":""},{"location":"en/en/hooks/query_hook/#overview","title":"Overview","text":"<p>The query hook function allows you to customize the data query logic in your model admin class. By overriding the <code>handle_query</code> method, you can:</p> <ul> <li>Customize query conditions</li> <li>Add data filtering</li> <li>Customize sorting logic</li> <li>Implement data permission control</li> </ul>"},{"location":"en/en/hooks/query_hook/#basic-usage","title":"Basic Usage","text":"<p>Override the <code>handle_query</code> method in your model admin class:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_query(self, request: Request, params: dict) -&gt; tuple[QuerySet, int]:\n        \"\"\"\n        Handle data query hook method\n        Args:\n            request: Request object\n            params: Query parameter dictionary, containing:\n                - limit: Records per page\n                - offset: Offset\n                - search: Search keyword\n                - sort: Sort field\n                - order: Sort order (asc/desc)\n                - Other filter parameters\n        Returns:\n            tuple[QuerySet, int]: (Query result set, Total count)\n        \"\"\"\n        try:\n            # Get base queryset\n            queryset = await self.get_queryset(request, params)\n\n            # You can add custom logic here\n            # Example: Data permission control\n            if not request.user.is_superuser:\n                queryset = queryset.filter(owner=request.user)\n\n            # Custom filter conditions\n            if params.get('status'):\n                queryset = queryset.filter(status=params['status'])\n\n            # Handle sorting\n            if params.get('sort'):\n                order_by = f\"{'-' if params['order'] == 'desc' else ''}{params['sort']}\"\n                queryset = queryset.order_by(order_by)\n            elif self.default_ordering:\n                queryset = queryset.order_by(*self.default_ordering)\n\n            # Get total count\n            total = await queryset.count()\n\n            # Pagination\n            queryset = queryset.offset(params['offset']).limit(params['limit'])\n\n            return queryset, total\n\n        except Exception as e:\n            print(f\"Query processing error: {str(e)}\")\n            return self.model.all(), 0\n</code></pre>"},{"location":"en/en/hooks/query_hook/#parameter-description","title":"Parameter Description","text":"<ul> <li><code>request</code>: Robyn's Request object, containing all information about the current request</li> <li><code>params</code>: Query parameter dictionary, containing pagination, sorting, search parameters</li> </ul>"},{"location":"en/en/hooks/query_hook/#return-value","title":"Return Value","text":"<p>The method should return a tuple containing:</p> <ul> <li><code>QuerySet</code>: Query result set</li> <li><code>int</code>: Total record count </li> </ul>"},{"location":"en/zh/","title":"QC Robyn Admin","text":"<p>QC Robyn Admin \u662f\u4e00\u4e2a\u57fa\u4e8e Robyn \u4e0e bootstrap \u642d\u5efa\u7684\u6846\u67b6\u7684\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\uff0c\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u7ec4\u4ef6\u548c\u529f\u80fd\uff0c\u5e2e\u52a9\u5feb\u901f\u6784\u5efa\u7ba1\u7406\u540e\u53f0\u3002</p>"},{"location":"en/zh/#_1","title":"\u4e3b\u8981\u7279\u6027","text":"<ul> <li>\ud83d\ude80 \u5feb\u901f\u6784\u5efa\uff1a\u901a\u8fc7\u7b80\u5355\u7684\u914d\u7f6e\u5373\u53ef\u751f\u6210\u5b8c\u6574\u7684\u540e\u53f0\u7ba1\u7406\u754c\u9762</li> <li>\ud83d\udcca \u8868\u683c\u7ec4\u4ef6\uff1a\u652f\u6301\u6392\u5e8f\u3001\u8fc7\u6ee4\u3001\u641c\u7d22\u3001\u81ea\u5b9a\u4e49\u683c\u5f0f\u5316\u7b49\u529f\u80fd</li> <li>\ud83d\udcdd \u8868\u5355\u7ec4\u4ef6\uff1a\u652f\u6301\u591a\u79cd\u8868\u5355\u5b57\u6bb5\u7c7b\u578b\uff0c\u5305\u62ec\u6587\u672c\u3001\u65e5\u671f\u3001\u9009\u62e9\u5668\u7b49</li> <li>\ud83d\udd0d \u641c\u7d22\u8fc7\u6ee4\uff1a\u652f\u6301\u590d\u6742\u7684\u641c\u7d22\u548c\u8fc7\u6ee4\u6761\u4ef6</li> <li>\ud83d\udd17 \u5173\u8054\u5b57\u6bb5\uff1a\u652f\u6301\u5904\u7406\u6a21\u578b\u95f4\u7684\u5173\u8054\u5173\u7cfb</li> <li>\ud83d\udd12 \u6743\u9650\u63a7\u5236\uff1a\u7ec6\u7c92\u5ea6\u7684\u6743\u9650\u7ba1\u7406\u7cfb\u7edf</li> <li>\ud83d\udcdd \u94a9\u5b50\u51fd\u6570\uff1a\u652f\u6301\u81ea\u5b9a\u4e49\u4e3a\u540e\u53f0\u64cd\u4f5c\u6dfb\u52a0\u94a9\u5b50\u51fd\u6570</li> </ul>"},{"location":"en/zh/#_2","title":"\u5b89\u88c5","text":"<pre><code>pip install qc-robyn-admin\n</code></pre>"},{"location":"en/zh/#_3","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u5feb\u901f\u5f00\u59cb</p>"},{"location":"en/zh/#_4","title":"\u63a5\u4e0b\u6765\u9700\u8981\u505a\u7684","text":"<ul> <li>\u590d\u6742\u5173\u8054\u6a21\u578b\u7f16\u8f91\u4ee5\u53ca\u67e5\u8be2\u7684\u652f\u6301</li> <li>\u7279\u6b8a\u7ec4\u4ef6\u7684\u652f\u6301</li> </ul>"},{"location":"en/zh/quickstart/","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"en/zh/quickstart/#_2","title":"\u6848\u4f8b\uff1a \u67d0\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf","text":"<p>\u901a\u8fc7tortoise-orm \u521b\u5efa\u76f8\u5173\u7684\u6a21\u578b\uff1a </p> <p>testdemo/table.py</p> <pre><code>from tortoise import fields, models\n\nclass Author(models.Model):\n    \"\"\"\u4f5c\u8005\u6a21\u578b\"\"\"\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=100, description=\"\u4f5c\u8005\u59d3\u540d\")\n    avatar = fields.CharField(max_length=255, null=True, description=\"\u4f5c\u8005\u5934\u50cf\u8def\u5f84\")\n    biography = fields.TextField(null=True, description=\"\u4f5c\u8005\u7b80\u4ecb\")\n    email = fields.CharField(max_length=100, null=True, description=\"\u4f5c\u8005\u90ae\u7bb1\")\n    created_at = fields.DatetimeField(auto_now_add=True)\n    updated_at = fields.DatetimeField(auto_now=True)\n\n    class Meta:\n        table = \"authors\"\n\nclass Publisher(models.Model):\n    \"\"\"\u51fa\u7248\u793e\u6a21\u578b\"\"\"\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=100, description=\"\u51fa\u7248\u793e\u540d\u79f0\")\n    address = fields.CharField(max_length=255, null=True, description=\"\u51fa\u7248\u793e\u5730\u5740\")\n    website = fields.CharField(max_length=255, null=True, description=\"\u51fa\u7248\u793e\u7f51\u7ad9\")\n    created_at = fields.DatetimeField(auto_now_add=True)\n\n    class Meta:\n        table = \"publishers\"\n\nclass Category(models.Model):\n    \"\"\"\u56fe\u4e66\u5206\u7c7b\u6a21\u578b\"\"\"\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=50, description=\"\u5206\u7c7b\u540d\u79f0\")\n    parent = fields.ForeignKeyField(\n        'models.Category', \n        related_name='children', \n        null=True, \n        description=\"\u7236\u5206\u7c7b\"\n    )\n    created_at = fields.DatetimeField(auto_now_add=True)\n\n    class Meta:\n        table = \"categories\"\n\nclass Book(models.Model):\n    \"\"\"\u56fe\u4e66\u6a21\u578b\"\"\"\n    id = fields.IntField(pk=True)\n    title = fields.CharField(max_length=200, description=\"\u4e66\u540d\")\n    isbn = fields.CharField(max_length=13, unique=True, description=\"ISBN\u53f7\")\n    cover_image = fields.CharField(max_length=255, null=True, description=\"\u5c01\u9762\u56fe\u7247\u8def\u5f84\")\n    description = fields.TextField(description=\"\u56fe\u4e66\u63cf\u8ff0\", null=True)\n    content = fields.TextField(description=\"\u56fe\u4e66\u5185\u5bb9\u6458\u8981\", null=True)\n    price = fields.DecimalField(max_digits=10, decimal_places=2, description=\"\u4ef7\u683c\")\n    publication_date = fields.DateField(description=\"\u51fa\u7248\u65e5\u671f\")\n\n    # \u5173\u8054\u5b57\u6bb5\n    publisher = fields.ForeignKeyField(\n        'models.Publisher', \n        related_name='books',\n        description=\"\u51fa\u7248\u793e\"\n    )\n    authors = fields.ManyToManyField(\n        'models.Author',\n        related_name='books',\n        through='book_authors',\n        description=\"\u4f5c\u8005\"\n    )\n    category = fields.ForeignKeyField(\n        'models.Category',\n        related_name='books',\n        description=\"\u5206\u7c7b\"\n    )\n\n    created_at = fields.DatetimeField(auto_now_add=True)\n    updated_at = fields.DatetimeField(auto_now=True)\n\n    class Meta:\n        table = \"books\"\n\nclass BookReview(models.Model):\n    \"\"\"\u56fe\u4e66\u8bc4\u8bba\u6a21\u578b\"\"\"\n    id = fields.IntField(pk=True)\n    book = fields.ForeignKeyField(\n        'models.Book',\n        related_name='reviews',\n        description=\"\u8bc4\u8bba\u7684\u56fe\u4e66\"\n    )\n    reviewer_name = fields.CharField(max_length=100, description=\"\u8bc4\u8bba\u8005\u59d3\u540d\")\n    rating = fields.IntField(description=\"\u8bc4\u5206(1-5)\")\n    review_text = fields.TextField(description=\"\u8bc4\u8bba\u5185\u5bb9\")\n    created_at = fields.DatetimeField(auto_now_add=True)\n\n    class Meta:\n        table = \"book_reviews\"\n\nclass BookInventory(models.Model):\n    \"\"\"\u56fe\u4e66\u5e93\u5b58\u6a21\u578b - \u4e0e\u56fe\u4e66\u4e00\u5bf9\u4e00\u5173\u7cfb\"\"\"\n    id = fields.IntField(pk=True)\n    book = fields.OneToOneField(\n        'models.Book',\n        related_name='inventory',\n        description=\"\u5173\u8054\u7684\u56fe\u4e66\"\n    )\n    quantity = fields.IntField(description=\"\u5e93\u5b58\u6570\u91cf\")\n    location = fields.CharField(max_length=100, description=\"\u5b58\u653e\u4f4d\u7f6e\")\n    last_check_date = fields.DatetimeField(description=\"\u6700\u65b0\u76d8\u70b9\u65e5\u671f\")\n\n    class Meta:\n        table = \"book_inventories\"\n</code></pre> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u7f16\u5199\u6570\u636e\u521d\u59cb\u5316\u7684\u7a0b\u5e8f\uff1a</p> <p>testdemo/init_data.py</p> <pre><code>from faker import Faker\nfrom datetime import datetime, timedelta\nimport random\nfrom decimal import Decimal\nfrom tortoise import Tortoise\nfrom .table import Author, Publisher, Category, Book, BookReview, BookInventory\n\nfake = Faker(['zh_CN'])  # \u4f7f\u7528\u4e2d\u6587\u6570\u636e\n\nasync def generate_test_data():\n    # \u751f\u6210\u4f5c\u8005\u6570\u636e\n    authors = []\n    for _ in range(20):\n        author = await Author.create(\n            name=fake.name(),\n            avatar=f\"/static/avatars/{fake.uuid4()}.jpg\",\n            biography=fake.text(max_nb_chars=500),\n            email=fake.email()\n        )\n        authors.append(author)\n\n    # \u751f\u6210\u51fa\u7248\u793e\u6570\u636e\n    publishers = []\n    for _ in range(10):\n        publisher = await Publisher.create(\n            name=fake.company() + \"\u51fa\u7248\u793e\",\n            address=fake.address(),\n            website=fake.url()\n        )\n        publishers.append(publisher)\n\n    # \u751f\u6210\u5206\u7c7b\u6570\u636e\n    main_categories = [\"\u6587\u5b66\", \"\u79d1\u6280\", \"\u6559\u80b2\", \"\u827a\u672f\", \"\u5386\u53f2\", \"\u7ecf\u6d4e\", \"\u54f2\u5b66\", \"\u8ba1\u7b97\u673a\"]\n    categories = []\n\n    # \u521b\u5efa\u4e3b\u5206\u7c7b\n    for cat_name in main_categories:\n        category = await Category.create(name=cat_name)\n        categories.append(category)\n\n        # \u4e3a\u6bcf\u4e2a\u4e3b\u5206\u7c7b\u521b\u5efa2-3\u4e2a\u5b50\u5206\u7c7b\n        for _ in range(random.randint(2, 3)):\n            sub_category = await Category.create(\n                name=f\"{cat_name}-{fake.word()}\",\n                parent=category\n            )\n            categories.append(sub_category)\n\n    # \u751f\u6210\u56fe\u4e66\u6570\u636e\n    books = []\n    for _ in range(100):\n        book = await Book.create(\n            title=fake.sentence(nb_words=4)[:-1],  # \u53bb\u6389\u53e5\u53f7\n            isbn=str(fake.random_number(digits=13, fix_len=True)),\n            cover_image=f\"/static/covers/{fake.uuid4()}.jpg\",\n            description=fake.text(max_nb_chars=200),\n            content=fake.text(max_nb_chars=1000),\n            price=Decimal(str(random.uniform(20.0, 199.9))).quantize(Decimal('0.00')),\n            publication_date=fake.date_between(start_date='-5y', end_date='today'),\n            publisher=random.choice(publishers),\n            category=random.choice(categories)\n        )\n\n        # \u4e3a\u6bcf\u672c\u4e66\u6dfb\u52a01-3\u4e2a\u4f5c\u8005\n        for author in random.sample(authors, random.randint(1, 3)):\n            await book.authors.add(author)\n\n        books.append(book)\n\n    # \u751f\u6210\u56fe\u4e66\u8bc4\u8bba\u6570\u636e\n    for book in books:\n        # \u4e3a\u6bcf\u672c\u4e66\u751f\u62100-5\u6761\u8bc4\u8bba\n        for _ in range(random.randint(0, 5)):\n            await BookReview.create(\n                book=book,\n                reviewer_name=fake.name(),\n                rating=random.randint(1, 5),\n                review_text=fake.text(max_nb_chars=200)\n            )\n\n    # \u751f\u6210\u56fe\u4e66\u5e93\u5b58\u6570\u636e\n    for book in books:\n        await BookInventory.create(\n            book=book,\n            quantity=random.randint(0, 100),\n            location=f\"{random.choice('ABCDEF')}-{random.randint(1,20)}-{random.randint(1,10)}\",\n            last_check_date=datetime.now() - timedelta(days=random.randint(0, 30))\n        )\n\n    print(\"\u6d4b\u8bd5\u6570\u636e\u751f\u6210\u5b8c\u6210\uff01\") \n</code></pre> <p>\u6211\u4eec\u8fdb\u884c\u6570\u636e\u7684\u521d\u59cb\u5316\uff0c\u5e76\u521d\u59cb\u5316AdminSite\u7b49\u914d\u7f6e\u4fe1\u606f</p> <p>main.py</p> <pre><code>python\n\nfrom robyn import Robyn, Response, jsonify\nfrom qc_robyn_admin.core import AdminSite, MenuItem\nfrom testdemo.init_data import  generate_test_data\nfrom testdemo.table import Author\nfrom testdemo.admin_site_model import AuthorAdmin\nimport os\n\n\n\n\nif __name__ == \"__main__\":\n    # \u8fd0\u884c\u6570\u636e\u521d\u59cb\u5316 \n    app = Robyn(__file__)\n    # \u670d\u52a1\u76ee\u5f55\n    app.serve_directory(\n    route=\"/static\",\n        directory_path=os.path.join(os.getcwd(), \"static\"),\n    )\n\n    admin_site = AdminSite(\n            app,\n            title=\"QC Robyn Admin\",\n            prefix=\"admin\",\n            copyright=\"\u00a9 2024 Company Name. All rights reserved\",\n            db_url=\"sqlite://db.sqlite3\",\n            modules={\n                \"models\": [\"testdemo.table\", \"qc_robyn_admin.models\"]\n            },\n            default_language=\"en_US\",\n            generate_schemas=True,\n            startup_function=generate_test_data\n        )\n\n    app.start(port=8020)\n</code></pre> <p>\u8fd0\u884c\u5b8c\u6210\u540e\uff0c\u9ed8\u8ba4\u521b\u5efa\u7528\u6237\u4e3aadmin/admin, \u767b\u9646\u540e\u5373\u53ef\u770b\u5230\u7ba1\u7406\u9875\u9762</p> <p></p> <p></p>"},{"location":"en/zh/quickstart/#_3","title":"\u521b\u5efa\u540e\u53f0\u6a21\u578b\u7c7b","text":"<p>\u9996\u5148\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u83dc\u5355\u680f\u9009\u9879\uff1a\u5e76\u4e14\u9884\u8bbe\u597dAuthorAdmin\u4f5c\u4e3a\u540e\u53f0\u6a21\u578b\u7ba1\u7406\u7c7b</p> <p>testdemo/main.py</p> <pre><code>...\nif __name__ == \"__main__\":\n    # \u8fd0\u884c\u6570\u636e\u521d\u59cb\u5316 \n    app = Robyn(__file__)\n    # \u670d\u52a1\u76ee\u5f55\n    app.serve_directory(\n    route=\"/static\",\n        directory_path=os.path.join(os.getcwd(), \"static\"),\n    )\n\n    admin_site = AdminSite(\n            app,\n            title=\"QC Robyn Admin\",\n            prefix=\"admin\",\n            copyright=\"\u00a9 2024 Company Name. All rights reserved\",\n            db_url=\"sqlite://db.sqlite3\",\n            modules={\n                \"models\": [\"testdemo.table\", \"qc_robyn_admin.models\"]\n            },\n            default_language=\"en_US\",\n            generate_schemas=True\n        )\n\n    admin_site.register_menu(MenuItem(\n        name=\"\u540e\u53f0\u7ba1\u7406\",\n        icon=\"bi bi-gear\",\n        order=1\n    ))\n    admin_site.register_model(Author, AuthorAdmin)\n\n    async def register_tortoise():\n        await tortoise_init(\n            db_url=\"sqlite://db.sqlite3\",\n            modules={'models': ['testdemo.table']},\n            startu_up_function=init_data\n        )\n\n    app.startup_handler(register_tortoise)\n\n    app.start(port=8020)\n</code></pre> <p>\u6211\u4eec\u6765\u4e3atortoise\u6a21\u578b\u521b\u5efa\u67d0\u53f0\u7ba1\u7406\u9875\u9762\uff0c\u4ee5Author\u4e3a\u4f8b, \u521b\u5efaAuthorAdmin\u540e\u53f0\u6a21\u578b\u7ba1\u7406\u7c7b, \u5e76\u5b9a\u4e49\u76f8\u5173\u914d\u7f6e</p> <p>testdemo/admin_site_model.py</p> <pre><code>python\n\nfrom qc_robyn_admin.core import (ModelAdmin,  TableField, DisplayType, FormField,\n                                 SearchField, InputFilter, DateRangeFilter\n                                 )\nfrom .table import Author, Publisher, Category, Book, BookReview, BookInventory\n\n# \u83b7\u53d6\u524d\u4e00\u767e\u4e2a\u5b57\u7b26\ndef get_biography(self, value):\n    return value[:100]\n\n# \u4f5c\u8005\u7ba1\u7406\nclass AuthorAdmin(ModelAdmin):\n    # \u663e\u793a\u540d\u79f0\n    verbose_name = \"\u4f5c\u8005\u7ba1\u7406\u9875\u9762\"\n\n    # \u83dc\u5355\u914d\u7f6e\n    menu_group = \"\u540e\u53f0\u7ba1\u7406\"    # \u6240\u5c5e\u83dc\u5355\u7ec4\n    menu_icon = \"bi bi-people\" # Bootstrap \u56fe\u6807\n    menu_order = 1            # \u83dc\u5355\u6392\u5e8f\n\n    # \u529f\u80fd\u5f00\u5173\n    enable_edit = True       # \u5141\u8bb8\u7f16\u8f91\n    allow_add = True        # \u5141\u8bb8\u6dfb\u52a0\n    allow_delete = True     # \u5141\u8bb8\u5220\u9664\n    allow_export = True     # \u5141\u8bb8\u5bfc\u51fa\n    allow_import = True    # \u5141\u8bb8\u5bfc\u5165\n\n\n    # \u7f16\u8f91\u8868\u5355\u6807\u9898\n    edit_form_title = \"\u7f16\u8f91\u4f5c\u8005\u8868\u5355\"\n    add_form_title = \"\u6dfb\u52a0\u4f5c\u8005\u8868\u5355\"\n\n    # \u8868\u683c\u5b57\u6bb5\u914d\u7f6e\n    table_fields = [\n        # need to insert pk field to\n        TableField(\n            name=\"id\", label=\"ID\", display_type=DisplayType.TEXT, editable=False, hidden=True\n        ),\n        TableField(\n            \"name\", label=\"\u4f5c\u8005\u540d\u79f0\", display_type=DisplayType.TEXT, sortable=True, formatter=lambda x: str(x)\n        ),\n        TableField(\n            \"avatar\", label=\"\u5934\u50cf\", display_type=DisplayType.IMAGE, \n            sortable=True, \n            formatter=lambda x:  '&lt;img src={} width=\"100\" height=\"100\"&gt;'.format(x) if x else None\n        ),\n        TableField(\n            'biography', label='\u7b80\u4ecb', display_type=DisplayType.TEXT, \n            sortable=True, formatter=lambda x: str(x)\n        ),\n        TableField(\n            'email', label='\u4f5c\u8005\u90ae\u7bb1', display_type=DisplayType.TEXT, \n            sortable=True, formatter=lambda x: str(x)\n        ),\n        TableField(\n            'created_at', label='\u521b\u5efa\u65e5\u671f', display_type=DisplayType.DATETIME, \n            sortable=True, formatter=lambda x: x.strftime(\"%Y-%m-%d %H:%M:%S\")\n        )\n    ]\n\n\n\n    # \u7f16\u8f91\u8868\u5355\u5b57\u6bb5\n    form_fields = [\n        FormField(\"name\", label=\"\u4f5c\u8005\u540d\u79f0\", required=True),\n        FormField(\"avatar\", label=\"\u5934\u50cf\", field_type=DisplayType.FILE_UPLOAD,\n                  upload_path=\"static/avatars\", accept=\"image/*\", max_size=1024*1024*10)\n    ]\n\n\n\n    # \u6dfb\u52a0\u6570\u636e\u8868\u5355\n    add_form_fields = [\n        FormField(\"name\", label=\"\u4f5c\u8005\u540d\u79f0\", required=True),\n        FormField(\"avatar\", label=\"\u5934\u50cf\", field_type=DisplayType.FILE_UPLOAD,upload_path=\"static/avatars\", accept=\"image/*\", max_size=1024*1024*10),\n        FormField(\n            'biography', label='\u7b80\u4ecb', field_type=DisplayType.TEXT, \n            processor=lambda x: get_biography(x)\n        )\n    ]\n\n    # \u8fc7\u6ee4\u5668\n    filter_fields = [\n        InputFilter(\n            \"email\", label=\"\u90ae\u7bb1\u67e5\u8be2\", \n            placeholder=\"\u8bf7\u8f93\u5165\u90ae\u7bb1\"\n        ),\n        DateRangeFilter(\n            \"created_at\", label=\"\u521b\u5efa\u65e5\u671f\"\n        )\n    ]\n\n    default_ordering = [\"-created_at\"]\n\n    import_fields = [\n        \"name\",\n        \"email\",\n        \"biography\"\n    ]\n</code></pre> <p>\u8fdb\u5165\u540e\u53f0\u540e\u67e5\u770bAuthor\u7ba1\u7406\u9875\u9762\uff1a</p> <p></p>"},{"location":"en/zh/quickstart/#_4","title":"\u5173\u8054\u67e5\u8be2","text":"<p>\u6211\u4eec\u63a5\u4e0b\u6765\u60f3\u8981\u67e5\u8be2\u6bcf\u672c\u4e66\u7684\u51fa\u7248\u793e\u662f\u54ea\u4e2a\u516c\u53f8\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\u6a21\u578b\u7c7b</p> <pre><code># \u4e66\u672c\nclass BookAdmin(ModelAdmin):\n    # \u663e\u793a\u540d\u79f0\n    verbose_name = \"\u4e66\u7c4d\u67e5\u8be2\u9875\u9762\"\n\n    # \u83dc\u5355\u914d\u7f6e\n    menu_group = \"\u540e\u53f0\u7ba1\u7406\"    # \u6240\u5c5e\u83dc\u5355\u7ec4\n    menu_icon = \"bi bi-people\" # Bootstrap \u56fe\u6807\n    menu_order = 2            # \u83dc\u5355\u6392\u5e8f\n\n    # \u529f\u80fd\u5f00\u5173\n    enable_edit = True       # \u5141\u8bb8\u7f16\u8f91\n    allow_add = True        # \u5141\u8bb8\u6dfb\u52a0\n    allow_delete = True     # \u5141\u8bb8\u5220\u9664\n    allow_export = True     # \u5141\u8bb8\u5bfc\u51fa\n    allow_import = True    # \u5141\u8bb8\u5bfc\u5165\n\n\n\n    # \u8868\u683c\u5b57\u6bb5\u914d\u7f6e\n    table_fields = [\n        # need to insert pk field to\n        TableField(\n            name=\"id\", label=\"ID\", display_type=DisplayType.TEXT, editable=False, hidden=True\n        ),\n        TableField(\n            \"title\", label=\"\u4e66\u540d\", display_type=DisplayType.TEXT, sortable=True, formatter=lambda x: str(x)\n        ),\n        TableField(\n            \"isbn\", label=\"isbn\u53f7\", display_type=DisplayType.IMAGE, \n            sortable=True, \n            formatter=lambda x:  '&lt;a href={}&gt;{}&lt;/a&gt;'.format(x, x) if x else None\n        ),\n        TableField(\n            'description', label='\u56fe\u4e66\u63cf\u8ff0', display_type=DisplayType.TEXT, \n            sortable=True, formatter=lambda x: str(x)\n        ),\n        TableField(\n            'price', label='\u4ef7\u683c', display_type=DisplayType.TEXT, \n            sortable=True, formatter=lambda x: str(x)\n        ),\n        TableField(\n            'Publisher_name', label='\u51fa\u7248\u793e', display_type=DisplayType.TEXT, \n            related_model=Publisher, related_key=\"publisher_id\"\n        )\n    ]\n\n    default_ordering = [\"-created_at\"]\n\n\n    async def get_status_choices(self) -&gt; Dict[str, str]:\n        \"\"\"\u83b7\u53d6\u72b6\u6001\u9009\u9879\"\"\"\n        # \u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6240\u6709\u4e0d\u91cd\u590d\u7684\u72b6\u6001\u503c\n        status_choices = await Publisher.all().values_list('name', flat=True)\n        # \u8f6c\u6362\u4e3a\u9009\u9879\u5b57\u5178\n        return {status: status for status in status_choices if status}\n\n    async def get_filter_fields(self):\n        \"\"\"\u83b7\u53d6\u8fc7\u6ee4\u5b57\u6bb5\u914d\u7f6e\"\"\"\n        # \u52a8\u6001\u83b7\u53d6\u72b6\u6001\u9009\u9879\n        status_choices = await self.get_status_choices()        \n        filters = [\n            # \u52a8\u6001\u9009\u9879\u7684\u4e0b\u62c9\u6846\u8fc7\u6ee4\u5668\n            SelectFilter(\n                \"Publisher_name\", \n                label=\"\u51fa\u7248\u793e\",  \n                choices=status_choices,\n                related_key=\"publisher_id\",\n                related_model=Publisher\n            )\n        ]\n        return filters\n</code></pre> <p>tip - \u901a\u8fc7related_model\u548crelated_key\u6765\u5b9a\u4e49\u5173\u8054\u67e5\u8be2 - \u901a\u8fc7get_filter_fields\u6765\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668 - \u901a\u8fc7get_status_choices\u6765\u52a8\u6001\u83b7\u53d6\u8fc7\u6ee4\u5668\u9009\u9879</p> <p></p>"},{"location":"en/zh/api/model_admin_manager/","title":"\u6743\u9650\u7ba1\u7406","text":"<p>QC Robyn Admin \u63d0\u4f9b\u4e86\u7b80\u5355\u7684\u8def\u7531\u7ba1\u7406\u6a21\u5757\uff0c\u5305\u62ec\u7528\u6237\u7ba1\u7406\u3001\u89d2\u8272\u7ba1\u7406\u548c\u6743\u9650\u63a7\u5236\u3002</p>"},{"location":"en/zh/api/model_admin_manager/#_2","title":"\u521d\u59cb\u8d26\u53f7","text":"<p>\u7cfb\u7edf\u521d\u59cb\u5316\u65f6\u4f1a\u81ea\u52a8\u521b\u5efa\u8d85\u7ea7\u7ba1\u7406\u5458\u8d26\u53f7\uff1a - \u7528\u6237\u540d\uff1aadmin - \u5bc6\u7801\uff1aadmin</p> <p>\u5efa\u8bae\u9996\u6b21\u767b\u5f55\u540e\u7acb\u5373\u4fee\u6539\u5bc6\u7801\u3002</p> <p>tips\uff1a</p> <p>qc_robyn_admin\u901a\u8fc7\u914d\u7f6e\u89d2\u8272\u7684\u65b9\u5f0f\u6765\u63a7\u5236\u8def\u7531\u6743\u9650\uff0c\u9700\u8981\u5bf9\u89d2\u8272\u505a\u597d\u5141\u8bb8\u8def\u7531\u8bbf\u95ee\u540e\uff0c\u624d\u53ef\u4ee5\u8fdb\u884c\u8def\u7531\u9650\u5236\uff0c\u5426\u5219\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u9875\u9762</p> <p> </p> <p>\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u7528\u6237</p> <p></p> <p>\u8bbe\u7f6e\u7528\u6237\u6240\u5c5e\u89d2\u8272</p> <p></p>"},{"location":"en/zh/api/model_admin_manager/#_3","title":"\u7528\u6237\u7ba1\u7406","text":"<p>\u5728\u7528\u6237\u7ba1\u7406\u754c\u9762\uff0c\u53ef\u4ee5\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a - \u521b\u5efa\u65b0\u7528\u6237 - \u7f16\u8f91\u7528\u6237\u4fe1\u606f\uff08\u7528\u6237\u540d\u3001\u5bc6\u7801\u3001\u90ae\u7bb1\u7b49\uff09 - \u8bbe\u7f6e\u7528\u6237\u72b6\u6001\uff08\u542f\u7528/\u7981\u7528\uff09 - \u5206\u914d\u7528\u6237\u89d2\u8272</p> <p></p>"},{"location":"en/zh/api/model_admin_manager/#_4","title":"\u89d2\u8272\u7ba1\u7406","text":"<p>\u89d2\u8272\u662f\u6743\u9650\u7684\u96c6\u5408\uff0c\u5728\u89d2\u8272\u7ba1\u7406\u754c\u9762\u53ef\u4ee5\uff1a - \u521b\u5efa\u65b0\u89d2\u8272 - \u7f16\u8f91\u89d2\u8272\u4fe1\u606f - \u914d\u7f6e\u89d2\u8272\u53ef\u8bbf\u95ee\u8def\u7531</p> <p></p>"},{"location":"en/zh/api/model_admin_manager/#_5","title":"\u7528\u6237\u89d2\u8272\u914d\u7f6e","text":"<p>\u5bf9\u7528\u6237\u7ed1\u5b9a\u89d2\u8272</p> <p></p>"},{"location":"en/zh/components/filter_field/","title":"FilterField \u8fc7\u6ee4\u5b57\u6bb5\u7ec4\u4ef6","text":"<p>FilterField \u662f\u7528\u4e8e\u914d\u7f6e\u6570\u636e\u5217\u8868\u8fc7\u6ee4\u6761\u4ef6\u7684\u7ec4\u4ef6\uff0c\u652f\u6301\u591a\u79cd\u8fc7\u6ee4\u7c7b\u578b\u548c\u6570\u636e\u5904\u7406\u529f\u80fd\u3002</p> <p>\u914d\u7f6e\u5728AdminModel\u7684filter_fields\u4e2d\u3002</p>"},{"location":"en/zh/components/filter_field/#_1","title":"\u57fa\u672c\u8fc7\u6ee4\u5668\u7c7b\u578b","text":""},{"location":"en/zh/components/filter_field/#inputfilter","title":"InputFilter \u8f93\u5165\u6846\u8fc7\u6ee4\u5668","text":"<p>\u7528\u4e8e\u6587\u672c\u641c\u7d22\u8fc7\u6ee4\uff1a</p> <pre><code>InputFilter(\n    name=\"username\",           # \u5b57\u6bb5\u540d\n    label=\"\u7528\u6237\u540d\",            # \u663e\u793a\u6807\u7b7e\n    placeholder=\"\u8bf7\u8f93\u5165\u7528\u6237\u540d\", # \u5360\u4f4d\u6587\u672c\n    operator=\"icontains\"       # \u8fc7\u6ee4\u64cd\u4f5c\u7b26\n)\n</code></pre>"},{"location":"en/zh/components/filter_field/#selectfilter","title":"SelectFilter \u4e0b\u62c9\u9009\u62e9\u8fc7\u6ee4\u5668","text":"<p>\u7528\u4e8e\u9009\u9879\u8fc7\u6ee4\uff1a</p> <pre><code>SelectFilter(\n    name=\"status\",\n    label=\"\u72b6\u6001\",\n    choices={                  # \u9009\u9879\u914d\u7f6e\n        True: \"\u542f\u7528\",\n        False: \"\u7981\u7528\"\n    },\n    multiple=False            # \u662f\u5426\u652f\u6301\u591a\u9009\n)\n</code></pre>"},{"location":"en/zh/components/filter_field/#daterangefilter","title":"DateRangeFilter \u65e5\u671f\u8303\u56f4\u8fc7\u6ee4\u5668","text":"<p>\u7528\u4e8e\u65e5\u671f\u8303\u56f4\u8fc7\u6ee4\uff1a</p> <pre><code>DateRangeFilter(\n    name=\"create_time\",\n    label=\"\u521b\u5efa\u65f6\u95f4\"\n)\n</code></pre>"},{"location":"en/zh/components/filter_field/#numberrangefilter","title":"NumberRangeFilter \u6570\u5b57\u8303\u56f4\u8fc7\u6ee4\u5668","text":"<p>\u7528\u4e8e\u6570\u503c\u8303\u56f4\u8fc7\u6ee4\uff1a</p> <pre><code>NumberRangeFilter(\n    name=\"price\",\n    label=\"\u4ef7\u683c\"\n)\n</code></pre>"},{"location":"en/zh/components/filter_field/#booleanfilter","title":"BooleanFilter \u5e03\u5c14\u8fc7\u6ee4\u5668","text":"<p>\u7528\u4e8e\u5e03\u5c14\u503c\u8fc7\u6ee4\uff1a</p> <pre><code>BooleanFilter(\n    name=\"is_active\",\n    label=\"\u662f\u5426\u6fc0\u6d3b\"\n)\n</code></pre>"},{"location":"en/zh/components/filter_field/#_2","title":"\u5173\u8054\u6a21\u578b\u8fc7\u6ee4","text":"<p>\u652f\u6301\u5bf9\u5173\u8054\u6a21\u578b\u5b57\u6bb5\u8fdb\u884c\u8fc7\u6ee4\uff1a</p> <pre><code>InputFilter(\n    name=\"Category_name\",      # \u683c\u5f0f\u4e3a: \u5173\u8054\u6a21\u578b\u540d_\u5b57\u6bb5\u540d\n    label=\"\u5206\u7c7b\u540d\u79f0\",\n    related_model=Category,    # \u5173\u8054\u7684\u6a21\u578b\u7c7b\n    related_key=\"category_id\"  # \u5916\u952e\u5b57\u6bb5\u540d\n)\n</code></pre>"},{"location":"en/zh/components/filter_field/#_3","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>filter_fields = [\n    # \u6587\u672c\u8f93\u5165\u8fc7\u6ee4\n    InputFilter(\n        name=\"username\",\n        label=\"\u7528\u6237\u540d\",\n        placeholder=\"\u8bf7\u8f93\u5165\u7528\u6237\u540d\u641c\u7d22\"\n    ),\n\n    # \u9009\u62e9\u8fc7\u6ee4\n    SelectFilter(\n        name=\"status\",\n        label=\"\u72b6\u6001\",\n        choices={\n            1: \"\u6b63\u5e38\",\n            0: \"\u7981\u7528\",\n            -1: \"\u5220\u9664\"\n        }\n    ),\n\n    # \u65e5\u671f\u8303\u56f4\u8fc7\u6ee4\n    DateRangeFilter(\n        name=\"create_time\",\n        label=\"\u521b\u5efa\u65f6\u95f4\"\n    ),\n\n    # \u6570\u5b57\u8303\u56f4\u8fc7\u6ee4\n    NumberRangeFilter(\n        name=\"price\",\n        label=\"\u4ef7\u683c\u533a\u95f4\"\n    ),\n\n    # \u5e03\u5c14\u8fc7\u6ee4\n    BooleanFilter(\n        name=\"is_active\",\n        label=\"\u6fc0\u6d3b\u72b6\u6001\"\n    ),\n\n    # \u5173\u8054\u6a21\u578b\u8fc7\u6ee4\n    InputFilter(\n        name=\"Category_name\",\n        label=\"\u5206\u7c7b\u540d\u79f0\",\n        related_model=Category,\n        related_key=\"category_id\"\n    )\n]\n</code></pre>"},{"location":"en/zh/components/filter_field/#_4","title":"\u91cd\u8981\u53c2\u6570\u8bf4\u660e","text":""},{"location":"en/zh/components/filter_field/#_5","title":"\u57fa\u7840\u53c2\u6570","text":"<ul> <li> <p><code>name</code>: \u8fc7\u6ee4\u5b57\u6bb5\u540d\u79f0</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u5bf9\u5e94\u6a21\u578b\u7684\u5b57\u6bb5\u540d\uff0c\u5173\u8054\u6a21\u578b\u683c\u5f0f\u4e3a\"\u6a21\u578b\u540d_\u5b57\u6bb5\u540d\"</li> </ul> </li> <li> <p><code>label</code>: \u663e\u793a\u6807\u7b7e</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u8fc7\u6ee4\u5668\u7684\u663e\u793a\u540d\u79f0</li> </ul> </li> <li> <p><code>filter_type</code>: \u8fc7\u6ee4\u5668\u7c7b\u578b</p> <ul> <li>\u7c7b\u578b: <code>FilterType</code></li> <li>\u53ef\u9009\u503c:<ul> <li><code>INPUT</code>: \u8f93\u5165\u6846</li> <li><code>SELECT</code>: \u4e0b\u62c9\u9009\u62e9</li> <li><code>DATE_RANGE</code>: \u65e5\u671f\u8303\u56f4</li> <li><code>NUMBER_RANGE</code>: \u6570\u5b57\u8303\u56f4</li> <li><code>BOOLEAN</code>: \u5e03\u5c14\u9009\u62e9</li> </ul> </li> </ul> </li> </ul>"},{"location":"en/zh/components/filter_field/#_6","title":"\u9ad8\u7ea7\u53c2\u6570","text":"<ul> <li> <p><code>choices</code>: \u9009\u9879\u914d\u7f6e\uff08\u7528\u4e8eSelectFilter\uff09</p> <ul> <li>\u7c7b\u578b: <code>Dict[Any, str]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u9009\u62e9\u6846\u7684\u9009\u9879\u548c\u5bf9\u5e94\u7684\u503c</li> </ul> </li> <li> <p><code>multiple</code>: \u662f\u5426\u652f\u6301\u591a\u9009\uff08\u7528\u4e8eSelectFilter\uff09</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>False</code></li> </ul> </li> <li> <p><code>placeholder</code>: \u5360\u4f4d\u63d0\u793a\u6587\u672c</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u8f93\u5165\u6846\u7684\u63d0\u793a\u6587\u672c</li> </ul> </li> <li> <p><code>operator</code>: \u8fc7\u6ee4\u64cd\u4f5c\u7b26</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u9ed8\u8ba4\u503c: <code>icontains</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u8fc7\u6ee4\u6761\u4ef6\u7684\u6bd4\u8f83\u65b9\u5f0f</li> </ul> </li> </ul>"},{"location":"en/zh/components/filter_field/#_7","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li> <p>\u5173\u8054\u6a21\u578b\u8fc7\u6ee4</p> <ul> <li>\u5b57\u6bb5\u540d\u5fc5\u987b\u7b26\u5408\"\u6a21\u578b\u540d_\u5b57\u6bb5\u540d\"\u7684\u683c\u5f0f</li> <li>\u9700\u8981\u6b63\u786e\u914d\u7f6erelated_model\u548crelated_key</li> </ul> </li> <li> <p>\u9009\u62e9\u8fc7\u6ee4\u5668</p> <ul> <li>choices\u5b57\u5178\u7684key\u4e3a\u5b9e\u9645\u503c\uff0cvalue\u4e3a\u663e\u793a\u6587\u672c</li> <li>multiple=True\u65f6\u652f\u6301\u591a\u9009\u529f\u80fd(to do)</li> </ul> </li> <li> <p>\u8303\u56f4\u8fc7\u6ee4\u5668</p> <ul> <li>DateRangeFilter\u63d0\u4f9b\u65e5\u671f\u9009\u62e9\u5668</li> <li>NumberRangeFilter\u63d0\u4f9b\u6570\u503c\u8f93\u5165\u6846 </li> </ul> </li> </ol>"},{"location":"en/zh/components/filter_field/#_8","title":"\u9ad8\u7ea7\u7528\u6cd5","text":""},{"location":"en/zh/components/filter_field/#_9","title":"\u52a8\u6001\u8fc7\u6ee4\u9009\u9879","text":"<p>\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u4ece\u6570\u636e\u5e93\u4e2d\u52a8\u6001\u83b7\u53d6\u8fc7\u6ee4\u9009\u9879\uff0c\u6bd4\u5982\u72b6\u6001\u5217\u8868\u3002\u8fd9\u65f6\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 <code>get_filter_fields</code> \u65b9\u6cd5\u6765\u5b9e\u73b0\uff1a</p> <pre><code>class TrademarkAdmin(AdminModel):\n    async def get_status_choices(self) -&gt; Dict[str, str]:\n        \"\"\"\u83b7\u53d6\u72b6\u6001\u9009\u9879\"\"\"\n        # \u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6240\u6709\u4e0d\u91cd\u590d\u7684\u72b6\u6001\u503c\n        status_choices = await US_Trademark.all().values_list('status', flat=True)\n        # \u8f6c\u6362\u4e3a\u9009\u9879\u5b57\u5178\n        return {status: status for status in status_choices if status}\n\n    async def get_filter_fields(self) -&gt; List[FilterField]:\n        \"\"\"\u83b7\u53d6\u8fc7\u6ee4\u5b57\u6bb5\u914d\u7f6e\"\"\"\n        # \u52a8\u6001\u83b7\u53d6\u72b6\u6001\u9009\u9879\n        status_choices = await self.get_status_choices()        \n\n        filters = [\n            # \u666e\u901a\u6587\u672c\u641c\u7d22\u8fc7\u6ee4\u5668\n            InputFilter(\n                \"mark_name\", \n                label=\"\u5546\u6807\u540d\", \n                placeholder=\"\u8bf7\u8f93\u5165\u5546\u6807\u540d\",\n                operator=\"icontains\"\n            ),\n            # \u52a8\u6001\u9009\u9879\u7684\u4e0b\u62c9\u6846\u8fc7\u6ee4\u5668\n            SelectFilter(\n                \"status\", \n                label=\"\u72b6\u6001\",  \n                choices=status_choices,\n            )\n        ]\n        return filters\n</code></pre> <p>\u8fd9\u79cd\u65b9\u5f0f\u7279\u522b\u9002\u7528\u4e8e\u4ee5\u4e0b\u573a\u666f\uff1a - \u9700\u8981\u4ece\u6570\u636e\u5e93\u52a8\u6001\u83b7\u53d6\u8fc7\u6ee4\u9009\u9879 - \u8fc7\u6ee4\u9009\u9879\u9700\u8981\u6839\u636e\u7528\u6237\u6743\u9650\u52a8\u6001\u751f\u6210 - \u8fc7\u6ee4\u5668\u914d\u7f6e\u9700\u8981\u4f9d\u8d56\u5176\u4ed6\u6570\u636e</p> <p>\u901a\u8fc7\u91cd\u5199 <code>get_filter_fields</code> \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\uff1a 1. \u5b9e\u73b0\u52a8\u6001\u7684\u8fc7\u6ee4\u9009\u9879 2. \u6839\u636e\u6761\u4ef6\u8fd4\u56de\u4e0d\u540c\u7684\u8fc7\u6ee4\u5668\u914d\u7f6e 3. \u5728\u8fc7\u6ee4\u5668\u914d\u7f6e\u4e2d\u4f7f\u7528\u5f02\u6b65\u64cd\u4f5c</p>"},{"location":"en/zh/components/form_field/","title":"FormField \u8868\u5355\u5b57\u6bb5\u7ec4\u4ef6","text":"<p>FormField \u662f\u7528\u4e8e\u914d\u7f6e\u8868\u5355\u5b57\u6bb5\u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u652f\u6301\u591a\u79cd\u8f93\u5165\u7c7b\u578b\u3001\u6570\u636e\u5904\u7406\u548c\u9a8c\u8bc1\u529f\u80fd\u3002</p> <p>\u914d\u7f6e\u5728AdminModel\u7684form_fields\u548cadd_form_fields\u4e2d</p>"},{"location":"en/zh/components/form_field/#_1","title":"\u793a\u4f8b","text":"<pre><code>python\n\nadd_form_fields = [\n        FormField(\"name\", label=\"\u4f5c\u8005\u540d\u79f0\", required=True),\n        FormField(\"avatar\", label=\"\u5934\u50cf\", field_type=DisplayType.FILE_UPLOAD,upload_path=\"static/avatars\", accept=\"image/*\", max_size=1024*1024*10),\n        FormField(\n            'biography', label='\u7b80\u4ecb', field_type=DisplayType.TEXT, \n            processor=lambda x: get_biography(x)\n        )\n    ]\n</code></pre>"},{"location":"en/zh/components/form_field/#_2","title":"\u57fa\u672c\u53c2\u6570","text":"<ul> <li> <p><code>name</code>: \u5b57\u6bb5\u540d\u79f0</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u5bf9\u5e94\u6a21\u578b\u7684\u5b57\u6bb5\u540d\uff0c\u7528\u4e8e\u8868\u5355\u63d0\u4ea4</li> </ul> </li> <li> <p><code>label</code>: \u663e\u793a\u6807\u7b7e</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u8868\u5355\u5b57\u6bb5\u7684\u663e\u793a\u540d\u79f0</li> </ul> </li> <li> <p><code>field_type</code>: \u5b57\u6bb5\u7c7b\u578b</p> <ul> <li>\u7c7b\u578b: <code>DisplayType</code></li> <li>\u53ef\u9009\u503c:<ul> <li><code>TEXT</code>: \u6587\u672c\u8f93\u5165\u6846</li> <li><code>EMAIL</code>: \u90ae\u7bb1\u8f93\u5165\u6846</li> <li><code>PASSWORD</code>: \u5bc6\u7801\u8f93\u5165\u6846</li> <li><code>DATE</code>: \u65e5\u671f\u9009\u62e9\u5668</li> <li><code>DATETIME</code>: \u65e5\u671f\u65f6\u95f4\u9009\u62e9\u5668</li> <li><code>SELECT</code>: \u4e0b\u62c9\u9009\u62e9\u6846</li> <li><code>SWITCH</code>: \u5f00\u5173\u7ec4\u4ef6</li> <li><code>FILE_UPLOAD</code>: \u6587\u4ef6\u4e0a\u4f20</li> </ul> </li> <li>\u8bf4\u660e: \u51b3\u5b9a\u8868\u5355\u5b57\u6bb5\u7684\u8f93\u5165\u7c7b\u578b</li> </ul> </li> <li> <p><code>upload_path</code>: \u6587\u4ef6\u4e0a\u4f20\u8def\u5f84str</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u9ed8\u8ba4\u503c: None</li> <li>\u8bf4\u660e: \u6587\u4ef6\u56fe\u7247\u4e0a\u4f20\u7684\u8def\u5f84</li> </ul> </li> <li> <p><code>max_size</code>: \u6587\u4ef6\u4e0a\u4f20\u6700\u5927\u5927\u5c0f</p> <ul> <li>\u7c7b\u578b: <code>int</code></li> <li>\u9ed8\u8ba4\u503c: None</li> <li>\u8bf4\u660e: \u6587\u4ef6\u56fe\u7247\u4e0a\u4f20\u7684\u6700\u5927\u5927\u5c0f(\u5355\u4f4d\u5b57\u8282)</li> </ul> </li> </ul>"},{"location":"en/zh/components/form_field/#_3","title":"\u9ad8\u7ea7\u914d\u7f6e","text":""},{"location":"en/zh/components/form_field/#_4","title":"\u9009\u62e9\u5668\u914d\u7f6e","text":"<p>\u7528\u4e8e\u914d\u7f6e\u4e0b\u62c9\u9009\u62e9\u6846\u7684\u9009\u9879\uff1a</p> <ul> <li><code>choices</code>: \u9009\u9879\u914d\u7f6e<ul> <li>\u7c7b\u578b: <code>Dict[str, Any]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u9009\u62e9\u6846\u7684\u9009\u9879\u548c\u5bf9\u5e94\u7684\u503c</li> </ul> </li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>FormField(\n    \"is_active\",\n    label=\"\u72b6\u6001\",\n    field_type=DisplayType.SELECT,\n    choices={\"\u6b63\u5e38\": True, \"\u7981\u7528\": False}\n)\n</code></pre>"},{"location":"en/zh/components/form_field/#_5","title":"\u6570\u636e\u5904\u7406\u5668","text":"<p>\u7528\u4e8e\u5728\u8868\u5355\u63d0\u4ea4\u65f6\u5904\u7406\u5b57\u6bb5\u503c\uff1a</p> <ul> <li><code>processor</code>: \u5904\u7406\u51fd\u6570<ul> <li>\u7c7b\u578b: <code>Callable[[Any], Any]</code></li> <li>\u8bf4\u660e: \u5728\u4fdd\u5b58\u6570\u636e\u524d\u5bf9\u5b57\u6bb5\u503c\u8fdb\u884c\u5904\u7406</li> </ul> </li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>FormField(\n    \"password\", \n    label=\"\u5bc6\u7801\", \n    field_type=DisplayType.PASSWORD,\n    required=True,\n    processor=lambda x: AdminUser.hash_password(x)  # \u5bc6\u7801\u52a0\u5bc6\u5904\u7406\n)\n</code></pre>"},{"location":"en/zh/components/form_field/#_6","title":"\u5b57\u6bb5\u7c7b\u578b\u793a\u4f8b","text":""},{"location":"en/zh/components/form_field/#_7","title":"\u6587\u672c\u8f93\u5165\u6846","text":"<pre><code>FormField(\n    \"username\",\n    label=\"\u7528\u6237\u540d\",\n    required=True\n)\n</code></pre>"},{"location":"en/zh/components/form_field/#_8","title":"\u90ae\u7bb1\u8f93\u5165\u6846","text":"<pre><code>FormField(\n    \"email\",\n    label=\"\u90ae\u7bb1\",\n    field_type=DisplayType.EMAIL,\n    required=True\n)\n</code></pre>"},{"location":"en/zh/components/form_field/#_9","title":"\u5bc6\u7801\u8f93\u5165\u6846","text":"<pre><code>FormField(\n    \"password\",\n    label=\"\u5bc6\u7801\",\n    field_type=DisplayType.PASSWORD,\n    required=True\n)\n</code></pre>"},{"location":"en/zh/components/form_field/#_10","title":"\u65e5\u671f\u9009\u62e9\u5668","text":"<pre><code>FormField(\n    'create_at',\n    label=\"\u51fa\u751f\u65e5\u671f\",\n    field_type=DisplayType.DATE\n)\n</code></pre>"},{"location":"en/zh/components/form_field/#_11","title":"\u4e0b\u62c9\u9009\u62e9\u6846","text":"<pre><code>FormField(\n    \"status\",\n    label=\"\u72b6\u6001\",\n    field_type=DisplayType.SELECT,\n    choices={\n        \"\u542f\u7528\": True,\n        \"\u7981\u7528\": False\n    }\n)\n</code></pre>"},{"location":"en/zh/components/form_field/#_12","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>form_fields = [\n    # \u57fa\u672c\u6587\u672c\u5b57\u6bb5\n    FormField(\n        \"username\",\n        label=\"\u7528\u6237\u540d\",\n        required=True\n    ),\n\n    # \u90ae\u7bb1\u5b57\u6bb5\n    FormField(\n        \"email\",\n        label=\"\u90ae\u7bb1\",\n        field_type=DisplayType.EMAIL,\n        required=True\n    ),\n\n    # \u5bc6\u7801\u5b57\u6bb5\uff08\u5e26\u5904\u7406\u5668\uff09\n    FormField(\n        \"password\", \n        label=\"\u5bc6\u7801\", \n        field_type=DisplayType.PASSWORD,\n        required=True,\n        processor=lambda x: AdminUser.hash_password(x)\n    ),\n\n    # \u7535\u8bdd\u5b57\u6bb5\n    FormField(\n        \"phone\",\n        label=\"\u7535\u8bdd\",\n        field_type=DisplayType.TEXT,\n        required=True\n    ),\n\n    # \u72b6\u6001\u9009\u62e9\u5b57\u6bb5\n    FormField(\n        \"is_active\",\n        label=\"\u72b6\u6001\",\n        field_type=DisplayType.SELECT,\n        choices={\"\u6b63\u5e38\": True, \"\u7981\u7528\": False}\n    ),\n\n    # \u65e5\u671f\u5b57\u6bb5\n    FormField(\n        'create_at',\n        label=\"\u51fa\u751f\u65e5\u671f\",\n        field_type=DisplayType.DATE\n    )\n]\n</code></pre>"},{"location":"en/zh/components/form_field/#_13","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li> <p>\u5b57\u6bb5\u7c7b\u578b</p> <ul> <li>\u9009\u62e9\u5408\u9002\u7684 <code>field_type</code> \u53ef\u4ee5\u83b7\u5f97\u76f8\u5e94\u7684\u8f93\u5165\u9a8c\u8bc1</li> <li><code>EMAIL</code> \u7c7b\u578b\u4f1a\u81ea\u52a8\u9a8c\u8bc1\u90ae\u7bb1\u683c\u5f0f</li> <li><code>DATE</code> \u548c <code>DATETIME</code> \u4f1a\u63d0\u4f9b\u65e5\u671f\u9009\u62e9\u5668</li> </ul> </li> <li> <p>\u6570\u636e\u5904\u7406</p> <ul> <li><code>processor</code> \u51fd\u6570\u5728\u6570\u636e\u4fdd\u5b58\u524d\u6267\u884c</li> <li>\u786e\u4fdd\u5904\u7406\u51fd\u6570\u8fd4\u56de\u6b63\u786e\u7684\u6570\u636e\u7c7b\u578b</li> </ul> </li> <li> <p>\u5fc5\u586b\u5b57\u6bb5</p> <ul> <li>\u8bbe\u7f6e <code>required=True</code> \u7684\u5b57\u6bb5\u4f1a\u5728\u524d\u7aef\ufffd\ufffd\ufffd\u884c\u9a8c\u8bc1</li> <li>\u8868\u5355\u63d0\u4ea4\u65f6\u4f1a\u68c0\u67e5\u5fc5\u586b\u5b57\u6bb5\u662f\u5426\u586b\u5199 </li> </ul> </li> </ol>"},{"location":"en/zh/components/model/","title":"ModelAdmin \u6a21\u578b\u7ba1\u7406\u7c7b","text":"<p>ModelAdmin \u662f\u7528\u4e8e\u914d\u7f6e\u6a21\u578b\u5728\u540e\u53f0\u7684\u5c55\u793a\u548c\u7ba1\u7406\u65b9\u5f0f\u7684\u6838\u5fc3\u7c7b\u3002\u901a\u8fc7\u7ee7\u627f\u548c\u914d\u7f6e ModelAdmin\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6a21\u578b\u7684\u663e\u793a\u5b57\u6bb5\u3001\u8fc7\u6ee4\u5668\u3001\u641c\u7d22\u9879\u7b49\u529f\u80fd\u3002</p>"},{"location":"en/zh/components/model/#_1","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from qc_robyn_admin.core import ModelAdmin, TableField, DisplayType\n\nclass MarkAdmin(ModelAdmin):\n    # \u663e\u793a\u540d\u79f0\n    verbose_name = \"\u5546\u6807\u67e5\u8be2\"\n\n    # \u83dc\u5355\u914d\u7f6e\n    menu_group = \"\u5546\u6807\u67e5\u8be2\"    # \u6240\u5c5e\u83dc\u5355\u7ec4\n    menu_icon = \"bi bi-people\" # Bootstrap \u56fe\u6807\n    menu_order = 1            # \u83dc\u5355\u6392\u5e8f\n\n    # \u529f\u80fd\u5f00\u5173\n    enable_edit = True       # \u5141\u8bb8\u7f16\u8f91\n    allow_add = True        # \u5141\u8bb8\u6dfb\u52a0\n    allow_delete = True     # \u5141\u8bb8\u5220\u9664\n    allow_export = True     # \u5141\u8bb8\u5bfc\u51fa\n    allow_import = True    # \u5141\u8bb8\u5bfc\u5165\n\n    # \u8868\u683c\u5b57\u6bb5\u914d\u7f6e\n    table_fields = [\n        TableField(\n            name=\"id\", label=\"ID\", display_type=DisplayType.TEXT, editable=False, hidden=True\n        ),\n        TableField(\n            \"xxx\", label=\"xxx\", display_type=DisplayType.TEXT, sortable=True, formatter=lambda x: str(x)\n        ),\n    ]\n    # \u9ed8\u8ba4\u6392\u5e8f\n    default_ordering = [\"-created_at\"]\n\n    import_fields = [\n        \"name\",\n        \"email\",\n        \"biography\"\n    ]\n...\n# Mark is tortoise-orm model\nadmin_site.register_model(Mark, MarkAdmin)\n</code></pre>"},{"location":"en/zh/components/model/#_2","title":"\u5c5e\u6027\u8bf4\u660e","text":""},{"location":"en/zh/components/model/#_3","title":"\u57fa\u7840\u5c5e\u6027","text":"<ul> <li> <p><code>verbose_name</code>: \u663e\u793a\u540d\u79f0</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u5728\u540e\u53f0\u754c\u9762\u83dc\u5355\u680f\u5c55\u793a\u7684\u540d\u79f0</li> </ul> </li> <li> <p><code>menu_group</code>: \u83dc\u5355\u7ec4</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u6a21\u578b\u5728\u540e\u53f0\u83dc\u5355\u4e2d\u6240\u5c5e\u7684\u7ec4</li> </ul> </li> <li> <p><code>menu_icon</code>: \u83dc\u5355\u56fe\u6807</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u4f7f\u7528 Bootstrap Icons \u7684\u56fe\u6807\u7c7b\u540d</li> </ul> </li> <li> <p><code>menu_order</code>: \u83dc\u5355\u6392\u5e8f</p> <ul> <li>\u7c7b\u578b: <code>int</code></li> <li>\u8bf4\u660e: \u5728\u540c\u7ec4\u83dc\u5355\u4e2d\u7684\u6392\u5e8f\u4f4d\u7f6e\uff0c\u6570\u5b57\u8d8a\u5c0f\u8d8a\u9760\u524d</li> </ul> </li> </ul>"},{"location":"en/zh/components/model/#_4","title":"\u529f\u80fd\u63a7\u5236","text":"<ul> <li> <p><code>enable_edit</code>: \u542f\u7528\u7f16\u8f91</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>True</code></li> <li>\u8bf4\u660e: \u662f\u5426\u5141\u8bb8\u7f16\u8f91\u8868\u683c\u8bb0\u5f55</li> </ul> </li> <li> <p><code>allow_add</code>: \u5141\u8bb8\u6dfb\u52a0</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>True</code></li> <li>\u8bf4\u660e: \u662f\u5426\u663e\u793a\u6dfb\u52a0\u6309\u94ae\uff0c\u9700\u8981\u642d\u914d add_form\u53c2\u6570\u4f7f\u7528</li> </ul> </li> <li> <p><code>allow_delete</code>: \u5141\u8bb8\u5220\u9664</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>True</code></li> <li>\u8bf4\u660e: \u662f\u5426\u5141\u8bb8\u5220\u9664\u8bb0\u5f55</li> </ul> </li> <li> <p><code>allow_export</code>: \u5141\u8bb8\u5bfc\u51fa</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>True</code></li> <li>\u8bf4\u660e: \u662f\u5426\u663e\u793a\u5bfc\u51fa\u6309\u94ae</li> </ul> </li> <li> <p><code>allow_import</code>: \u5141\u8bb8\u5bfc\u5165</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>True</code></li> <li>\u8bf4\u660e: \u662f\u5426\u663e\u793a\u5bfc\u5165\u6309\u94ae</li> </ul> </li> </ul>"},{"location":"en/zh/components/model/#_5","title":"\u5b57\u6bb5\u914d\u7f6e","text":"<ul> <li> <p><code>table_fields</code>: \u8868\u683c\u5b57\u6bb5</p> <ul> <li>\u7c7b\u578b: <code>List[TableField]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u8868\u683c\u4e2d\u663e\u793a\u7684\u5b57\u6bb5\u53ca\u5176\u914d\u7f6e, \u66f4\u591a\u53c2\u6570\u9605\u8bfb: TableField</li> </ul> </li> <li> <p><code>form_fields</code>: \u8868\u5355\u5b57\u6bb5</p> <ul> <li>\u7c7b\u578b: <code>List[FormField]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u7f16\u8f91\u8868\u5355\u4e2d\u7684\u5b57\u6bb5\u53ca\u5176\u914d\u7f6e, \u66f4\u591a\u53c2\u6570\u9605\u8bfb: FormField</li> </ul> </li> <li> <p><code>search_fields</code>: \u641c\u7d22\u5b57\u6bb5</p> <ul> <li>\u7c7b\u578b: <code>List[SearchField]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u53ef\u641c\u7d22\u7684\u5b57\u6bb5, \u66f4\u591a\u53c2\u6570\u9605\u8bfb: SearchField</li> </ul> </li> <li> <p><code>filter_fields</code>: \u8fc7\u6ee4\u5b57\u6bb5</p> <ul> <li>\u7c7b\u578b: <code>List[FilterField]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u8fc7\u6ee4\u5668\u5b57\u6bb5, \u66f4\u591a\u53c2\u6570\u9605\u8bfb: FilterField</li> </ul> </li> <li> <p><code>import_fields</code>: \u5bfc\u5165\u5b57\u6bb5</p> <ul> <li>\u7c7b\u578b: <code>List[str]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u5bfc\u5165\u65f6\u53ef\u5bfc\u5165\u7684\u5b57\u6bb5</li> </ul> </li> </ul>"},{"location":"en/zh/components/model/#_6","title":"\u9ad8\u7ea7\u914d\u7f6e","text":""},{"location":"en/zh/components/model/#_7","title":"\u81ea\u5b9a\u4e49\u67e5\u8be2\u96c6","text":"<pre><code>async def get_queryset(self, request: Request, params: dict) -&gt; QuerySet:\n    \"\"\"\u81ea\u5b9a\u4e49\u67e5\u8be2\u96c6\"\"\"\n    queryset = self.model.all()\n\n    # \u6dfb\u52a0\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u6761\u4ef6\n    queryset = queryset.filter(is_active=True)\n\n    # \u5904\u7406\u5173\u8054\u67e5\u8be2\n    queryset = queryset.select_related(\"department\")\n\n    return queryset\n</code></pre>"},{"location":"en/zh/components/model/#_8","title":"\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316","text":"<pre><code>async def serialize_object(self, obj: Model, for_display: bool = True) -&gt; dict:\n    \"\"\"\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u65b9\u6cd5\"\"\"\n    result = await super().serialize_object(obj, for_display)\n\n    # \u6dfb\u52a0\u81ea\u5b9a\u4e49\u5b57\u6bb5\n    result['custom_field'] = await self.get_custom_value(obj)\n\n    return result\n</code></pre>"},{"location":"en/zh/components/model/#_9","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>from robyn_admin.core import ModelAdmin, TableField, SearchField, SelectFilter\nfrom your_models import User\n\nclass UserAdmin(ModelAdmin):\n    verbose_name = \"\u7528\u6237\u7ba1\u7406\"\n    menu_group = \"\u7cfb\u7edf\u7ba1\u7406\"\n    menu_icon = \"bi bi-people\"\n\n    table_fields = [\n        TableField(\"username\", label=\"\u7528\u6237\u540d\", sortable=True),\n        TableField(\"email\", label=\"\u90ae\u7bb1\", sortable=True),\n        TableField(\n            \"is_active\", \n            label=\"\u72b6\u6001\",\n            display_type=DisplayType.SWITCH,\n            editable=True,\n            labels={True: \"\u542f\u7528\", False: \"\u7981\u7528\"}\n        )\n    ]\n\n    search_fields = [\n        SearchField(\"username\", label=\"\u7528\u6237\u540d\"),\n        SearchField(\"email\", label=\"\u90ae\u7bb1\")\n    ]\n\n    filter_fields = [\n        SelectFilter(\n            \"is_active\",\n            label=\"\u72b6\u6001\",\n            choices={True: \"\u542f\u7528\", False: \"\u7981\u7528\"}\n        )\n    ]\n\n    default_ordering = [\"-created_at\"]\n</code></pre>"},{"location":"en/zh/components/register/","title":"AdminSite \u7ad9\u70b9\u6ce8\u518c","text":"<p>AdminSite \u662f QC Robyn Admin \u7684\u6838\u5fc3\u7c7b\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u548c\u914d\u7f6e\u6574\u4e2a\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\u3002</p>"},{"location":"en/zh/components/register/#_1","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from robyn import Robyn\nfrom qc_robyn_admin.core import AdminSite\n\napp = Robyn()\nadmin_site = AdminSite(\n    app,\n    title=\"QC Robyn Admin\",\n    prefix=\"admin\",\n    copyright=\"\u00a9 2024 \u516c\u53f8\u540d\u79f0 \u7248\u6743\u6240\u6709\",\n    db_url=\"postgresql://user:password@localhost:5432/dbname\",\n    modules={\n        \"models\": [\"model.table\", \"robyn_admin.models\"]\n    },\n    default_language=\"zh_CN\",\n    generate_schemas=True\n)\n</code></pre>"},{"location":"en/zh/components/register/#_2","title":"\u53c2\u6570\u8bf4\u660e","text":""},{"location":"en/zh/components/register/#_3","title":"\u5fc5\u9700\u53c2\u6570","text":"<ul> <li><code>app</code>: Robyn \u5e94\u7528\u5b9e\u4f8b<ul> <li>\u7c7b\u578b: <code>Robyn</code></li> <li>\u8bf4\u660e: \u7528\u4e8e\u6ce8\u518c\u8def\u7531\u548c\u5904\u7406\u5668\u7684 Robyn \u5e94\u7528\u5b9e\u4f8b</li> </ul> </li> </ul>"},{"location":"en/zh/components/register/#_4","title":"\u53ef\u9009\u53c2\u6570","text":"<ul> <li> <p><code>title</code>: \u540e\u53f0\u7cfb\u7edf\u6807\u9898</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u9ed8\u8ba4\u503c: 'QC Robyn Admin'</li> <li>\u8bf4\u660e: \u663e\u793a\u5728\u540e\u53f0\u754c\u9762\u9876\u90e8\u7684\u7cfb\u7edf\u540d\u79f0</li> </ul> </li> <li> <p><code>prefix</code>: \u8def\u7531\u524d\u7f00</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u9ed8\u8ba4\u503c: 'admin'</li> <li>\u8bf4\u660e: \u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\u7684 URL \u524d\u7f00\uff0c\u5982 '/admin'</li> </ul> </li> <li> <p><code>copyright</code>: \u7248\u6743\u4fe1\u606f</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u9ed8\u8ba4\u503c: 'QC Robyn Admin'</li> <li>\u8bf4\u660e: \u9875\u9762\u5e95\u90e8\u7684\u7248\u6743\u4fe1\u606f</li> </ul> </li> <li> <p><code>db_url</code>: \u6570\u636e\u5e93\u8fde\u63a5 URL</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u9ed8\u8ba4\u503c: None</li> <li>\u8bf4\u660e: \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u4e3a None \u5219\u5c1d\u8bd5\u590d\u7528\u5df2\u6709\u914d\u7f6e</li> </ul> </li> <li> <p><code>modules</code>: \u6a21\u578b\u6a21\u5757\u914d\u7f6e</p> <ul> <li>\u7c7b\u578b: <code>Dict[str, List[Union[str, ModuleType]]]</code></li> <li>\u9ed8\u8ba4\u503c: None</li> <li>\u8bf4\u660e: \u9700\u8981\u52a0\u8f7d\u7684\u6a21\u578b\u6a21\u5757\u914d\u7f6e</li> </ul> </li> <li> <p><code>default_language</code>: \u9ed8\u8ba4\u8bed\u8a00</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u9ed8\u8ba4\u503c: 'en_US'</li> <li>\u8bf4\u660e: \u7cfb\u7edf\u9ed8\u8ba4\u8bed\u8a00\uff0c\u652f\u6301 'zh_CN' \u548c 'en_US'</li> </ul> </li> <li> <p><code>generate_schemas</code>: \u662f\u5426\u81ea\u52a8\u751f\u6210\u6570\u636e\u5e93\u8868</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: False</li> <li>\u8bf4\u660e: \u662f\u5426\u5728\u542f\u52a8\u65f6\u81ea\u52a8\u521b\u5efa\u6570\u636e\u5e93\u8868\u7ed3\u6784</li> </ul> </li> </ul>"},{"location":"en/zh/components/register/#_5","title":"\u4e3b\u8981\u65b9\u6cd5","text":""},{"location":"en/zh/components/register/#register_model","title":"register_model","text":"<p>\u6ce8\u518c\u6a21\u578b\u5230\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\u3002</p> <pre><code>admin_site.register_model(YourModel, YourModelAdmin)\n</code></pre> <p>\u53c2\u6570: - <code>YourModel</code>: tortoise \u6a21\u578b\u7c7b - <code>YourModelAdmin</code>: \u5bf9\u5e94\u7684\u7ba1\u7406\u7c7b</p>"},{"location":"en/zh/components/register/#register_menu","title":"register_menu","text":"<p>\u6ce8\u518c\u81ea\u5b9a\u4e49\u83dc\u5355\u9879\u3002</p> <pre><code>from robyn_admin.core import MenuItem\n\nadmin_site.register_menu(MenuItem(\n    name=\"\u7cfb\u7edf\u7ba1\u7406\",\n    icon=\"bi bi-gear\",\n    order=1\n))\n</code></pre> <p>\u53c2\u6570: - <code>menu_item</code>: MenuItem \u5b9e\u4f8b\uff0c\u5305\u542b\u83dc\u5355\u7684\u540d\u79f0\u3001\u56fe\u6807\u7b49\u4fe1\u606f</p>"},{"location":"en/zh/components/register/#_6","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>from robyn import Robyn\nfrom robyn_admin.core import AdminSite, ModelAdmin, MenuItem\nfrom your_models import YourModel\n\napp = Robyn()\n\nadmin_site = AdminSite(\n    app,\n    title=\"\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\",\n    prefix=\"admin\",\n    copyright=\"\u00a9 2024 qc_robyn_admin\",\n    default_language=\"zh_CN\"\n)\n\nadmin_site.register_menu(MenuItem(\n    name=\"\u4e1a\u52a1\u7ba1\u7406\",\n    icon=\"bi bi-briefcase\",\n    order=1\n))\n\nadmin_site.register_model(YourModel, YourModelAdmin)\n</code></pre>"},{"location":"en/zh/components/register/#_7","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li> <p>\u6570\u636e\u5e93\u914d\u7f6e</p> <ul> <li>\u5982\u679c\u672a\u63d0\u4f9b <code>db_url</code>\uff0c\u7cfb\u7edf\u4f1a\u5c1d\u8bd5\u590d\u7528\u5df2\u6709\u7684\u6570\u636e\u5e93\u914d\u7f6e</li> <li>\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u660e\u786e\u63d0\u4f9b\u6570\u636e\u5e93\u914d\u7f6e</li> </ul> </li> <li> <p>\u6743\u9650\u63a7\u5236</p> <ul> <li>\u7cfb\u7edf\u4f1a\u81ea\u52a8\u521b\u5efa\u9ed8\u8ba4\u7684\u8d85\u7ea7\u7ba1\u7406\u5458\u8d26\u53f7\uff08\u7528\u6237\u540d: admin\uff0c\u5bc6\u7801: admin\uff09</li> <li>\u5efa\u8bae\u5728\u90e8\u7f72\u540e\u7acb\u5373\u4fee\u6539\u8d85\u7ea7\u7ba1\u7406\u5458\u5bc6\u7801</li> </ul> </li> <li> <p>\u8def\u7531\u524d\u7f00</p> <ul> <li>\u786e\u4fdd <code>prefix</code> \u4e0d\u8981\u4e0e\u5176\u4ed6\u8def\u7531\u51b2\u7a81</li> <li>\u5efa\u8bae\u4f7f\u7528\u6709\u610f\u4e49\u7684\u524d\u7f00\uff0c\u5982 'admin'\u3001'manage' \u7b49</li> </ul> </li> </ol>"},{"location":"en/zh/components/search_field/","title":"SearchField \u641c\u7d22\u5b57\u6bb5\u7ec4\u4ef6","text":"<p>SearchField \u662f\u7528\u4e8e\u914d\u7f6e\u6570\u636e\u5217\u8868\u641c\u7d22\u6761\u4ef6\u7684\u7ec4\u4ef6\uff0c\u652f\u6301\u666e\u901a\u5b57\u6bb5\u548c\u5173\u8054\u6a21\u578b\u5b57\u6bb5\u7684\u641c\u7d22\u3002</p> <p>\u914d\u7f6e\u5728AdminModel\u7684search_fields\u4e2d\u3002</p>"},{"location":"en/zh/components/search_field/#_1","title":"\u57fa\u672c\u7528\u6cd5","text":""},{"location":"en/zh/components/search_field/#_2","title":"\u666e\u901a\u5b57\u6bb5\u641c\u7d22","text":"<p>\u7528\u4e8e\u5bf9\u5f53\u524d\u6a21\u578b\u5b57\u6bb5\u8fdb\u884c\u641c\u7d22\uff1a</p> <pre><code>search_fields = [\n    SearchField(\n        name=\"username\",           # \u5b57\u6bb5\u540d\n    )\n]\n</code></pre>"},{"location":"en/zh/components/search_field/#_3","title":"\u5173\u8054\u6a21\u578b\u5b57\u6bb5\u641c\u7d22","text":"<p>\u7528\u4e8e\u5bf9\u5173\u8054\u6a21\u578b\u7684\u5b57\u6bb5\u8fdb\u884c\u641c\u7d22\uff1a</p> <pre><code>search_fields = [\n    SearchField(\n        name=\"Category_name\",      # \u683c\u5f0f\u4e3a: \u5173\u8054\u6a21\u578b\u540d_\u5b57\u6bb5\u540d\n        related_model=Category,    # \u5173\u8054\u7684\u6a21\u578b\u7c7b\n        related_key=\"category_id\"  # \u5916\u952e\u5b57\u6bb5\u540d\n    )\n]\n</code></pre>"},{"location":"en/zh/components/search_field/#_4","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>class TrademarkRecordAdmin(AdminModel):\n    search_fields = [\n        # \u5173\u8054\u6a21\u578b\u5b57\u6bb5\u641c\u7d22\n        SearchField(\n            name=\"US_Trademark_mark_name\",     # \u641c\u7d22\u5546\u6807\u540d\u79f0\n            related_model=US_Trademark,\n            related_key=\"trademark_id\",\n        ),\n        SearchField(\n            name=\"US_Trademark_serial_number\", # \u641c\u7d22\u5546\u6807\u7f16\u53f7\n            related_model=US_Trademark,\n            related_key=\"trademark_id\",\n        )\n    ]\n</code></pre>"},{"location":"en/zh/components/search_field/#_5","title":"\u91cd\u8981\u53c2\u6570\u8bf4\u660e","text":""},{"location":"en/zh/components/search_field/#_6","title":"\u57fa\u7840\u53c2\u6570","text":"<ul> <li><code>name</code>: \u641c\u7d22\u5b57\u6bb5\u540d\u79f0<ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u5bf9\u5e94\u6a21\u578b\u7684\u5b57\u6bb5\u540d\uff0c\u5173\u8054\u6a21\u578b\u683c\u5f0f\u4e3a\"\u6a21\u578b\u540d_\u5b57\u6bb5\u540d\"</li> </ul> </li> </ul>"},{"location":"en/zh/components/search_field/#_7","title":"\u5173\u8054\u6a21\u578b\u53c2\u6570","text":"<ul> <li> <p><code>related_model</code>: \u5173\u8054\u7684\u6a21\u578b\u7c7b</p> <ul> <li>\u7c7b\u578b: <code>Type[Model]</code></li> <li>\u8bf4\u660e: \u6307\u5b9a\u5173\u8054\u7684\u6a21\u578b\u7c7b</li> </ul> </li> <li> <p><code>related_key</code>: \u5173\u8054\u7684\u5916\u952e\u5b57\u6bb5</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u6307\u5b9a\u5173\u8054\u6a21\u578b\u7684\u5916\u952e\u5b57\u6bb5\u540d</li> </ul> </li> </ul>"},{"location":"en/zh/components/search_field/#_8","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li> <p>\u5173\u8054\u6a21\u578b\u641c\u7d22</p> <ul> <li>\u5b57\u6bb5\u540d\u5fc5\u987b\u7b26\u5408\"\u6a21\u578b\u540d_\u5b57\u6bb5\u540d\"\u7684\u683c\u5f0f</li> <li>\u9700\u8981\u540c\u65f6\u914d\u7f6erelated_model\u548crelated_key\u53c2\u6570</li> </ul> </li> <li> <p>\u641c\u7d22\u884c\u4e3a</p> <ul> <li>\u9ed8\u8ba4\u4f7f\u7528\u6a21\u7cca\u5339\u914d\uff08icontains\uff09\u8fdb\u884c\u641c\u7d22</li> <li>\u591a\u4e2a\u641c\u7d22\u5b57\u6bb5\u4e4b\u95f4\u662fOR\u5173\u7cfb </li> </ul> </li> </ol>"},{"location":"en/zh/components/table_field/","title":"TableField \u8868\u683c\u5b57\u6bb5\u7ec4\u4ef6","text":"<p>TableField \u662f\u7528\u4e8e\u914d\u7f6e\u8868\u683c\u5217\u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u652f\u6301\u591a\u79cd\u663e\u793a\u7c7b\u578b\u3001\u5173\u8054\u67e5\u8be2\u3001\u683c\u5f0f\u5316\u7b49\u529f\u80fd\u3002</p>"},{"location":"en/zh/components/table_field/#_1","title":"\u57fa\u672c\u53c2\u6570","text":"<ul> <li> <p><code>name</code>: \u5b57\u6bb5\u540d\u79f0</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u5bf9\u5e94\u6a21\u578b\u7684\u5b57\u6bb5\u540d\uff0c\u5173\u8054\u5b57\u6bb5\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u8bed\u6cd5</li> </ul> </li> <li> <p><code>label</code>: \u663e\u793a\u6807\u7b7e</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u8868\u683c\u5217\u5934\u663e\u793a\u7684\u540d\u79f0</li> </ul> </li> <li> <p><code>display_type</code>: \u663e\u793a\u7c7b\u578b</p> <ul> <li>\u7c7b\u578b: <code>DisplayType</code></li> <li>\u53ef\u9009\u503c:<ul> <li><code>TEXT</code>: \u6587\u672c\u7c7b\u578b</li> <li><code>DATETIME</code>: \u65e5\u671f\u65f6\u95f4\u7c7b\u578b</li> <li><code>LINK</code>: \u94fe\u63a5\u7c7b\u578b</li> <li><code>SWITCH</code>: \u5f00\u5173\u7c7b\u578b</li> <li><code>IMAGE</code>: \u56fe\u7247\u7c7b\u578b</li> <li><code>SELECT</code>: \u9009\u62e9\u7c7b\u578b</li> </ul> </li> <li>\u8bf4\u660e: \u51b3\u5b9a\u5b57\u6bb5\u5728\u8868\u683c\u4e2d\u7684\u663e\u793a\u65b9\u5f0f</li> </ul> </li> <li> <p><code>sortable</code>: \u662f\u5426\u53ef\u6392\u5e8f</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>False</code></li> <li>\u8bf4\u660e: \u662f\u5426\u5141\u8bb8\u70b9\u51fb\u5217\u5934\u8fdb\u884c\u6392\u5e8f</li> </ul> </li> <li> <p><code>editable</code>: \u662f\u5426\u53ef\u7f16\u8f91</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>False</code></li> <li>\u8bf4\u660e: \u662f\u5426\u5141\u8bb8\u76f4\u63a5\u5728\u8868\u683c\u4e2d\u7f16\u8f91</li> </ul> </li> <li> <p><code>hidden</code>: \u662f\u5426\u9690\u85cf</p> <ul> <li>\u7c7b\u578b: <code>bool</code></li> <li>\u9ed8\u8ba4\u503c: <code>False</code></li> <li>\u8bf4\u660e: \u662f\u5426\u5728\u8868\u683c\u4e2d\u9690\u85cf\u8be5\u5217</li> </ul> </li> </ul>"},{"location":"en/zh/components/table_field/#_2","title":"\u5173\u8054\u5b57\u6bb5\u914d\u7f6e","text":"<p>\u7528\u4e8e\u914d\u7f6e\u5173\u8054\u6a21\u578b\u7684\u5b57\u6bb5\u663e\u793a\uff1a</p> <ul> <li> <p><code>related_model</code>: \u5173\u8054\u6a21\u578b</p> <ul> <li>\u7c7b\u578b: <code>Type[Model]</code></li> <li>\u8bf4\u660e: \u5173\u8054\u7684 Tortoise ORM \u6a21\u578b\u7c7b</li> </ul> </li> <li> <p><code>related_key</code>: \u5173\u8054\u952e</p> <ul> <li>\u7c7b\u578b: <code>str</code></li> <li>\u8bf4\u660e: \u5f53\u524d\u6a21\u578b\u4e2d\u7684\u5916\u952e\u5b57\u6bb5\u540d</li> </ul> </li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>TableField(\n    \"Trademark_mark_name\",  # \u4f7f\u7528 \u6a21\u578b\u540d_\u5b57\u6bb5\u540d \u7684\u683c\u5f0f\n    label=\"\u5546\u6807\",\n    related_model=Trademark,  # \u5173\u8054\u7684tortoise-orm\u6a21\u578b\u7c7b\n    related_key=\"trademark_id\",  # \u5916\u952e\u5b57\u6bb5\u540d\n    sortable=True\n)\n</code></pre>"},{"location":"en/zh/components/table_field/#_3","title":"\u683c\u5f0f\u5316\u914d\u7f6e","text":""},{"location":"en/zh/components/table_field/#formatter","title":"formatter \u51fd\u6570","text":"<p>\u7528\u4e8e\u81ea\u5b9a\u4e49\u5b57\u6bb5\u7684\u663e\u793a\u683c\u5f0f\uff1a\u53ef\u4ee5\u4f20\u5165html\u6216\u8005\u5bf9\u6570\u636e\u5e93\u8fd4\u56de\u503c\u8fdb\u884c\u683c\u5f0f\u5316\u7b49\u64cd\u4f5c</p> <pre><code>TableField(\n    \"create_mail_date\",\n    label=\"\u521b\u5efa\u65f6\u95f4\",\n    display_type=DisplayType.DATETIME,\n    formatter=lambda x: x.strftime('%Y-%m-%d') if x else ''\n)\nTableField(\n    \"document_link\", \n    label=\"\u6587\u6863\u94fe\u63a5\", \n    display_type=DisplayType.LINK,\n    sortable=True,\n    formatter=lambda x: f'&lt;a href=\"{x}\" target=\"_blank\"&gt;\u67e5\u770b\u6587\u4ef6&lt;/a&gt;' if x else ''\n)\n</code></pre>"},{"location":"en/zh/components/table_field/#_4","title":"\u5f00\u5173\u7ec4\u4ef6\u914d\u7f6e","text":"<p>\u7528\u4e8e\u5e03\u5c14\u503c\u5b57\u6bb5\u7684\u5f00\u5173\u663e\u793a\uff1a</p> <ul> <li> <p><code>labels</code>: \u663e\u793a\u6587\u672c\u914d\u7f6e</p> <ul> <li>\u7c7b\u578b: <code>Dict[bool, str]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u5f00\u5173\u4e0d\u540c\u72b6\u6001\u663e\u793a\u7684\u6587\u672c</li> </ul> </li> <li> <p><code>choices</code>: \u503c\u6620\u5c04\u914d\u7f6e</p> <ul> <li>\u7c7b\u578b: <code>Dict[bool, Any]</code></li> <li>\u8bf4\u660e: \u5b9a\u4e49\u5f00\u5173\u72b6\u6001\u5bf9\u5e94\u7684\u5b9e\u9645\u503c</li> </ul> </li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>TableField(\n    \"push_to_customer_done\",\n    label=\"\u5904\u7406\u60c5\u51b5\",\n    display_type=DisplayType.SWITCH,\n    editable=True,\n    labels={True: \"\u5df2\u5904\u7406\", False: \"\u672a\u5904\u7406\"},\n    choices={True: True, False: False}\n)\n</code></pre>"},{"location":"en/zh/components/table_field/#_5","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>table_fields = [\n    # \u4e3b\u952e\u5b57\u6bb5\uff08\u901a\u5e38\u9690\u85cf\uff09\n    TableField(\n        \"id\", \n        label=\"ID\", \n        display_type=DisplayType.TEXT, \n        editable=True, \n        hidden=True\n    ),\n\n    # \u5173\u8054\u5b57\u6bb5\n    TableField(\n        \"US_Trademark_mark_name\",\n        label=\"\u5546\u6807\",\n        related_model=US_Trademark,\n        related_key=\"trademark_id\",\n        sortable=True\n    ),\n\n    # \u666e\u901a\u6587\u672c\u5b57\u6bb5\n    TableField(\n        \"document_description\", \n        label=\"\u6587\u6863\u63cf\u8ff0\", \n        display_type=DisplayType.TEXT, \n        sortable=True, \n        formatter=lambda x: x\n    ),\n\n    # \u65e5\u671f\u65f6\u95f4\u5b57\u6bb5\n    TableField(\n        \"create_mail_date\", \n        label=\"\u521b\u5efa\u65f6\u95f4\", \n        display_type=DisplayType.DATETIME, \n        sortable=True, \n        formatter=lambda x: x.strftime('%Y-%m-%d') if x else ''\n    ),\n\n    # \u94fe\u63a5\u5b57\u6bb5\n    TableField(\n        \"document_link\", \n        label=\"\u6587\u6863\u94fe\u63a5\", \n        display_type=DisplayType.LINK,\n        formatter=lambda x: f'&lt;a href=\"{x}\" target=\"_blank\"&gt;\u67e5\u770b\u6587\u4ef6&lt;/a&gt;' if x else ''\n    ),\n\n    # \u5f00\u5173\u5b57\u6bb5\n    TableField(\n        \"push_to_customer_done\", \n        label=\"\u5904\u7406\u60c5\u51b5\",\n        display_type=DisplayType.SWITCH,\n        editable=True,\n        labels={True: \"\u5df2\u5904\u7406\", False: \"\u672a\u5904\u7406\"},\n        choices={True: True, False: False}\n    )\n]\n</code></pre>"},{"location":"en/zh/hooks/add_hook/","title":"\u6dfb\u52a0\u94a9\u5b50\u51fd\u6570","text":""},{"location":"en/zh/hooks/add_hook/#_2","title":"\u6982\u8ff0","text":"<p>\u6dfb\u52a0\u94a9\u5b50\u51fd\u6570\u5141\u8bb8\u60a8\u5728\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u81ea\u5b9a\u4e49\u6dfb\u52a0\u64cd\u4f5c\u7684\u5904\u7406\u903b\u8f91\u3002\u901a\u8fc7\u91cd\u5199<code>handle_add</code>\u65b9\u6cd5,\u60a8\u53ef\u4ee5:</p> <ul> <li>\u5728\u4fdd\u5b58\u524d\u540e\u6dfb\u52a0\u81ea\u5b9a\u4e49\u4e1a\u52a1\u903b\u8f91</li> <li>\u4fee\u6539\u8981\u4fdd\u5b58\u7684\u6570\u636e</li> <li>\u6dfb\u52a0\u989d\u5916\u7684\u5b57\u6bb5\u8bbe\u7f6e</li> <li>\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u9a8c\u8bc1\u903b\u8f91</li> </ul>"},{"location":"en/zh/hooks/add_hook/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>\u5728\u60a8\u7684\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u91cd\u5199<code>handle_add</code>\u65b9\u6cd5:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_add(self, request: Request, data: dict) -&gt; tuple[bool, str]:\n        \"\"\"\n        \u5904\u7406\u6dfb\u52a0\u64cd\u4f5c\u7684\u94a9\u5b50\u65b9\u6cd5\n        Args:\n            request: Request\u5bf9\u8c61\n            data: \u6dfb\u52a0\u7684\u6570\u636e\n        Returns:\n            tuple[bool, str]: (\u662f\u5426\u6210\u529f, \u6d88\u606f)\n        \"\"\"\n        try:\n            # \u5904\u7406\u8868\u5355\u6570\u636e\n            processed_data = await self.process_form_data(data)\n\n            # \u5728\u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u903b\u8f91\n            # \u4f8b\u5982\uff1a\u6dfb\u52a0\u521b\u5efa\u65f6\u95f4\n            processed_data['created_at'] = datetime.now()\n\n            # \u521b\u5efa\u5bf9\u8c61\n            obj = await self.model.create(**processed_data)\n\n            # \u8fd9\u91cc\u53ef\u4ee5\u8fdb\ufffd\ufffd\u5176\u4ed6\u64cd\u4f5c\uff0c\u6bd4\u5982\uff1a\n            # - \u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7\n            # - \u53d1\u9001\u901a\u77e5\n            # - \u89e6\u53d1\u5176\u4ed6\u4e1a\u52a1\u6d41\u7a0b\n\n            return True, \"\u521b\u5efa\u6210\u529f\"\n\n        except Exception as e:\n            print(f\"\u6dfb\u52a0\u5904\u7406\u9519\u8bef: {str(e)}\")\n            return False, f\"\u521b\u5efa\u5931\u8d25: {str(e)}\"\n</code></pre>"},{"location":"en/zh/hooks/add_hook/#_4","title":"\u53c2\u6570\u8bf4\u660e","text":"<ul> <li><code>request</code>: Robyn\u7684Request\u5bf9\u8c61,\u5305\u542b\u5f53\u524d\u8bf7\u6c42\u7684\u6240\u6709\u4fe1\u606f</li> <li><code>data</code>: \u5305\u542b\u6dfb\u52a0\u6570\u636e\u7684\u5b57\u5178,\u952e\u4e3a\u5b57\u6bb5\u540d,\u503c\u4e3a\u5b57\u6bb5\u503c</li> </ul>"},{"location":"en/zh/hooks/add_hook/#_5","title":"\u8fd4\u56de\u503c","text":"<p>\u8be5\u65b9\u6cd5\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4,\u5305\u542b:</p> <ul> <li><code>bool</code>: \u8868\u793a\u64cd\u4f5c\u662f\u5426\u6210\u529f</li> <li><code>str</code>: \u64cd\u4f5c\u7ed3\u679c\u6d88\u606f</li> </ul>"},{"location":"en/zh/hooks/batch_delete_hook/","title":"\u6279\u91cf\u5220\u9664\u94a9\u5b50\u51fd\u6570","text":""},{"location":"en/zh/hooks/batch_delete_hook/#_2","title":"\u6982\u8ff0","text":"<p>\u6279\u91cf\u5220\u9664\u94a9\u5b50\u51fd\u6570\u5141\u8bb8\u60a8\u5728\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u81ea\u5b9a\u4e49\u6279\u91cf\u5220\u9664\u64cd\u4f5c\u7684\u5904\u7406\u903b\u8f91\u3002\u901a\u8fc7\u91cd\u5199<code>handle_batch_delete</code>\u65b9\u6cd5,\u60a8\u53ef\u4ee5:</p> <ul> <li>\u5b9e\u73b0\u6279\u91cf\u8f6f\u5220\u9664</li> <li>\u6dfb\u52a0\u5220\u9664\u524d\u7684\u6570\u636e\u9a8c\u8bc1</li> <li>\u6279\u91cf\u5904\u7406\u5173\u8054\u6570\u636e</li> <li>\u8bb0\u5f55\u6279\u91cf\u5220\u9664\u65e5\u5fd7</li> </ul>"},{"location":"en/zh/hooks/batch_delete_hook/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>\u5728\u60a8\u7684\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u91cd\u5199<code>handle_batch_delete</code>\u65b9\u6cd5:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_batch_delete(self, request: Request, ids: list) -&gt; tuple[bool, str, int]:\n        \"\"\"\n        \u5904\u7406\u6279\u91cf\u5220\u9664\u64cd\u4f5c\u7684\u94a9\u5b50\u65b9\u6cd5\n        Args:\n            request: Request\u5bf9\u8c61\n            ids: \u8981\u5220\u9664\u7684\u8bb0\u5f55ID\u5217\u8868\n        Returns:\n            tuple[bool, str, int]: (\u662f\u5426\u6210\u529f, \u6d88\u606f, \u5220\u9664\u6210\u529f\u6570\u91cf)\n        \"\"\"\n        try:\n            deleted_count = 0\n            for id in ids:\n                try:\n                    obj = await self.get_object(id)\n                    if obj:\n                        # \u5728\u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u903b\u8f91\n                        # \u4f8b\u5982\uff1a\u8f6f\u5220\u9664\n                        obj.is_deleted = True\n                        await obj.save()\n\n                        # \u6216\u8005\u6267\u884c\u7269\u7406\u5220\u9664\n                        # await obj.delete()\n\n                        # \u8fd9\u91cc\u53ef\u4ee5\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\uff0c\u6bd4\u5982\uff1a\n                        # - \u68c0\u67e5\u5173\u8054\u6570\u636e\n                        # - \u8bb0\u5f55\u5220\u9664\u65e5\u5fd7\n                        # - \u53d1\u9001\u901a\u77e5\n\n                        deleted_count += 1\n                except Exception as e:\n                    print(f\"\u5220\u9664\u8bb0\u5f55 {id} \u5931\u8d25: {str(e)}\")\n                    continue\n\n            if deleted_count &gt; 0:\n                return True, f\"\u6210\u529f\u5220\u9664 {deleted_count} \u6761\u8bb0\u5f55\", deleted_count\n            return False, \"\u6ca1\u6709\u8bb0\u5f55\u88ab\u5220\u9664\", 0\n\n        except Exception as e:\n            print(f\"\u6279\u91cf\u5220\u9664\u5904\u7406\u9519\u8bef: {str(e)}\")\n            return False, f\"\u6279\u91cf\u5220\u9664\u5931\u8d25: {str(e)}\", 0\n</code></pre>"},{"location":"en/zh/hooks/batch_delete_hook/#_4","title":"\u53c2\u6570\u8bf4\u660e","text":"<ul> <li><code>request</code>: Robyn\u7684Request\u5bf9\u8c61,\u5305\u542b\u5f53\u524d\u8bf7\u6c42\u7684\u6240\u6709\u4fe1\u606f</li> <li><code>ids</code>: \u8981\u5220\u9664\u7684\u8bb0\u5f55ID\u5217\u8868</li> </ul>"},{"location":"en/zh/hooks/batch_delete_hook/#_5","title":"\u8fd4\u56de\u503c","text":"<p>\u8be5\u65b9\u6cd5\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4,\u5305\u542b:</p> <ul> <li><code>bool</code>: \u8868\u793a\u64cd\u4f5c\u662f\u5426\u6210\u529f</li> <li><code>str</code>: \u64cd\u4f5c\u7ed3\u679c\u6d88\u606f</li> <li><code>int</code>: \u6210\u529f\u5220\u9664\u7684\u8bb0\u5f55\u6570\u91cf </li> </ul>"},{"location":"en/zh/hooks/delete_hook/","title":"\u5220\u9664\u94a9\u5b50\u51fd\u6570","text":""},{"location":"en/zh/hooks/delete_hook/#_2","title":"\u6982\u8ff0","text":"<p>\u5220\u9664\u94a9\u5b50\u51fd\u6570\u5141\u8bb8\u60a8\u5728\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u81ea\u5b9a\u4e49\u5220\u9664\u64cd\u4f5c\u7684\u5904\u7406\u903b\u8f91\u3002\u901a\u8fc7\u91cd\u5199<code>handle_delete</code>\u65b9\u6cd5,\u60a8\u53ef\u4ee5:</p> <ul> <li>\u5b9e\u73b0\u8f6f\u5220\u9664</li> <li>\u6dfb\u52a0\u5220\u9664\u524d\u7684\u6570\u636e\u9a8c\u8bc1</li> <li>\u5904\u7406\u5173\u8054\u6570\u636e</li> <li>\u8bb0\u5f55\u5220\u9664\u65e5\u5fd7</li> </ul>"},{"location":"en/zh/hooks/delete_hook/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>\u5728\u60a8\u7684\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u91cd\u5199<code>handle_delete</code>\u65b9\u6cd5:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_delete(self, request: Request, object_id: str) -&gt; tuple[bool, str]:\n        \"\"\"\n        \u5904\u7406\u5220\u9664\u64cd\u4f5c\u7684\u94a9\u5b50\u65b9\u6cd5\n        Args:\n            request: Request\u5bf9\u8c61\n            object_id: \u8bb0\u5f55ID\n        Returns:\n            tuple[bool, str]: (\u662f\u5426\u6210\u529f, \u6d88\u606f)\n        \"\"\"\n        try:\n            obj = await self.get_object(object_id)\n            if not obj:\n                return False, \"\u8bb0\u5f55\u4e0d\u5b58\u5728\"\n\n            # \u5728\u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u903b\u8f91\n            # \u4f8b\u5982\uff1a\u8f6f\u5220\u9664\n            obj.is_deleted = True\n            await obj.save()\n\n            # \u6216\u8005\u6267\u884c\u7269\u7406\u5220\u9664\n            # await obj.delete()\n\n            # \u8fd9\u91cc\u53ef\u4ee5\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\uff0c\u6bd4\u5982\uff1a\n            # - \u68c0\u67e5\u5173\u8054\u6570\u636e\n            # - \u8bb0\u5f55\u5220\u9664\u65e5\u5fd7\n            # - \u53d1\u9001\u901a\u77e5\n\n            return True, \"\u5220\u9664\u6210\u529f\"\n\n        except Exception as e:\n            print(f\"\u5220\u9664\u5904\u7406\u9519\u8bef: {str(e)}\")\n            return False, f\"\u5220\u9664\u5931\u8d25: {str(e)}\"\n</code></pre>"},{"location":"en/zh/hooks/delete_hook/#_4","title":"\u53c2\u6570\u8bf4\u660e","text":"<ul> <li><code>request</code>: Robyn\u7684Request\u5bf9\u8c61,\u5305\u542b\u5f53\u524d\u8bf7\u6c42\u7684\u6240\u6709\u4fe1\u606f</li> <li><code>object_id</code>: \u8981\u5220\u9664\u7684\u8bb0\u5f55ID</li> </ul>"},{"location":"en/zh/hooks/delete_hook/#_5","title":"\u8fd4\u56de\u503c","text":"<p>\u8be5\u65b9\u6cd5\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4,\u5305\u542b:</p> <ul> <li><code>bool</code>: \u8868\u793a\u64cd\u4f5c\u662f\u5426\u6210\u529f</li> <li><code>str</code>: \u64cd\u4f5c\u7ed3\u679c\u6d88\u606f </li> </ul>"},{"location":"en/zh/hooks/edit_hook/","title":"\u7f16\u8f91\u94a9\u5b50\u51fd\u6570","text":""},{"location":"en/zh/hooks/edit_hook/#_2","title":"\u6982\u8ff0","text":"<p>\u7f16\u8f91\u94a9\u5b50\u51fd\u6570\u5141\u8bb8\u60a8\u5728\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u81ea\u5b9a\u4e49\u7f16\u8f91\u64cd\u4f5c\u7684\u5904\u7406\u903b\u8f91\u3002\u901a\u8fc7\u91cd\u5199<code>handle_edit</code>\u65b9\u6cd5,\u60a8\u53ef\u4ee5:</p> <ul> <li>\u5728\u4fdd\u5b58\u524d\u540e\u6dfb\u52a0\u81ea\u5b9a\u4e49\u4e1a\u52a1\u903b\u8f91</li> <li>\u4fee\u6539\u8981\u4fdd\u5b58\u7684\u6570\u636e</li> <li>\u6dfb\u52a0\u989d\u5916\u7684\u5b57\u6bb5\u66f4\u65b0</li> <li>\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u9a8c\u8bc1\u903b\u8f91</li> </ul>"},{"location":"en/zh/hooks/edit_hook/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>\u5728\u60a8\u7684\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u91cd\u5199<code>handle_edit</code>\u65b9\u6cd5:</p> <pre><code>python\n\nclass YourModelAdmin(ModelAdmin):\n    async def handle_edit(self, request: Request,\n             object_id: str, data: dict) -&gt; tuple[bool, str]:\n    \"\"\"\n    \u5904\u7406\u7f16\u8f91\u64cd\u4f5c\u7684\u94a9\u5b50\u65b9\u6cd5\n    Args:\n    request: Request\u5bf9\u8c61\n    object_id: \u8bb0\u5f55ID\n    data: \u7f16\u8f91\u7684\u6570\u636e\n    Returns:\n    tuple[bool, str]: (\u662f\u5426\u6210\u529f, \u6d88\u606f)\n    \"\"\"\n        try:\n        # \u83b7\u53d6\u539f\u59cb\u5bf9\u8c61\n            obj = await self.get_object(object_id)\n            if not obj:\n                return False, \"\u8bb0\u5f55\u4e0d\u5b58\u5728\"\n            # \u8c03\u7528process_form_data\u65b9\u6cd5\u5904\u7406\u8868\u5355\u6570\u636e\n            processed_data = await self.process_form_data(data)\n            # \u66f4\u65b0\u5bf9\u8c61\n            for field, value in processed_data.items():\n                setattr(obj, field, value)\n            #  \u8fd9\u91cc\u53ef\u4ee5\u505a\u522b\u7684\u5904\u7406\uff0c\u6bd4\u5982\u5199\u65e5\u5fd7\u6216\u8005\u7ed9\u6570\u636e\u5e93\u522b\u7684\u5b57\u6bb5\u8bbe\u7f6e\u503c\n            # \u4f8b\u5982\uff1a setattr(obj, \"finish_time\", datetime.now())\n            await obj.save()\n            return True, \"\u66f4\u65b0\u6210\u529f\"\n        except Exception as e:\n            print(f\"\u7f16\u8f91\u5904\u7406\u9519\u8bef: {str(e)}\")\n            return False, f\"\u66f4\u65b0\u5931\u8d25: {str(e)}\"\n</code></pre>"},{"location":"en/zh/hooks/edit_hook/#_4","title":"\u53c2\u6570\u8bf4\u660e","text":"<ul> <li><code>request</code>: Robyn\u7684Request\u5bf9\u8c61,\u5305\u542b\u5f53\u524d\u8bf7\u6c42\u7684\u6240\u6709\u4fe1\u606f</li> <li><code>object_id</code>: \u8981\u7f16\u8f91\u7684\u8bb0\u5f55ID</li> <li><code>data</code>: \u5305\u542b\u7f16\u8f91\u6570\u636e\u7684\u5b57\u5178,\u952e\u4e3a\u5b57\u6bb5\u540d,\u503c\u4e3a\u5b57\u6bb5\u503c</li> </ul>"},{"location":"en/zh/hooks/edit_hook/#_5","title":"\u8fd4\u56de\u503c","text":"<p>\u8be5\u65b9\u6cd5\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4,\u5305\u542b:</p> <ul> <li><code>bool</code>: \u8868\u793a\u64cd\u4f5c\u662f\u5426\u6210\u529f</li> <li><code>str</code>: \u64cd\u4f5c\u7ed3\u679c\u6d88\u606f</li> </ul>"},{"location":"en/zh/hooks/query_hook/","title":"\u67e5\u8be2\u94a9\u5b50\u51fd\u6570","text":""},{"location":"en/zh/hooks/query_hook/#_2","title":"\u6982\u8ff0","text":"<p>\u67e5\u8be2\u94a9\u5b50\u51fd\u6570\u5141\u8bb8\u60a8\u5728\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u81ea\u5b9a\u4e49\u6570\u636e\u67e5\u8be2\u7684\u5904\u7406\u903b\u8f91\u3002\u901a\u8fc7\u91cd\u5199<code>handle_query</code>\u65b9\u6cd5,\u60a8\u53ef\u4ee5:</p> <ul> <li>\u81ea\u5b9a\u4e49\u67e5\u8be2\u6761\u4ef6</li> <li>\u6dfb\u52a0\u6570\u636e\u8fc7\u6ee4</li> <li>\u81ea\u5b9a\u4e49\u6392\u5e8f\u903b\u8f91</li> <li>\u5b9e\u73b0\u6570\u636e\u6743\u9650\u63a7\u5236</li> </ul>"},{"location":"en/zh/hooks/query_hook/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>\u5728\u60a8\u7684\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u91cd\u5199<code>handle_query</code>\u65b9\u6cd5:</p> <pre><code>class YourModelAdmin(ModelAdmin):\n    async def handle_query(self, request: Request, params: dict) -&gt; tuple[QuerySet, int]:\n        \"\"\"\n        \u5904\u7406\u6570\u636e\u67e5\u8be2\u7684\u94a9\u5b50\u65b9\u6cd5\n        Args:\n            request: Request\u5bf9\u8c61\n            params: \u67e5\u8be2\u53c2\u6570\u5b57\u5178,\u5305\u542b:\n                - limit: \u6bcf\u9875\u8bb0\u5f55\u6570\n                - offset: \u504f\u79fb\u91cf\n                - search: \u641c\u7d22\u5173\u952e\u5b57\n                - sort: \u6392\u5e8f\u5b57\u6bb5\n                - order: \u6392\u5e8f\u65b9\u5f0f(asc/desc)\n                - \u5176\u4ed6\u8fc7\u6ee4\u53c2\u6570\n        Returns:\n            tuple[QuerySet, int]: (\u67e5\u8be2\u7ed3\u679c\u96c6, \u603b\u8bb0\u5f55\u6570)\n        \"\"\"\n        try:\n            # \u83b7\u53d6\u57fa\u7840\u67e5\u8be2\u96c6\n            queryset = await self.get_queryset(request, params)\n\n            # \u5728\u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u903b\u8f91\n            # \u4f8b\u5982\uff1a\u6570\u636e\u6743\u9650\u63a7\u5236\n            if not request.user.is_superuser:\n                queryset = queryset.filter(owner=request.user)\n\n            # \u81ea\u5b9a\u4e49\u8fc7\u6ee4\u6761\u4ef6\n            if params.get('status'):\n                queryset = queryset.filter(status=params['status'])\n\n            # \u5904\u7406\u6392\u5e8f\n            if params.get('sort'):\n                order_by = f\"{'-' if params['order'] == 'desc' else ''}{params['sort']}\"\n                queryset = queryset.order_by(order_by)\n            elif self.default_ordering:\n                queryset = queryset.order_by(*self.default_ordering)\n\n            # \u83b7\u53d6\u603b\u8bb0\u5f55\u6570\n            total = await queryset.count()\n\n            # \u5206\u9875\n            queryset = queryset.offset(params['offset']).limit(params['limit'])\n\n            return queryset, total\n\n        except Exception as e:\n            print(f\"\u67e5\u8be2\u5904\u7406\u9519\u8bef: {str(e)}\")\n            return self.model.all(), 0\n</code></pre>"},{"location":"en/zh/hooks/query_hook/#_4","title":"\u53c2\u6570\u8bf4\u660e","text":"<ul> <li><code>request</code>: Robyn\u7684Request\u5bf9\u8c61,\u5305\u542b\u5f53\u524d\u8bf7\u6c42\u7684\u6240\u6709\u4fe1\u606f</li> <li><code>params</code>: \u67e5\u8be2\u53c2\u6570\u5b57\u5178,\u5305\u542b\u5206\u9875\u3001\u6392\u5e8f\u3001\u641c\u7d22\u7b49\u53c2\u6570</li> </ul>"},{"location":"en/zh/hooks/query_hook/#_5","title":"\u8fd4\u56de\u503c","text":"<p>\u8be5\u65b9\u6cd5\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4,\u5305\u542b:</p> <ul> <li><code>QuerySet</code>: \u67e5\u8be2\u7ed3\u679c\u96c6</li> <li><code>int</code>: \u603b\u8bb0\u5f55\u6570 </li> </ul>"}]}